
NUCLEO_F303RE_FreeRTOS_BaseSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004ff4  08004ff4  00005ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080050a4  080050a4  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050a4  080050a4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080050ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004e1c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004e7c  20004e7c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014385  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e99  00000000  00000000  0001b415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  0001e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d49  00000000  00000000  0001f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022149  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014df1  00000000  00000000  00042282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cee6a  00000000  00000000  00057073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125edd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a44  00000000  00000000  00125f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0012a964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fdc 	.word	0x08004fdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004fdc 	.word	0x08004fdc

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80001e4:	4a08      	ldr	r2, [pc, #32]	@ (8000208 <MX_FREERTOS_Init+0x28>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4808      	ldr	r0, [pc, #32]	@ (800020c <MX_FREERTOS_Init+0x2c>)
 80001ea:	f002 f8af 	bl	800234c <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a07      	ldr	r2, [pc, #28]	@ (8000210 <MX_FREERTOS_Init+0x30>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <MX_FREERTOS_Init+0x34>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4807      	ldr	r0, [pc, #28]	@ (8000218 <MX_FREERTOS_Init+0x38>)
 80001fa:	f002 f8a7 	bl	800234c <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a06      	ldr	r2, [pc, #24]	@ (800021c <MX_FREERTOS_Init+0x3c>)
 8000202:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	08005024 	.word	0x08005024
 800020c:	08000221 	.word	0x08000221
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08005048 	.word	0x08005048
 8000218:	0800024d 	.word	0x0800024d
 800021c:	20000080 	.word	0x20000080

08000220 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */

  for(;;)
  {
	i_task01++;
 8000228:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <StartTask01+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <StartTask01+0x28>)
 8000230:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000232:	2120      	movs	r1, #32
 8000234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000238:	f000 fabe 	bl	80007b8 <HAL_GPIO_TogglePin>
	osDelay(1000);
 800023c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000240:	f002 f92e 	bl	80024a0 <osDelay>
	i_task01++;
 8000244:	bf00      	nop
 8000246:	e7ef      	b.n	8000228 <StartTask01+0x8>
 8000248:	20000084 	.word	0x20000084

0800024c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	i_task02++;
 8000254:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <StartTask02+0x28>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a06      	ldr	r2, [pc, #24]	@ (8000274 <StartTask02+0x28>)
 800025c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800025e:	2120      	movs	r1, #32
 8000260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000264:	f000 faa8 	bl	80007b8 <HAL_GPIO_TogglePin>
	osDelay(3000);
 8000268:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800026c:	f002 f918 	bl	80024a0 <osDelay>
	i_task02++;
 8000270:	bf00      	nop
 8000272:	e7ef      	b.n	8000254 <StartTask02+0x8>
 8000274:	20000088 	.word	0x20000088

08000278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <MX_GPIO_Init+0x2c>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a08      	ldr	r2, [pc, #32]	@ (80002a4 <MX_GPIO_Init+0x2c>)
 8000284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <MX_GPIO_Init+0x2c>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 f96c 	bl	8000588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f80a 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f7ff ffe0 	bl	8000278 <MX_GPIO_Init>
//  int i_compteur = 0;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002b8:	f001 ffe0 	bl	800227c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80002bc:	f7ff ff90 	bl	80001e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002c0:	f002 f810 	bl	80022e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x1c>

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	@ 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fd98 	bl	8004e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fa74 	bl	80007ec <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030a:	f000 f82b 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fab4 	bl	8001894 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000332:	f000 f817 	bl	8000364 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	@ 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d101      	bne.n	8000356 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000352:	f000 f92f 	bl	80005b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40001000 	.word	0x40001000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <Error_Handler+0x8>

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <HAL_MspInit+0x4c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a10      	ldr	r2, [pc, #64]	@ (80003bc <HAL_MspInit+0x4c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <HAL_MspInit+0x4c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <HAL_MspInit+0x4c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <HAL_MspInit+0x4c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <HAL_MspInit+0x4c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	210f      	movs	r1, #15
 80003aa:	f06f 0001 	mvn.w	r0, #1
 80003ae:	f000 f9d9 	bl	8000764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08e      	sub	sp, #56	@ 0x38
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003d0:	4b33      	ldr	r3, [pc, #204]	@ (80004a0 <HAL_InitTick+0xe0>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <HAL_InitTick+0xe0>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	61d3      	str	r3, [r2, #28]
 80003dc:	4b30      	ldr	r3, [pc, #192]	@ (80004a0 <HAL_InitTick+0xe0>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003e8:	f107 0210 	add.w	r2, r7, #16
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fc4c 	bl	8001c90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003f8:	6a3b      	ldr	r3, [r7, #32]
 80003fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000402:	f001 fc23 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8000406:	6378      	str	r0, [r7, #52]	@ 0x34
 8000408:	e004      	b.n	8000414 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800040a:	f001 fc1f 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 800040e:	4603      	mov	r3, r0
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000416:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <HAL_InitTick+0xe4>)
 8000418:	fba2 2303 	umull	r2, r3, r2, r3
 800041c:	0c9b      	lsrs	r3, r3, #18
 800041e:	3b01      	subs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000422:	4b21      	ldr	r3, [pc, #132]	@ (80004a8 <HAL_InitTick+0xe8>)
 8000424:	4a21      	ldr	r2, [pc, #132]	@ (80004ac <HAL_InitTick+0xec>)
 8000426:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000428:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <HAL_InitTick+0xe8>)
 800042a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800042e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000430:	4a1d      	ldr	r2, [pc, #116]	@ (80004a8 <HAL_InitTick+0xe8>)
 8000432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000434:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000436:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <HAL_InitTick+0xe8>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <HAL_InitTick+0xe8>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000442:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <HAL_InitTick+0xe8>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000448:	4817      	ldr	r0, [pc, #92]	@ (80004a8 <HAL_InitTick+0xe8>)
 800044a:	f001 fc53 	bl	8001cf4 <HAL_TIM_Base_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000458:	2b00      	cmp	r3, #0
 800045a:	d11b      	bne.n	8000494 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800045c:	4812      	ldr	r0, [pc, #72]	@ (80004a8 <HAL_InitTick+0xe8>)
 800045e:	f001 fcab 	bl	8001db8 <HAL_TIM_Base_Start_IT>
 8000462:	4603      	mov	r3, r0
 8000464:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000468:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800046c:	2b00      	cmp	r3, #0
 800046e:	d111      	bne.n	8000494 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000470:	2036      	movs	r0, #54	@ 0x36
 8000472:	f000 f993 	bl	800079c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	d808      	bhi.n	800048e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800047c:	2200      	movs	r2, #0
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	2036      	movs	r0, #54	@ 0x36
 8000482:	f000 f96f 	bl	8000764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <HAL_InitTick+0xf0>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	e002      	b.n	8000494 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800048e:	2301      	movs	r3, #1
 8000490:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000494:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000498:	4618      	mov	r0, r3
 800049a:	3738      	adds	r7, #56	@ 0x38
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	431bde83 	.word	0x431bde83
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40001000 	.word	0x40001000
 80004b0:	20000004 	.word	0x20000004

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <NMI_Handler+0x4>

080004bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <MemManage_Handler+0x4>

080004cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <BusFault_Handler+0x4>

080004d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <UsageFault_Handler+0x4>

080004dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <TIM6_DAC_IRQHandler+0x10>)
 80004f2:	f001 fcd1 	bl	8001e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000008c 	.word	0x2000008c

08000500 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000504:	f000 f856 	bl	80005b4 <HAL_IncTick>
  xPortSysTickHandler();
 8000508:	f004 fa0e 	bl	8004928 <xPortSysTickHandler>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <SystemInit+0x20>)
 8000516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800051a:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <SystemInit+0x20>)
 800051c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800056c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000538:	f7ff ffea 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	@ (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	@ (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000562:	f004 fcb1 	bl	8004ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000566:	f7ff fe9f 	bl	80002a8 <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800056c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000578:	080050ac 	.word	0x080050ac
  ldr r2, =_sbss
 800057c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000580:	20004e7c 	.word	0x20004e7c

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x28>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x28>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f8d8 	bl	800074e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f7ff ff0e 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f7ff fee4 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008
 80005d8:	200000d8 	.word	0x200000d8

080005dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;  
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000d8 	.word	0x200000d8

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	@ (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	@ (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	@ (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff4c 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000776:	f7ff ff61 	bl	800063c <__NVIC_GetPriorityGrouping>
 800077a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f7ff ffb1 	bl	80006e8 <NVIC_EncodePriority>
 8000786:	4602      	mov	r2, r0
 8000788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff80 	bl	8000694 <__NVIC_SetPriority>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff54 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80007ca:	887a      	ldrh	r2, [r7, #2]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4013      	ands	r3, r2
 80007d0:	041a      	lsls	r2, r3, #16
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	43d9      	mvns	r1, r3
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	400b      	ands	r3, r1
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	619a      	str	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80007f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80007fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000802:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	f001 b83a 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 816f 	beq.w	8000b06 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000828:	4bb5      	ldr	r3, [pc, #724]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 030c 	and.w	r3, r3, #12
 8000830:	2b04      	cmp	r3, #4
 8000832:	d00c      	beq.n	800084e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000834:	4bb2      	ldr	r3, [pc, #712]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b08      	cmp	r3, #8
 800083e:	d15c      	bne.n	80008fa <HAL_RCC_OscConfig+0x10e>
 8000840:	4baf      	ldr	r3, [pc, #700]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800084c:	d155      	bne.n	80008fa <HAL_RCC_OscConfig+0x10e>
 800084e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000852:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000856:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800085a:	fa93 f3a3 	rbit	r3, r3
 800085e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000862:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000866:	fab3 f383 	clz	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	095b      	lsrs	r3, r3, #5
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b01      	cmp	r3, #1
 8000878:	d102      	bne.n	8000880 <HAL_RCC_OscConfig+0x94>
 800087a:	4ba1      	ldr	r3, [pc, #644]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	e015      	b.n	80008ac <HAL_RCC_OscConfig+0xc0>
 8000880:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000884:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000888:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800088c:	fa93 f3a3 	rbit	r3, r3
 8000890:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000894:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000898:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800089c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80008a0:	fa93 f3a3 	rbit	r3, r3
 80008a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80008a8:	4b95      	ldr	r3, [pc, #596]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 80008aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008b0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80008b4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80008b8:	fa92 f2a2 	rbit	r2, r2
 80008bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80008c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	f042 0220 	orr.w	r2, r2, #32
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	f002 021f 	and.w	r2, r2, #31
 80008d4:	2101      	movs	r1, #1
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	4013      	ands	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 8111 	beq.w	8000b04 <HAL_RCC_OscConfig+0x318>
 80008e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8108 	bne.w	8000b04 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f000 bfc6 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800090a:	d106      	bne.n	800091a <HAL_RCC_OscConfig+0x12e>
 800090c:	4b7c      	ldr	r3, [pc, #496]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a7b      	ldr	r2, [pc, #492]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e036      	b.n	8000988 <HAL_RCC_OscConfig+0x19c>
 800091a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800091e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10c      	bne.n	8000944 <HAL_RCC_OscConfig+0x158>
 800092a:	4b75      	ldr	r3, [pc, #468]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a74      	ldr	r2, [pc, #464]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	4b72      	ldr	r3, [pc, #456]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a71      	ldr	r2, [pc, #452]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800093c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	e021      	b.n	8000988 <HAL_RCC_OscConfig+0x19c>
 8000944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000948:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000954:	d10c      	bne.n	8000970 <HAL_RCC_OscConfig+0x184>
 8000956:	4b6a      	ldr	r3, [pc, #424]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a69      	ldr	r2, [pc, #420]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800095c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	4b67      	ldr	r3, [pc, #412]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a66      	ldr	r2, [pc, #408]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e00b      	b.n	8000988 <HAL_RCC_OscConfig+0x19c>
 8000970:	4b63      	ldr	r3, [pc, #396]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a62      	ldr	r2, [pc, #392]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b60      	ldr	r3, [pc, #384]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a5f      	ldr	r2, [pc, #380]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000986:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800098c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d059      	beq.n	8000a4c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000998:	f7ff fe20 	bl	80005dc <HAL_GetTick>
 800099c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a0:	e00a      	b.n	80009b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a2:	f7ff fe1b 	bl	80005dc <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b64      	cmp	r3, #100	@ 0x64
 80009b0:	d902      	bls.n	80009b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80009b2:	2303      	movs	r3, #3
 80009b4:	f000 bf67 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 80009b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009bc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80009cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d0:	fab3 f383 	clz	r3, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d102      	bne.n	80009ea <HAL_RCC_OscConfig+0x1fe>
 80009e4:	4b46      	ldr	r3, [pc, #280]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	e015      	b.n	8000a16 <HAL_RCC_OscConfig+0x22a>
 80009ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80009f6:	fa93 f3a3 	rbit	r3, r3
 80009fa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80009fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a02:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000a06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000a0a:	fa93 f3a3 	rbit	r3, r3
 8000a0e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a1a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000a1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000a22:	fa92 f2a2 	rbit	r2, r2
 8000a26:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000a2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	f042 0220 	orr.w	r2, r2, #32
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	f002 021f 	and.w	r2, r2, #31
 8000a3e:	2101      	movs	r1, #1
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0ab      	beq.n	80009a2 <HAL_RCC_OscConfig+0x1b6>
 8000a4a:	e05c      	b.n	8000b06 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fdc6 	bl	80005dc <HAL_GetTick>
 8000a50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a54:	e00a      	b.n	8000a6c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a56:	f7ff fdc1 	bl	80005dc <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b64      	cmp	r3, #100	@ 0x64
 8000a64:	d902      	bls.n	8000a6c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f000 bf0d 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 8000a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a70:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000a78:	fa93 f3a3 	rbit	r3, r3
 8000a7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000a80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a84:	fab3 f383 	clz	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d102      	bne.n	8000a9e <HAL_RCC_OscConfig+0x2b2>
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	e015      	b.n	8000aca <HAL_RCC_OscConfig+0x2de>
 8000a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000aa2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000aaa:	fa93 f3a3 	rbit	r3, r3
 8000aae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ab6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000aba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000abe:	fa93 f3a3 	rbit	r3, r3
 8000ac2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ace:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000ad2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000ad6:	fa92 f2a2 	rbit	r2, r2
 8000ada:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000ade:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	f042 0220 	orr.w	r2, r2, #32
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f002 021f 	and.w	r2, r2, #31
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1ab      	bne.n	8000a56 <HAL_RCC_OscConfig+0x26a>
 8000afe:	e002      	b.n	8000b06 <HAL_RCC_OscConfig+0x31a>
 8000b00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 817f 	beq.w	8000e1a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b1c:	4ba7      	ldr	r3, [pc, #668]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 030c 	and.w	r3, r3, #12
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00c      	beq.n	8000b42 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b28:	4ba4      	ldr	r3, [pc, #656]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d173      	bne.n	8000c1c <HAL_RCC_OscConfig+0x430>
 8000b34:	4ba1      	ldr	r3, [pc, #644]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b40:	d16c      	bne.n	8000c1c <HAL_RCC_OscConfig+0x430>
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b48:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000b54:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <HAL_RCC_OscConfig+0x386>
 8000b6c:	4b93      	ldr	r3, [pc, #588]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	e013      	b.n	8000b9a <HAL_RCC_OscConfig+0x3ae>
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b78:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000b8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000b96:	4b89      	ldr	r3, [pc, #548]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000ba0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000ba4:	fa92 f2a2 	rbit	r2, r2
 8000ba8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000bac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	f042 0220 	orr.w	r2, r2, #32
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	f002 021f 	and.w	r2, r2, #31
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3f6>
 8000bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d002      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f000 be52 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be2:	4b76      	ldr	r3, [pc, #472]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	21f8      	movs	r1, #248	@ 0xf8
 8000bf8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000c00:	fa91 f1a1 	rbit	r1, r1
 8000c04:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000c08:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000c0c:	fab1 f181 	clz	r1, r1
 8000c10:	b2c9      	uxtb	r1, r1
 8000c12:	408b      	lsls	r3, r1
 8000c14:	4969      	ldr	r1, [pc, #420]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1a:	e0fe      	b.n	8000e1a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 8088 	beq.w	8000d3e <HAL_RCC_OscConfig+0x552>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000c40:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000c4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	461a      	mov	r2, r3
 8000c56:	2301      	movs	r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fcbf 	bl	80005dc <HAL_GetTick>
 8000c5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c62:	e00a      	b.n	8000c7a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fcba 	bl	80005dc <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d902      	bls.n	8000c7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f000 be06 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c80:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000c8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	fab3 f383 	clz	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d102      	bne.n	8000caa <HAL_RCC_OscConfig+0x4be>
 8000ca4:	4b45      	ldr	r3, [pc, #276]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	e013      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4e6>
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000cc2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000cc6:	fa93 f3a3 	rbit	r3, r3
 8000cca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000cce:	4b3b      	ldr	r3, [pc, #236]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000cd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000cdc:	fa92 f2a2 	rbit	r2, r2
 8000ce0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000ce4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	f042 0220 	orr.w	r2, r2, #32
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	f002 021f 	and.w	r2, r2, #31
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0af      	beq.n	8000c64 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d04:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	21f8      	movs	r1, #248	@ 0xf8
 8000d1a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8000d22:	fa91 f1a1 	rbit	r1, r1
 8000d26:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8000d2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000d2e:	fab1 f181 	clz	r1, r1
 8000d32:	b2c9      	uxtb	r1, r1
 8000d34:	408b      	lsls	r3, r1
 8000d36:	4921      	ldr	r1, [pc, #132]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e06d      	b.n	8000e1a <HAL_RCC_OscConfig+0x62e>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8000d50:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000d5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	461a      	mov	r2, r3
 8000d66:	2300      	movs	r3, #0
 8000d68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fc37 	bl	80005dc <HAL_GetTick>
 8000d6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e00a      	b.n	8000d8a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fc32 	bl	80005dc <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d902      	bls.n	8000d8a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f000 bd7e 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8000d9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x5d4>
 8000db4:	4b01      	ldr	r3, [pc, #4]	@ (8000dbc <HAL_RCC_OscConfig+0x5d0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	e016      	b.n	8000de8 <HAL_RCC_OscConfig+0x5fc>
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000dd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000de4:	4bbf      	ldr	r3, [pc, #764]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de8:	2202      	movs	r2, #2
 8000dea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000dee:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000df2:	fa92 f2a2 	rbit	r2, r2
 8000df6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8000dfa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f042 0220 	orr.w	r2, r2, #32
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	f002 021f 	and.w	r2, r2, #31
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1ac      	bne.n	8000d74 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8113 	beq.w	8001056 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d07c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x74e>
 8000e40:	2301      	movs	r3, #1
 8000e42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8000e52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80010e8 <HAL_RCC_OscConfig+0x8fc>)
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	461a      	mov	r2, r3
 8000e66:	2301      	movs	r3, #1
 8000e68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fbb7 	bl	80005dc <HAL_GetTick>
 8000e6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	e00a      	b.n	8000e8a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e74:	f7ff fbb2 	bl	80005dc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d902      	bls.n	8000e8a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f000 bcfe 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e94:	fa93 f2a3 	rbit	r2, r3
 8000e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000eaa:	2202      	movs	r2, #2
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	fa93 f2a3 	rbit	r2, r3
 8000ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ece:	2202      	movs	r2, #2
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ed6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	fa93 f2a3 	rbit	r2, r3
 8000ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ee4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ee8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	4b7e      	ldr	r3, [pc, #504]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 8000eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	6019      	str	r1, [r3, #0]
 8000efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000efe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	fa93 f1a3 	rbit	r1, r3
 8000f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000f10:	6019      	str	r1, [r3, #0]
  return result;
 8000f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d09d      	beq.n	8000e74 <HAL_RCC_OscConfig+0x688>
 8000f38:	e08d      	b.n	8001056 <HAL_RCC_OscConfig+0x86a>
 8000f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	fa93 f2a3 	rbit	r2, r3
 8000f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f5c:	601a      	str	r2, [r3, #0]
  return result;
 8000f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f66:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b5d      	ldr	r3, [pc, #372]	@ (80010e8 <HAL_RCC_OscConfig+0x8fc>)
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fb2e 	bl	80005dc <HAL_GetTick>
 8000f80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb29 	bl	80005dc <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f000 bc75 	b.w	8001886 <HAL_RCC_OscConfig+0x109a>
 8000f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fa0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	fa93 f2a3 	rbit	r2, r3
 8000fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fc8:	2202      	movs	r2, #2
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	fa93 f2a3 	rbit	r2, r3
 8000fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fe8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fec:	2202      	movs	r2, #2
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ff4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	fa93 f2a3 	rbit	r2, r3
 8000ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001002:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001006:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 800100a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001010:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001014:	2102      	movs	r1, #2
 8001016:	6019      	str	r1, [r3, #0]
 8001018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800101c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	fa93 f1a3 	rbit	r1, r3
 8001026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800102a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800102e:	6019      	str	r1, [r3, #0]
  return result;
 8001030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001034:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d197      	bne.n	8000f86 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800105a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 81a5 	beq.w	80013b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a18      	ldr	r2, [pc, #96]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_RCC_OscConfig+0x8f8>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_RCC_OscConfig+0x900>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d121      	bne.n	80010fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <HAL_RCC_OscConfig+0x900>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_RCC_OscConfig+0x900>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fa8a 	bl	80005dc <HAL_GetTick>
 80010c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	e010      	b.n	80010f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fa85 	bl	80005dc <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	@ 0x64
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e3d1      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	10908120 	.word	0x10908120
 80010ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001328 <HAL_RCC_OscConfig+0xb3c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e8      	beq.n	80010ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001100:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_RCC_OscConfig+0x92e>
 800110c:	4b87      	ldr	r3, [pc, #540]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a86      	ldr	r2, [pc, #536]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6213      	str	r3, [r2, #32]
 8001118:	e035      	b.n	8001186 <HAL_RCC_OscConfig+0x99a>
 800111a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800111e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x958>
 800112a:	4b80      	ldr	r3, [pc, #512]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a7f      	ldr	r2, [pc, #508]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	4b7d      	ldr	r3, [pc, #500]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a7c      	ldr	r2, [pc, #496]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	e020      	b.n	8001186 <HAL_RCC_OscConfig+0x99a>
 8001144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001148:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d10c      	bne.n	800116e <HAL_RCC_OscConfig+0x982>
 8001154:	4b75      	ldr	r3, [pc, #468]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a74      	ldr	r2, [pc, #464]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	4b72      	ldr	r3, [pc, #456]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a71      	ldr	r2, [pc, #452]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6213      	str	r3, [r2, #32]
 800116c:	e00b      	b.n	8001186 <HAL_RCC_OscConfig+0x99a>
 800116e:	4b6f      	ldr	r3, [pc, #444]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a6e      	ldr	r2, [pc, #440]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b6c      	ldr	r3, [pc, #432]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a6b      	ldr	r2, [pc, #428]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001180:	f023 0304 	bic.w	r3, r3, #4
 8001184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800118a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8081 	beq.w	800129a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fa20 	bl	80005dc <HAL_GetTick>
 800119c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	e00b      	b.n	80011ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fa1b 	bl	80005dc <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e365      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 80011ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80011c2:	2202      	movs	r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80011e6:	2202      	movs	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001200:	601a      	str	r2, [r3, #0]
  return result;
 8001202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001206:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800120a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0xa3a>
 8001220:	4b42      	ldr	r3, [pc, #264]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	e013      	b.n	800124e <HAL_RCC_OscConfig+0xa62>
 8001226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800122a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001236:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fa93 f2a3 	rbit	r2, r3
 8001240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001244:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001252:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001256:	2102      	movs	r1, #2
 8001258:	6011      	str	r1, [r2, #0]
 800125a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800125e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	fa92 f1a2 	rbit	r1, r2
 8001268:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800126c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001270:	6011      	str	r1, [r2, #0]
  return result;
 8001272:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001276:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	fab2 f282 	clz	r2, r2
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f002 021f 	and.w	r2, r2, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d084      	beq.n	80011a2 <HAL_RCC_OscConfig+0x9b6>
 8001298:	e083      	b.n	80013a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff f99f 	bl	80005dc <HAL_GetTick>
 800129e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff f99a 	bl	80005dc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e2e4      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 80012bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fa93 f2a3 	rbit	r2, r3
 80012fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001302:	601a      	str	r2, [r3, #0]
  return result;
 8001304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001308:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800130c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0xb44>
 8001322:	4b02      	ldr	r3, [pc, #8]	@ (800132c <HAL_RCC_OscConfig+0xb40>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	e017      	b.n	8001358 <HAL_RCC_OscConfig+0xb6c>
 8001328:	40007000 	.word	0x40007000
 800132c:	40021000 	.word	0x40021000
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001340:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	4bb3      	ldr	r3, [pc, #716]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800135c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001360:	2102      	movs	r1, #2
 8001362:	6011      	str	r1, [r2, #0]
 8001364:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001368:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	fa92 f1a2 	rbit	r1, r2
 8001372:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001376:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800137a:	6011      	str	r1, [r2, #0]
  return result;
 800137c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001380:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	fab2 f282 	clz	r2, r2
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	f002 021f 	and.w	r2, r2, #31
 8001396:	2101      	movs	r1, #1
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d180      	bne.n	80012a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013a2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013aa:	4b9e      	ldr	r3, [pc, #632]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a9d      	ldr	r2, [pc, #628]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 825e 	beq.w	8001884 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b96      	ldr	r3, [pc, #600]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	f000 821f 	beq.w	8001814 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	f040 8170 	bne.w	80016c8 <HAL_RCC_OscConfig+0xedc>
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80013f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001408:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800140c:	601a      	str	r2, [r3, #0]
  return result;
 800140e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001412:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001416:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001422:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	461a      	mov	r2, r3
 800142a:	2300      	movs	r3, #0
 800142c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff f8d5 	bl	80005dc <HAL_GetTick>
 8001432:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	e009      	b.n	800144c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff f8d0 	bl	80005dc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e21c      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 800144c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001450:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001454:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fa93 f2a3 	rbit	r2, r3
 8001468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001470:	601a      	str	r2, [r3, #0]
  return result;
 8001472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001476:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800147a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0xcaa>
 8001490:	4b64      	ldr	r3, [pc, #400]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e027      	b.n	80014e6 <HAL_RCC_OscConfig+0xcfa>
 8001496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800149e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80014c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014dc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80014ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80014f2:	6011      	str	r1, [r2, #0]
 80014f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	fa92 f1a2 	rbit	r1, r2
 8001502:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001506:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800150a:	6011      	str	r1, [r2, #0]
  return result;
 800150c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001510:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d182      	bne.n	8001438 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001532:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	f023 020f 	bic.w	r2, r3, #15
 800153a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001546:	4937      	ldr	r1, [pc, #220]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 8001548:	4313      	orrs	r3, r2
 800154a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800154c:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001558:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a19      	ldr	r1, [r3, #32]
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	430b      	orrs	r3, r1
 800156e:	492d      	ldr	r1, [pc, #180]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001578:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800157c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001586:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001598:	601a      	str	r2, [r3, #0]
  return result;
 800159a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80015a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	461a      	mov	r2, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f80f 	bl	80005dc <HAL_GetTick>
 80015be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f80a 	bl	80005dc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e156      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 80015d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80015e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80015fc:	601a      	str	r2, [r3, #0]
  return result;
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001606:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0xe3c>
 800161c:	4b01      	ldr	r3, [pc, #4]	@ (8001624 <HAL_RCC_OscConfig+0xe38>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e02a      	b.n	8001678 <HAL_RCC_OscConfig+0xe8c>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001648:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001652:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001656:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	4b86      	ldr	r3, [pc, #536]	@ (8001890 <HAL_RCC_OscConfig+0x10a4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800167c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001680:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001684:	6011      	str	r1, [r2, #0]
 8001686:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800168a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	fa92 f1a2 	rbit	r1, r2
 8001694:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001698:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800169c:	6011      	str	r1, [r2, #0]
  return result;
 800169e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	fab2 f282 	clz	r2, r2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f43f af7f 	beq.w	80015c4 <HAL_RCC_OscConfig+0xdd8>
 80016c6:	e0dd      	b.n	8001884 <HAL_RCC_OscConfig+0x1098>
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80016d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80016ec:	601a      	str	r2, [r3, #0]
  return result;
 80016ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80016f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001702:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	461a      	mov	r2, r3
 800170a:	2300      	movs	r3, #0
 800170c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7fe ff65 	bl	80005dc <HAL_GetTick>
 8001712:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e009      	b.n	800172c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7fe ff60 	bl	80005dc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0ac      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
 800172c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001730:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001750:	601a      	str	r2, [r3, #0]
  return result;
 8001752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001756:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800175a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0xf8a>
 8001770:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_OscConfig+0x10a4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e027      	b.n	80017c6 <HAL_RCC_OscConfig+0xfda>
 8001776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800177e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001796:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80017a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <HAL_RCC_OscConfig+0x10a4>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80017ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80017d2:	6011      	str	r1, [r2, #0]
 80017d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	fa92 f1a2 	rbit	r1, r2
 80017e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80017ea:	6011      	str	r1, [r2, #0]
  return result;
 80017ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017f0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	fab2 f282 	clz	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f042 0220 	orr.w	r2, r2, #32
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f002 021f 	and.w	r2, r2, #31
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d182      	bne.n	8001718 <HAL_RCC_OscConfig+0xf2c>
 8001812:	e037      	b.n	8001884 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001818:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e02e      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_RCC_OscConfig+0x10a4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_RCC_OscConfig+0x10a4>)
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001838:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800183c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001844:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	d117      	bne.n	8001880 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001850:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001854:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001864:	429a      	cmp	r2, r3
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800186c:	f003 020f 	and.w	r2, r3, #15
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09e      	sub	sp, #120	@ 0x78
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e162      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b90      	ldr	r3, [pc, #576]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d910      	bls.n	80018dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b8d      	ldr	r3, [pc, #564]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	498b      	ldr	r1, [pc, #556]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e14a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	497f      	ldr	r1, [pc, #508]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80dc 	beq.w	8001ac0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d13c      	bne.n	800198a <HAL_RCC_ClockConfig+0xf6>
 8001910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001914:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800191e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_ClockConfig+0xa6>
 8001934:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e00f      	b.n	800195a <HAL_RCC_ClockConfig+0xc6>
 800193a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800193e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	667b      	str	r3, [r7, #100]	@ 0x64
 8001948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800194c:	663b      	str	r3, [r7, #96]	@ 0x60
 800194e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001956:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800195e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001962:	fa92 f2a2 	rbit	r2, r2
 8001966:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800196a:	fab2 f282 	clz	r2, r2
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f002 021f 	and.w	r2, r2, #31
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d17b      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0f3      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d13c      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x178>
 8001992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001996:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80019a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_ClockConfig+0x128>
 80019b6:	4b4f      	ldr	r3, [pc, #316]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_ClockConfig+0x148>
 80019bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80019d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019d8:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80019e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e4:	fa92 f2a2 	rbit	r2, r2
 80019e8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80019ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13a      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b2      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x1a0>
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e00d      	b.n	8001a50 <HAL_RCC_ClockConfig+0x1bc>
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	2202      	movs	r2, #2
 8001a52:	61ba      	str	r2, [r7, #24]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	617a      	str	r2, [r7, #20]
  return result;
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	fab2 f282 	clz	r2, r2
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f042 0220 	orr.w	r2, r2, #32
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f002 021f 	and.w	r2, r2, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e079      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	491a      	ldr	r1, [pc, #104]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7fe fda4 	bl	80005dc <HAL_GetTick>
 8001a94:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7fe fda0 	bl	80005dc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e061      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_ClockConfig+0x260>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d214      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_RCC_ClockConfig+0x25c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_ClockConfig+0x2de>
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HAL_RCC_ClockConfig+0x2e8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	491a      	ldr	r1, [pc, #104]	@ (8001b7c <HAL_RCC_ClockConfig+0x2e8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_RCC_ClockConfig+0x2e8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4912      	ldr	r1, [pc, #72]	@ (8001b7c <HAL_RCC_ClockConfig+0x2e8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b36:	f000 f829 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_RCC_ClockConfig+0x2e8>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b44:	22f0      	movs	r2, #240	@ 0xf0
 8001b46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	fa92 f2a2 	rbit	r2, r2
 8001b4e:	60fa      	str	r2, [r7, #12]
  return result;
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	40d3      	lsrs	r3, r2
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x2ec>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_RCC_ClockConfig+0x2f0>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b66:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_RCC_ClockConfig+0x2f4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fc28 	bl	80003c0 <HAL_InitTick>
  
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3778      	adds	r7, #120	@ 0x78
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	0800506c 	.word	0x0800506c
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x30>
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bba:	e029      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bbe:	613b      	str	r3, [r7, #16]
      break;
 8001bc0:	e029      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e007      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	693b      	ldr	r3, [r7, #16]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40021000 	.word	0x40021000
 8001c28:	007a1200 	.word	0x007a1200
 8001c2c:	08005084 	.word	0x08005084
 8001c30:	08005094 	.word	0x08005094

08001c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c52:	f7ff ffef 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c56:	4601      	mov	r1, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c60:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	603a      	str	r2, [r7, #0]
  return result;
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	40d3      	lsrs	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	0800507c 	.word	0x0800507c

08001c90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x60>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0207 	and.w	r2, r3, #7
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e049      	b.n	8001d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f841 	bl	8001da2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 f9da 	bl	80020ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d001      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e04f      	b.n	8001e70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01d      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfa:	d018      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_TIM_Base_Start_IT+0x76>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d115      	bne.n	8001e5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d015      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0xb4>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e46:	d011      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	e008      	b.n	8001e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e000      	b.n	8001e6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40013400 	.word	0x40013400
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40015000 	.word	0x40015000
 8001e94:	00010007 	.word	0x00010007

08001e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0202 	mvn.w	r2, #2
 8001ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8e4 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8d6 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8e7 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0204 	mvn.w	r2, #4
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8be 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8b0 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8c1 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d020      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0208 	mvn.w	r2, #8
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f898 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f88a 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f89b 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0210 	mvn.w	r2, #16
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f872 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f864 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f875 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0201 	mvn.w	r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe f99e 	bl	8000340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00c      	beq.n	8002028 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f916 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f90e 	bl	8002268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f834 	bl	80020d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8d6 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a48      	ldr	r2, [pc, #288]	@ (8002220 <TIM_Base_SetConfig+0x134>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a45      	ldr	r2, [pc, #276]	@ (8002224 <TIM_Base_SetConfig+0x138>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a44      	ldr	r2, [pc, #272]	@ (8002228 <TIM_Base_SetConfig+0x13c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a43      	ldr	r2, [pc, #268]	@ (800222c <TIM_Base_SetConfig+0x140>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a42      	ldr	r2, [pc, #264]	@ (8002230 <TIM_Base_SetConfig+0x144>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a37      	ldr	r2, [pc, #220]	@ (8002220 <TIM_Base_SetConfig+0x134>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01f      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214c:	d01b      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a34      	ldr	r2, [pc, #208]	@ (8002224 <TIM_Base_SetConfig+0x138>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d017      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a33      	ldr	r2, [pc, #204]	@ (8002228 <TIM_Base_SetConfig+0x13c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a32      	ldr	r2, [pc, #200]	@ (800222c <TIM_Base_SetConfig+0x140>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a32      	ldr	r2, [pc, #200]	@ (8002234 <TIM_Base_SetConfig+0x148>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <TIM_Base_SetConfig+0x14c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a30      	ldr	r2, [pc, #192]	@ (800223c <TIM_Base_SetConfig+0x150>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0x9a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <TIM_Base_SetConfig+0x144>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d108      	bne.n	8002198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800218c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <TIM_Base_SetConfig+0x134>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <TIM_Base_SetConfig+0x100>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <TIM_Base_SetConfig+0x140>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00f      	beq.n	80021ec <TIM_Base_SetConfig+0x100>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <TIM_Base_SetConfig+0x148>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_Base_SetConfig+0x100>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <TIM_Base_SetConfig+0x14c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <TIM_Base_SetConfig+0x100>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <TIM_Base_SetConfig+0x150>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0x100>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <TIM_Base_SetConfig+0x144>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
  }
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40013400 	.word	0x40013400
 8002230:	40015000 	.word	0x40015000
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002282:	f3ef 8305 	mrs	r3, IPSR
 8002286:	60bb      	str	r3, [r7, #8]
  return(result);
 8002288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228e:	f3ef 8310 	mrs	r3, PRIMASK
 8002292:	607b      	str	r3, [r7, #4]
  return(result);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <osKernelInitialize+0x32>
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <osKernelInitialize+0x64>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d109      	bne.n	80022b6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022a2:	f3ef 8311 	mrs	r3, BASEPRI
 80022a6:	603b      	str	r3, [r7, #0]
  return(result);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80022ae:	f06f 0305 	mvn.w	r3, #5
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e00c      	b.n	80022d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <osKernelInitialize+0x64>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <osKernelInitialize+0x64>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e002      	b.n	80022d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200000dc 	.word	0x200000dc

080022e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ea:	f3ef 8305 	mrs	r3, IPSR
 80022ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80022f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8310 	mrs	r3, PRIMASK
 80022fa:	607b      	str	r3, [r7, #4]
  return(result);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <osKernelStart+0x32>
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <osKernelStart+0x64>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d109      	bne.n	800231e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800230a:	f3ef 8311 	mrs	r3, BASEPRI
 800230e:	603b      	str	r3, [r7, #0]
  return(result);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002316:	f06f 0305 	mvn.w	r3, #5
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e00e      	b.n	800233c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <osKernelStart+0x64>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <osKernelStart+0x64>)
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800232c:	f001 f8b4 	bl	8003498 <vTaskStartScheduler>
      stat = osOK;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800233c:	68fb      	ldr	r3, [r7, #12]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200000dc 	.word	0x200000dc

0800234c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	@ 0x48
 8002350:	af04      	add	r7, sp, #16
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800235c:	f3ef 8305 	mrs	r3, IPSR
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8094 	bne.w	8002492 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236a:	f3ef 8310 	mrs	r3, PRIMASK
 800236e:	623b      	str	r3, [r7, #32]
  return(result);
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 808d 	bne.w	8002492 <osThreadNew+0x146>
 8002378:	4b48      	ldr	r3, [pc, #288]	@ (800249c <osThreadNew+0x150>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d106      	bne.n	800238e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002380:	f3ef 8311 	mrs	r3, BASEPRI
 8002384:	61fb      	str	r3, [r7, #28]
  return(result);
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8082 	bne.w	8002492 <osThreadNew+0x146>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d07e      	beq.n	8002492 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002398:	2318      	movs	r3, #24
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800239c:	2300      	movs	r3, #0
 800239e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023a0:	f107 031b 	add.w	r3, r7, #27
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d045      	beq.n	800243e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <osThreadNew+0x74>
        name = attr->name;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <osThreadNew+0x9a>
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d6:	2b38      	cmp	r3, #56	@ 0x38
 80023d8:	d805      	bhi.n	80023e6 <osThreadNew+0x9a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <osThreadNew+0x9e>
        return (NULL);
 80023e6:	2300      	movs	r3, #0
 80023e8:	e054      	b.n	8002494 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <osThreadNew+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2ba7      	cmp	r3, #167	@ 0xa7
 8002408:	d90a      	bls.n	8002420 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <osThreadNew+0xd4>
        mem = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241e:	e010      	b.n	8002442 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10c      	bne.n	8002442 <osThreadNew+0xf6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <osThreadNew+0xf6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <osThreadNew+0xf6>
          mem = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800243c:	e001      	b.n	8002442 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002444:	2b01      	cmp	r3, #1
 8002446:	d110      	bne.n	800246a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002450:	9202      	str	r2, [sp, #8]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800245c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fe2c 	bl	80030bc <xTaskCreateStatic>
 8002464:	4603      	mov	r3, r0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e013      	b.n	8002492 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800246a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d110      	bne.n	8002492 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	b29a      	uxth	r2, r3
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fe79 	bl	800317a <xTaskCreate>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <osThreadNew+0x146>
          hTask = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002492:	697b      	ldr	r3, [r7, #20]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3738      	adds	r7, #56	@ 0x38
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200000dc 	.word	0x200000dc

080024a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a8:	f3ef 8305 	mrs	r3, IPSR
 80024ac:	613b      	str	r3, [r7, #16]
  return(result);
 80024ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10f      	bne.n	80024d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b4:	f3ef 8310 	mrs	r3, PRIMASK
 80024b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <osDelay+0x34>
 80024c0:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <osDelay+0x58>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d109      	bne.n	80024dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024c8:	f3ef 8311 	mrs	r3, BASEPRI
 80024cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <osDelay+0x3c>
    stat = osErrorISR;
 80024d4:	f06f 0305 	mvn.w	r3, #5
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e007      	b.n	80024ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 ffa0 	bl	800342c <vTaskDelay>
    }
  }

  return (stat);
 80024ec:	697b      	ldr	r3, [r7, #20]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200000dc 	.word	0x200000dc

080024fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <vApplicationGetIdleTaskMemory+0x2c>)
 800250c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <vApplicationGetIdleTaskMemory+0x30>)
 8002512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200000e0 	.word	0x200000e0
 800252c:	20000188 	.word	0x20000188

08002530 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a07      	ldr	r2, [pc, #28]	@ (800255c <vApplicationGetTimerTaskMemory+0x2c>)
 8002540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <vApplicationGetTimerTaskMemory+0x30>)
 8002546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	20000388 	.word	0x20000388
 8002560:	20000430 	.word	0x20000430

08002564 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0208 	add.w	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 0208 	add.w	r2, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0208 	add.w	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d103      	bne.n	8002626 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e00c      	b.n	8002640 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3308      	adds	r3, #8
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e002      	b.n	8002634 <vListInsert+0x2e>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d2f6      	bcs.n	800262e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6852      	ldr	r2, [r2, #4]
 8002698:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d103      	bne.n	80026ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026f8:	f002 f886 	bl	8004808 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	441a      	add	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	3b01      	subs	r3, #1
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	441a      	add	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	22ff      	movs	r2, #255	@ 0xff
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	22ff      	movs	r2, #255	@ 0xff
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d114      	bne.n	8002778 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01a      	beq.n	800278c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3310      	adds	r3, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f940 	bl	80039e0 <xTaskRemoveFromEventList>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002766:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <xQueueGenericReset+0xd0>)
 8002768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	e009      	b.n	800278c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3310      	adds	r3, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fef1 	bl	8002564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3324      	adds	r3, #36	@ 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff feec 	bl	8002564 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800278c:	f002 f86e 	bl	800486c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08e      	sub	sp, #56	@ 0x38
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	e7fd      	b.n	80027e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <xQueueGenericCreateStatic+0x56>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <xQueueGenericCreateStatic+0x5a>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueGenericCreateStatic+0x5c>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	623b      	str	r3, [r7, #32]
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <xQueueGenericCreateStatic+0x84>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <xQueueGenericCreateStatic+0x88>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <xQueueGenericCreateStatic+0x8a>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	61fb      	str	r3, [r7, #28]
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	e7fd      	b.n	8002842 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002846:	2350      	movs	r3, #80	@ 0x50
 8002848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b50      	cmp	r3, #80	@ 0x50
 800284e:	d00b      	beq.n	8002868 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61bb      	str	r3, [r7, #24]
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800287a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f805 	bl	8002898 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002890:	4618      	mov	r0, r3
 8002892:	3730      	adds	r7, #48	@ 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e002      	b.n	80028ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028c6:	2101      	movs	r1, #1
 80028c8:	69b8      	ldr	r0, [r7, #24]
 80028ca:	f7ff feff 	bl	80026cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	@ 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <xQueueGenericSend+0x34>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0x42>
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <xQueueGenericSend+0x46>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <xQueueGenericSend+0x48>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <xQueueGenericSend+0x64>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d103      	bne.n	8002952 <xQueueGenericSend+0x72>
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <xQueueGenericSend+0x76>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericSend+0x78>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <xQueueGenericSend+0x94>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	623b      	str	r3, [r7, #32]
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002974:	f001 fa10 	bl	8003d98 <xTaskGetSchedulerState>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <xQueueGenericSend+0xa4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <xQueueGenericSend+0xa8>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <xQueueGenericSend+0xaa>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	61fb      	str	r3, [r7, #28]
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	e7fd      	b.n	80029a2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029a6:	f001 ff2f 	bl	8004808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <xQueueGenericSend+0xdc>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d129      	bne.n	8002a10 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029c2:	f000 fa0d 	bl	8002de0 <prvCopyDataToQueue>
 80029c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d2:	3324      	adds	r3, #36	@ 0x24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f803 	bl	80039e0 <xTaskRemoveFromEventList>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029e0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae0 <xQueueGenericSend+0x200>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	e00a      	b.n	8002a08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029f8:	4b39      	ldr	r3, [pc, #228]	@ (8002ae0 <xQueueGenericSend+0x200>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a08:	f001 ff30 	bl	800486c <vPortExitCritical>
				return pdPASS;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e063      	b.n	8002ad8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a16:	f001 ff29 	bl	800486c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e05c      	b.n	8002ad8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 f83d 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a32:	f001 ff1b 	bl	800486c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a36:	f000 fd9f 	bl	8003578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a3a:	f001 fee5 	bl	8004808 <vPortEnterCritical>
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d103      	bne.n	8002a54 <xQueueGenericSend+0x174>
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d103      	bne.n	8002a6a <xQueueGenericSend+0x18a>
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a6a:	f001 feff 	bl	800486c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a6e:	1d3a      	adds	r2, r7, #4
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f82c 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d124      	bne.n	8002acc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a84:	f000 faa4 	bl	8002fd0 <prvIsQueueFull>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	3310      	adds	r3, #16
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 ff50 	bl	800393c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a9e:	f000 fa2f 	bl	8002f00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aa2:	f000 fd77 	bl	8003594 <xTaskResumeAll>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f af7c 	bne.w	80029a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <xQueueGenericSend+0x200>)
 8002ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	e772      	b.n	80029a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ac2:	f000 fa1d 	bl	8002f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ac6:	f000 fd65 	bl	8003594 <xTaskResumeAll>
 8002aca:	e76c      	b.n	80029a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ace:	f000 fa17 	bl	8002f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ad2:	f000 fd5f 	bl	8003594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ad6:	2300      	movs	r3, #0
		}
	}
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3738      	adds	r7, #56	@ 0x38
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08e      	sub	sp, #56	@ 0x38
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <xQueueGenericSendFromISR+0x3e>
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xQueueGenericSendFromISR+0x42>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueGenericSendFromISR+0x44>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	623b      	str	r3, [r7, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d103      	bne.n	8002b52 <xQueueGenericSendFromISR+0x6e>
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <xQueueGenericSendFromISR+0x72>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <xQueueGenericSendFromISR+0x74>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	61fb      	str	r3, [r7, #28]
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b74:	f001 ff28 	bl	80049c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b78:	f3ef 8211 	mrs	r2, BASEPRI
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61ba      	str	r2, [r7, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <xQueueGenericSendFromISR+0xc2>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d12c      	bne.n	8002c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bb6:	f000 f913 	bl	8002de0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d112      	bne.n	8002bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	3324      	adds	r3, #36	@ 0x24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 ff05 	bl	80039e0 <xTaskRemoveFromEventList>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e007      	b.n	8002bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002bfe:	e001      	b.n	8002c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c06:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3738      	adds	r7, #56	@ 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	@ 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xQueueReceive+0x32>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	623b      	str	r3, [r7, #32]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <xQueueReceive+0x40>
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <xQueueReceive+0x44>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <xQueueReceive+0x46>
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <xQueueReceive+0x62>
	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	61fb      	str	r3, [r7, #28]
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	e7fd      	b.n	8002c7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c7e:	f001 f88b 	bl	8003d98 <xTaskGetSchedulerState>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <xQueueReceive+0x72>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <xQueueReceive+0x76>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueReceive+0x78>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <xQueueReceive+0x94>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	61bb      	str	r3, [r7, #24]
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cb0:	f001 fdaa 	bl	8004808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01f      	beq.n	8002d00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc4:	f000 f8f6 	bl	8002eb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	3310      	adds	r3, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fe7f 	bl	80039e0 <xTaskRemoveFromEventList>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <xQueueReceive+0x1c0>)
 8002cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cf8:	f001 fdb8 	bl	800486c <vPortExitCritical>
				return pdPASS;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e069      	b.n	8002dd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d06:	f001 fdb1 	bl	800486c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e062      	b.n	8002dd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fec5 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d22:	f001 fda3 	bl	800486c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d26:	f000 fc27 	bl	8003578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d2a:	f001 fd6d 	bl	8004808 <vPortEnterCritical>
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <xQueueReceive+0x128>
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d103      	bne.n	8002d5a <xQueueReceive+0x13e>
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d5a:	f001 fd87 	bl	800486c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d5e:	1d3a      	adds	r2, r7, #4
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 feb4 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d123      	bne.n	8002dba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d74:	f000 f916 	bl	8002fa4 <prvIsQueueEmpty>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d80:	3324      	adds	r3, #36	@ 0x24
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fdd8 	bl	800393c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d8e:	f000 f8b7 	bl	8002f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d92:	f000 fbff 	bl	8003594 <xTaskResumeAll>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d189      	bne.n	8002cb0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <xQueueReceive+0x1c0>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	e780      	b.n	8002cb0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002db0:	f000 f8a6 	bl	8002f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002db4:	f000 fbee 	bl	8003594 <xTaskResumeAll>
 8002db8:	e77a      	b.n	8002cb0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dbc:	f000 f8a0 	bl	8002f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dc0:	f000 fbe8 	bl	8003594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dc6:	f000 f8ed 	bl	8002fa4 <prvIsQueueEmpty>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f43f af6f 	beq.w	8002cb0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3730      	adds	r7, #48	@ 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d14d      	bne.n	8002ea2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ffe2 	bl	8003dd4 <xTaskPriorityDisinherit>
 8002e10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	e043      	b.n	8002ea2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d119      	bne.n	8002e54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6898      	ldr	r0, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	f002 f872 	bl	8004f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d32b      	bcc.n	8002ea2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	e026      	b.n	8002ea2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68d8      	ldr	r0, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	f002 f858 	bl	8004f14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d207      	bcs.n	8002e90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	425b      	negs	r3, r3
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d105      	bne.n	8002ea2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002eaa:	697b      	ldr	r3, [r7, #20]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	441a      	add	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d303      	bcc.n	8002ee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	f002 f80e 	bl	8004f14 <memcpy>
	}
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f08:	f001 fc7e 	bl	8004808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f14:	e011      	b.n	8002f3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3324      	adds	r3, #36	@ 0x24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fd5c 	bl	80039e0 <xTaskRemoveFromEventList>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f2e:	f000 fe45 	bl	8003bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	dce9      	bgt.n	8002f16 <prvUnlockQueue+0x16>
 8002f42:	e000      	b.n	8002f46 <prvUnlockQueue+0x46>
					break;
 8002f44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	22ff      	movs	r2, #255	@ 0xff
 8002f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f4e:	f001 fc8d 	bl	800486c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f52:	f001 fc59 	bl	8004808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f5e:	e011      	b.n	8002f84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3310      	adds	r3, #16
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fd37 	bl	80039e0 <xTaskRemoveFromEventList>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f78:	f000 fe20 	bl	8003bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dce9      	bgt.n	8002f60 <prvUnlockQueue+0x60>
 8002f8c:	e000      	b.n	8002f90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	22ff      	movs	r2, #255	@ 0xff
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f98:	f001 fc68 	bl	800486c <vPortExitCritical>
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fac:	f001 fc2c 	bl	8004808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fc53 	bl	800486c <vPortExitCritical>

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd8:	f001 fc16 	bl	8004808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d102      	bne.n	8002fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e001      	b.n	8002ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ff2:	f001 fc3b 	bl	800486c <vPortExitCritical>

	return xReturn;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e014      	b.n	800303a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003010:	4a0f      	ldr	r2, [pc, #60]	@ (8003050 <vQueueAddToRegistry+0x50>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800301c:	490c      	ldr	r1, [pc, #48]	@ (8003050 <vQueueAddToRegistry+0x50>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <vQueueAddToRegistry+0x50>)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003032:	e006      	b.n	8003042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b07      	cmp	r3, #7
 800303e:	d9e7      	bls.n	8003010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000830 	.word	0x20000830

08003054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003064:	f001 fbd0 	bl	8004808 <vPortEnterCritical>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800306e:	b25b      	sxtb	r3, r3
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d103      	bne.n	800307e <vQueueWaitForMessageRestricted+0x2a>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003084:	b25b      	sxtb	r3, r3
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d103      	bne.n	8003094 <vQueueWaitForMessageRestricted+0x40>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003094:	f001 fbea 	bl	800486c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3324      	adds	r3, #36	@ 0x24
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fc6d 	bl	8003988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff26 	bl	8002f00 <prvUnlockQueue>
	}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	@ 0x38
 80030c0:	af04      	add	r7, sp, #16
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	623b      	str	r3, [r7, #32]
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <xTaskCreateStatic+0x4a>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	61fb      	str	r3, [r7, #28]
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003106:	23a8      	movs	r3, #168	@ 0xa8
 8003108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2ba8      	cmp	r3, #168	@ 0xa8
 800310e:	d00b      	beq.n	8003128 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61bb      	str	r3, [r7, #24]
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01e      	beq.n	800316c <xTaskCreateStatic+0xb0>
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	2202      	movs	r2, #2
 8003142:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003146:	2300      	movs	r3, #0
 8003148:	9303      	str	r3, [sp, #12]
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f850 	bl	8003204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003166:	f000 f8f1 	bl	800334c <prvAddNewTaskToReadyList>
 800316a:	e001      	b.n	8003170 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003170:	697b      	ldr	r3, [r7, #20]
	}
 8003172:	4618      	mov	r0, r3
 8003174:	3728      	adds	r7, #40	@ 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800317a:	b580      	push	{r7, lr}
 800317c:	b08c      	sub	sp, #48	@ 0x30
 800317e:	af04      	add	r7, sp, #16
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fc5c 	bl	8004a4c <pvPortMalloc>
 8003194:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800319c:	20a8      	movs	r0, #168	@ 0xa8
 800319e:	f001 fc55 	bl	8004a4c <pvPortMalloc>
 80031a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80031b0:	e005      	b.n	80031be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f001 fd12 	bl	8004bdc <vPortFree>
 80031b8:	e001      	b.n	80031be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9303      	str	r3, [sp, #12]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	9302      	str	r3, [sp, #8]
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f80e 	bl	8003204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031e8:	69f8      	ldr	r0, [r7, #28]
 80031ea:	f000 f8af 	bl	800334c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	e002      	b.n	80031fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031fa:	69bb      	ldr	r3, [r7, #24]
	}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	461a      	mov	r2, r3
 800321c:	21a5      	movs	r1, #165	@ 0xa5
 800321e:	f001 fdf5 	bl	8004e0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800322c:	3b01      	subs	r3, #1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f023 0307 	bic.w	r3, r3, #7
 800323a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	617b      	str	r3, [r7, #20]
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e012      	b.n	800328a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	7819      	ldrb	r1, [r3, #0]
 800326c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	3334      	adds	r3, #52	@ 0x34
 8003274:	460a      	mov	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d9e9      	bls.n	8003264 <prvInitialiseNewTask+0x60>
 8003290:	e000      	b.n	8003294 <prvInitialiseNewTask+0x90>
		{
			break;
 8003292:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	2b37      	cmp	r3, #55	@ 0x37
 80032a0:	d901      	bls.n	80032a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032a2:	2337      	movs	r3, #55	@ 0x37
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	2200      	movs	r2, #0
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f971 	bl	80025a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	3318      	adds	r3, #24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f96c 	bl	80025a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	3354      	adds	r3, #84	@ 0x54
 80032f6:	224c      	movs	r2, #76	@ 0x4c
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fd86 	bl	8004e0c <memset>
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	4a0f      	ldr	r2, [pc, #60]	@ (8003340 <prvInitialiseNewTask+0x13c>)
 8003304:	659a      	str	r2, [r3, #88]	@ 0x58
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	4a0e      	ldr	r2, [pc, #56]	@ (8003344 <prvInitialiseNewTask+0x140>)
 800330a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	4a0e      	ldr	r2, [pc, #56]	@ (8003348 <prvInitialiseNewTask+0x144>)
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	2200      	movs	r2, #0
 8003316:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	69b8      	ldr	r0, [r7, #24]
 8003320:	f001 f942 	bl	80045a8 <pxPortInitialiseStack>
 8003324:	4602      	mov	r2, r0
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800332a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <prvInitialiseNewTask+0x132>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003336:	bf00      	nop
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20004d3c 	.word	0x20004d3c
 8003344:	20004da4 	.word	0x20004da4
 8003348:	20004e0c 	.word	0x20004e0c

0800334c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003354:	f001 fa58 	bl	8004808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <prvAddNewTaskToReadyList+0xc4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a2c      	ldr	r2, [pc, #176]	@ (8003410 <prvAddNewTaskToReadyList+0xc4>)
 8003360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003362:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800336a:	4a2a      	ldr	r2, [pc, #168]	@ (8003414 <prvAddNewTaskToReadyList+0xc8>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003370:	4b27      	ldr	r3, [pc, #156]	@ (8003410 <prvAddNewTaskToReadyList+0xc4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d110      	bne.n	800339a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003378:	f000 fc44 	bl	8003c04 <prvInitialiseTaskLists>
 800337c:	e00d      	b.n	800339a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <prvAddNewTaskToReadyList+0xcc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d802      	bhi.n	800339a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003394:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800339a:	4b20      	ldr	r3, [pc, #128]	@ (800341c <prvAddNewTaskToReadyList+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a1e      	ldr	r2, [pc, #120]	@ (800341c <prvAddNewTaskToReadyList+0xd0>)
 80033a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	@ (800341c <prvAddNewTaskToReadyList+0xd0>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <prvAddNewTaskToReadyList+0xd4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d903      	bls.n	80033c0 <prvAddNewTaskToReadyList+0x74>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <prvAddNewTaskToReadyList+0xd4>)
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <prvAddNewTaskToReadyList+0xd8>)
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7ff f8f1 	bl	80025be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033dc:	f001 fa46 	bl	800486c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <prvAddNewTaskToReadyList+0xcc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <prvAddNewTaskToReadyList+0xc8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d207      	bcs.n	8003406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <prvAddNewTaskToReadyList+0xdc>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000d44 	.word	0x20000d44
 8003414:	20000870 	.word	0x20000870
 8003418:	20000d50 	.word	0x20000d50
 800341c:	20000d60 	.word	0x20000d60
 8003420:	20000d4c 	.word	0x20000d4c
 8003424:	20000874 	.word	0x20000874
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d018      	beq.n	8003470 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <vTaskDelay+0x64>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <vTaskDelay+0x32>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60bb      	str	r3, [r7, #8]
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	e7fd      	b.n	800345a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800345e:	f000 f88b 	bl	8003578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003462:	2100      	movs	r1, #0
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fd25 	bl	8003eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800346a:	f000 f893 	bl	8003594 <xTaskResumeAll>
 800346e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <vTaskDelay+0x68>)
 8003478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000d6c 	.word	0x20000d6c
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034a6:	463a      	mov	r2, r7
 80034a8:	1d39      	adds	r1, r7, #4
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f824 	bl	80024fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	9202      	str	r2, [sp, #8]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2300      	movs	r3, #0
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	460a      	mov	r2, r1
 80034c6:	4924      	ldr	r1, [pc, #144]	@ (8003558 <vTaskStartScheduler+0xc0>)
 80034c8:	4824      	ldr	r0, [pc, #144]	@ (800355c <vTaskStartScheduler+0xc4>)
 80034ca:	f7ff fdf7 	bl	80030bc <xTaskCreateStatic>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <vTaskStartScheduler+0xc8>)
 80034d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034d4:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <vTaskStartScheduler+0xc8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e001      	b.n	80034e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034ec:	f000 fd3c 	bl	8003f68 <xTimerCreateTimerTask>
 80034f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d11b      	bne.n	8003530 <vTaskStartScheduler+0x98>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
}
 800350a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <vTaskStartScheduler+0xcc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3354      	adds	r3, #84	@ 0x54
 8003512:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <vTaskStartScheduler+0xd0>)
 8003514:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <vTaskStartScheduler+0xd4>)
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800351e:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <vTaskStartScheduler+0xd8>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <vTaskStartScheduler+0xdc>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800352a:	f001 f8c9 	bl	80046c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800352e:	e00f      	b.n	8003550 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d10b      	bne.n	8003550 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <vTaskStartScheduler+0xb4>
}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0800500c 	.word	0x0800500c
 800355c:	08003bd5 	.word	0x08003bd5
 8003560:	20000d68 	.word	0x20000d68
 8003564:	20000870 	.word	0x20000870
 8003568:	20000010 	.word	0x20000010
 800356c:	20000d64 	.word	0x20000d64
 8003570:	20000d50 	.word	0x20000d50
 8003574:	20000d48 	.word	0x20000d48

08003578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <vTaskSuspendAll+0x18>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <vTaskSuspendAll+0x18>)
 8003584:	6013      	str	r3, [r2, #0]
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	20000d6c 	.word	0x20000d6c

08003594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035a2:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <xTaskResumeAll+0x118>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	603b      	str	r3, [r7, #0]
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035c2:	f001 f921 	bl	8004808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035c6:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <xTaskResumeAll+0x118>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a37      	ldr	r2, [pc, #220]	@ (80036ac <xTaskResumeAll+0x118>)
 80035ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <xTaskResumeAll+0x118>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d162      	bne.n	800369e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035d8:	4b35      	ldr	r3, [pc, #212]	@ (80036b0 <xTaskResumeAll+0x11c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05e      	beq.n	800369e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e0:	e02f      	b.n	8003642 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035e2:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <xTaskResumeAll+0x120>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3318      	adds	r3, #24
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f842 	bl	8002678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f83d 	bl	8002678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003602:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <xTaskResumeAll+0x124>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d903      	bls.n	8003612 <xTaskResumeAll+0x7e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	4a2a      	ldr	r2, [pc, #168]	@ (80036b8 <xTaskResumeAll+0x124>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4a27      	ldr	r2, [pc, #156]	@ (80036bc <xTaskResumeAll+0x128>)
 8003620:	441a      	add	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe ffc8 	bl	80025be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003632:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <xTaskResumeAll+0x12c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <xTaskResumeAll+0x130>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003642:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <xTaskResumeAll+0x120>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cb      	bne.n	80035e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003650:	f000 fb7c 	bl	8003d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003654:	4b1c      	ldr	r3, [pc, #112]	@ (80036c8 <xTaskResumeAll+0x134>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003660:	f000 f846 	bl	80036f0 <xTaskIncrementTick>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <xTaskResumeAll+0x130>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f1      	bne.n	8003660 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <xTaskResumeAll+0x134>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <xTaskResumeAll+0x130>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800368e:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <xTaskResumeAll+0x138>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800369e:	f001 f8e5 	bl	800486c <vPortExitCritical>

	return xAlreadyYielded;
 80036a2:	68bb      	ldr	r3, [r7, #8]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000d6c 	.word	0x20000d6c
 80036b0:	20000d44 	.word	0x20000d44
 80036b4:	20000d04 	.word	0x20000d04
 80036b8:	20000d4c 	.word	0x20000d4c
 80036bc:	20000874 	.word	0x20000874
 80036c0:	20000870 	.word	0x20000870
 80036c4:	20000d58 	.word	0x20000d58
 80036c8:	20000d54 	.word	0x20000d54
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036d6:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <xTaskGetTickCount+0x1c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036dc:	687b      	ldr	r3, [r7, #4]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000d48 	.word	0x20000d48

080036f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fa:	4b52      	ldr	r3, [pc, #328]	@ (8003844 <xTaskIncrementTick+0x154>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 808f 	bne.w	8003822 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003704:	4b50      	ldr	r3, [pc, #320]	@ (8003848 <xTaskIncrementTick+0x158>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800370c:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <xTaskIncrementTick+0x158>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d121      	bne.n	800375c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003718:	4b4c      	ldr	r3, [pc, #304]	@ (800384c <xTaskIncrementTick+0x15c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	603b      	str	r3, [r7, #0]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xTaskIncrementTick+0x46>
 800373a:	4b44      	ldr	r3, [pc, #272]	@ (800384c <xTaskIncrementTick+0x15c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	4b43      	ldr	r3, [pc, #268]	@ (8003850 <xTaskIncrementTick+0x160>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a41      	ldr	r2, [pc, #260]	@ (800384c <xTaskIncrementTick+0x15c>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4a41      	ldr	r2, [pc, #260]	@ (8003850 <xTaskIncrementTick+0x160>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <xTaskIncrementTick+0x164>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a3f      	ldr	r2, [pc, #252]	@ (8003854 <xTaskIncrementTick+0x164>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f000 faf8 	bl	8003d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800375c:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <xTaskIncrementTick+0x168>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d34e      	bcc.n	8003804 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <xTaskIncrementTick+0x15c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xTaskIncrementTick+0x84>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <xTaskIncrementTick+0x86>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <xTaskIncrementTick+0x168>)
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	601a      	str	r2, [r3, #0]
					break;
 8003782:	e03f      	b.n	8003804 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <xTaskIncrementTick+0x15c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d203      	bcs.n	80037a4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800379c:	4a2e      	ldr	r2, [pc, #184]	@ (8003858 <xTaskIncrementTick+0x168>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
						break;
 80037a2:	e02f      	b.n	8003804 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe ff65 	bl	8002678 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3318      	adds	r3, #24
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe ff5c 	bl	8002678 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	4b25      	ldr	r3, [pc, #148]	@ (800385c <xTaskIncrementTick+0x16c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d903      	bls.n	80037d4 <xTaskIncrementTick+0xe4>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a22      	ldr	r2, [pc, #136]	@ (800385c <xTaskIncrementTick+0x16c>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <xTaskIncrementTick+0x170>)
 80037e2:	441a      	add	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f7fe fee7 	bl	80025be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <xTaskIncrementTick+0x174>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3b3      	bcc.n	8003766 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037fe:	2301      	movs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003802:	e7b0      	b.n	8003766 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <xTaskIncrementTick+0x174>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800380a:	4915      	ldr	r1, [pc, #84]	@ (8003860 <xTaskIncrementTick+0x170>)
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d907      	bls.n	800382c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e004      	b.n	800382c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003822:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <xTaskIncrementTick+0x178>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	4a0f      	ldr	r2, [pc, #60]	@ (8003868 <xTaskIncrementTick+0x178>)
 800382a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800382c:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <xTaskIncrementTick+0x17c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003838:	697b      	ldr	r3, [r7, #20]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000d6c 	.word	0x20000d6c
 8003848:	20000d48 	.word	0x20000d48
 800384c:	20000cfc 	.word	0x20000cfc
 8003850:	20000d00 	.word	0x20000d00
 8003854:	20000d5c 	.word	0x20000d5c
 8003858:	20000d64 	.word	0x20000d64
 800385c:	20000d4c 	.word	0x20000d4c
 8003860:	20000874 	.word	0x20000874
 8003864:	20000870 	.word	0x20000870
 8003868:	20000d54 	.word	0x20000d54
 800386c:	20000d58 	.word	0x20000d58

08003870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003876:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <vTaskSwitchContext+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800387e:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <vTaskSwitchContext+0xb8>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003884:	e047      	b.n	8003916 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003886:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <vTaskSwitchContext+0xb8>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800388c:	4b27      	ldr	r3, [pc, #156]	@ (800392c <vTaskSwitchContext+0xbc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e011      	b.n	80038b8 <vTaskSwitchContext+0x48>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	607b      	str	r3, [r7, #4]
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <vTaskSwitchContext+0x3e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	491d      	ldr	r1, [pc, #116]	@ (8003930 <vTaskSwitchContext+0xc0>)
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0e3      	beq.n	8003894 <vTaskSwitchContext+0x24>
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4a16      	ldr	r2, [pc, #88]	@ (8003930 <vTaskSwitchContext+0xc0>)
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3308      	adds	r3, #8
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d104      	bne.n	80038fc <vTaskSwitchContext+0x8c>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	4a0c      	ldr	r2, [pc, #48]	@ (8003934 <vTaskSwitchContext+0xc4>)
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4a09      	ldr	r2, [pc, #36]	@ (800392c <vTaskSwitchContext+0xbc>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <vTaskSwitchContext+0xc4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3354      	adds	r3, #84	@ 0x54
 8003912:	4a09      	ldr	r2, [pc, #36]	@ (8003938 <vTaskSwitchContext+0xc8>)
 8003914:	6013      	str	r3, [r2, #0]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000d6c 	.word	0x20000d6c
 8003928:	20000d58 	.word	0x20000d58
 800392c:	20000d4c 	.word	0x20000d4c
 8003930:	20000874 	.word	0x20000874
 8003934:	20000870 	.word	0x20000870
 8003938:	20000010 	.word	0x20000010

0800393c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60fb      	str	r3, [r7, #12]
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003964:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <vTaskPlaceOnEventList+0x48>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3318      	adds	r3, #24
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe fe4a 	bl	8002606 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003972:	2101      	movs	r1, #1
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f000 fa9d 	bl	8003eb4 <prvAddCurrentTaskToDelayedList>
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000870 	.word	0x20000870

08003988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <vTaskPlaceOnEventListRestricted+0x54>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3318      	adds	r3, #24
 80039b8:	4619      	mov	r1, r3
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7fe fdff 	bl	80025be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f000 fa70 	bl	8003eb4 <prvAddCurrentTaskToDelayedList>
	}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000870 	.word	0x20000870

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fe30 	bl	8002678 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11d      	bne.n	8003a5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fe27 	bl	8002678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2e:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d903      	bls.n	8003a3e <xTaskRemoveFromEventList+0x5e>
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4a13      	ldr	r2, [pc, #76]	@ (8003a98 <xTaskRemoveFromEventList+0xb8>)
 8003a4c:	441a      	add	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7fe fdb2 	bl	80025be <vListInsertEnd>
 8003a5a:	e005      	b.n	8003a68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	4619      	mov	r1, r3
 8003a62:	480e      	ldr	r0, [pc, #56]	@ (8003a9c <xTaskRemoveFromEventList+0xbc>)
 8003a64:	f7fe fdab 	bl	80025be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <xTaskRemoveFromEventList+0xc0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d905      	bls.n	8003a82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <xTaskRemoveFromEventList+0xc4>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e001      	b.n	8003a86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a86:	697b      	ldr	r3, [r7, #20]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000d6c 	.word	0x20000d6c
 8003a94:	20000d4c 	.word	0x20000d4c
 8003a98:	20000874 	.word	0x20000874
 8003a9c:	20000d04 	.word	0x20000d04
 8003aa0:	20000870 	.word	0x20000870
 8003aa4:	20000d58 	.word	0x20000d58

08003aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <vTaskInternalSetTimeOutState+0x24>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <vTaskInternalSetTimeOutState+0x28>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000d5c 	.word	0x20000d5c
 8003ad0:	20000d48 	.word	0x20000d48

08003ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	613b      	str	r3, [r7, #16]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60fb      	str	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b1a:	f000 fe75 	bl	8004808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <xTaskCheckForTimeOut+0xdc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8003b2e:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <xTaskCheckForTimeOut+0xe0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb4 <xTaskCheckForTimeOut+0xe0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
				xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e02b      	b.n	8003ba2 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d102      	bne.n	8003b5a <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	e023      	b.n	8003ba2 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <xTaskCheckForTimeOut+0xe4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d007      	beq.n	8003b76 <xTaskCheckForTimeOut+0xa2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	e015      	b.n	8003ba2 <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d20b      	bcs.n	8003b98 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff8b 	bl	8003aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e004      	b.n	8003ba2 <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ba2:	f000 fe63 	bl	800486c <vPortExitCritical>

	return xReturn;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000d48 	.word	0x20000d48
 8003bb4:	20000870 	.word	0x20000870
 8003bb8:	20000d5c 	.word	0x20000d5c

08003bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <vTaskMissedYield+0x14>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	20000d58 	.word	0x20000d58

08003bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bdc:	f000 f852 	bl	8003c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <prvIdleTask+0x28>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d9f9      	bls.n	8003bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <prvIdleTask+0x2c>)
 8003bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bf8:	e7f0      	b.n	8003bdc <prvIdleTask+0x8>
 8003bfa:	bf00      	nop
 8003bfc:	20000874 	.word	0x20000874
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	e00c      	b.n	8003c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a12      	ldr	r2, [pc, #72]	@ (8003c64 <prvInitialiseTaskLists+0x60>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fca0 	bl	8002564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3301      	adds	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b37      	cmp	r3, #55	@ 0x37
 8003c2e:	d9ef      	bls.n	8003c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c30:	480d      	ldr	r0, [pc, #52]	@ (8003c68 <prvInitialiseTaskLists+0x64>)
 8003c32:	f7fe fc97 	bl	8002564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <prvInitialiseTaskLists+0x68>)
 8003c38:	f7fe fc94 	bl	8002564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <prvInitialiseTaskLists+0x6c>)
 8003c3e:	f7fe fc91 	bl	8002564 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c42:	480c      	ldr	r0, [pc, #48]	@ (8003c74 <prvInitialiseTaskLists+0x70>)
 8003c44:	f7fe fc8e 	bl	8002564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c48:	480b      	ldr	r0, [pc, #44]	@ (8003c78 <prvInitialiseTaskLists+0x74>)
 8003c4a:	f7fe fc8b 	bl	8002564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <prvInitialiseTaskLists+0x78>)
 8003c50:	4a05      	ldr	r2, [pc, #20]	@ (8003c68 <prvInitialiseTaskLists+0x64>)
 8003c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <prvInitialiseTaskLists+0x7c>)
 8003c56:	4a05      	ldr	r2, [pc, #20]	@ (8003c6c <prvInitialiseTaskLists+0x68>)
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000874 	.word	0x20000874
 8003c68:	20000cd4 	.word	0x20000cd4
 8003c6c:	20000ce8 	.word	0x20000ce8
 8003c70:	20000d04 	.word	0x20000d04
 8003c74:	20000d18 	.word	0x20000d18
 8003c78:	20000d30 	.word	0x20000d30
 8003c7c:	20000cfc 	.word	0x20000cfc
 8003c80:	20000d00 	.word	0x20000d00

08003c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c8a:	e019      	b.n	8003cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c8c:	f000 fdbc 	bl	8004808 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c90:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <prvCheckTasksWaitingTermination+0x50>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fceb 	bl	8002678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x54>)
 8003caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cb6:	f000 fdd9 	bl	800486c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f810 	bl	8003ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <prvCheckTasksWaitingTermination+0x58>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e1      	bne.n	8003c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000d18 	.word	0x20000d18
 8003cd8:	20000d44 	.word	0x20000d44
 8003cdc:	20000d2c 	.word	0x20000d2c

08003ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3354      	adds	r3, #84	@ 0x54
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 f895 	bl	8004e1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 ff6b 	bl	8004bdc <vPortFree>
				vPortFree( pxTCB );
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 ff68 	bl	8004bdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d0c:	e019      	b.n	8003d42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d103      	bne.n	8003d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 ff5f 	bl	8004bdc <vPortFree>
	}
 8003d1e:	e010      	b.n	8003d42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d00b      	beq.n	8003d42 <prvDeleteTCB+0x62>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60fb      	str	r3, [r7, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <prvDeleteTCB+0x5e>
	}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d52:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <prvResetNextTaskUnblockTime+0x14>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <prvResetNextTaskUnblockTime+0x16>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d66:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <prvResetNextTaskUnblockTime+0x48>)
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d6e:	e008      	b.n	8003d82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <prvResetNextTaskUnblockTime+0x48>)
 8003d80:	6013      	str	r3, [r2, #0]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000cfc 	.word	0x20000cfc
 8003d94:	20000d64 	.word	0x20000d64

08003d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <xTaskGetSchedulerState+0x34>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003da6:	2301      	movs	r3, #1
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e008      	b.n	8003dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <xTaskGetSchedulerState+0x38>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003db4:	2302      	movs	r3, #2
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	e001      	b.n	8003dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dbe:	687b      	ldr	r3, [r7, #4]
	}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000d50 	.word	0x20000d50
 8003dd0:	20000d6c 	.word	0x20000d6c

08003dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d058      	beq.n	8003e9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <xTaskPriorityDisinherit+0xd4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d00b      	beq.n	8003e0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60fb      	str	r3, [r7, #12]
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	60bb      	str	r3, [r7, #8]
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d02c      	beq.n	8003e9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d128      	bne.n	8003e9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fc12 	bl	8002678 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <xTaskPriorityDisinherit+0xd8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d903      	bls.n	8003e7c <xTaskPriorityDisinherit+0xa8>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	4a0c      	ldr	r2, [pc, #48]	@ (8003eac <xTaskPriorityDisinherit+0xd8>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <xTaskPriorityDisinherit+0xdc>)
 8003e8a:	441a      	add	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7fe fb93 	bl	80025be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e9c:	697b      	ldr	r3, [r7, #20]
	}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000870 	.word	0x20000870
 8003eac:	20000d4c 	.word	0x20000d4c
 8003eb0:	20000874 	.word	0x20000874

08003eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003ec4:	4b23      	ldr	r3, [pc, #140]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ece:	4b21      	ldr	r3, [pc, #132]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fbcf 	bl	8002678 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d10a      	bne.n	8003ef8 <prvAddCurrentTaskToDelayedList+0x44>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4819      	ldr	r0, [pc, #100]	@ (8003f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ef2:	f7fe fb64 	bl	80025be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ef6:	e026      	b.n	8003f46 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f00:	4b14      	ldr	r3, [pc, #80]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d209      	bcs.n	8003f24 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f10:	4b12      	ldr	r3, [pc, #72]	@ (8003f5c <prvAddCurrentTaskToDelayedList+0xa8>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fe fb72 	bl	8002606 <vListInsert>
}
 8003f22:	e010      	b.n	8003f46 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <prvAddCurrentTaskToDelayedList+0xac>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fb68 	bl	8002606 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d202      	bcs.n	8003f46 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8003f40:	4a08      	ldr	r2, [pc, #32]	@ (8003f64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6013      	str	r3, [r2, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000d48 	.word	0x20000d48
 8003f54:	20000870 	.word	0x20000870
 8003f58:	20000d30 	.word	0x20000d30
 8003f5c:	20000d00 	.word	0x20000d00
 8003f60:	20000cfc 	.word	0x20000cfc
 8003f64:	20000d64 	.word	0x20000d64

08003f68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f72:	f000 fad9 	bl	8004528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f76:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <xTimerCreateTimerTask+0x84>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d021      	beq.n	8003fc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	f107 0108 	add.w	r1, r7, #8
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe facd 	bl	8002530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	9202      	str	r2, [sp, #8]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	4911      	ldr	r1, [pc, #68]	@ (8003ff0 <xTimerCreateTimerTask+0x88>)
 8003faa:	4812      	ldr	r0, [pc, #72]	@ (8003ff4 <xTimerCreateTimerTask+0x8c>)
 8003fac:	f7ff f886 	bl	80030bc <xTaskCreateStatic>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <xTimerCreateTimerTask+0x90>)
 8003fb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <xTimerCreateTimerTask+0x90>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	613b      	str	r3, [r7, #16]
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003fe0:	697b      	ldr	r3, [r7, #20]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000da0 	.word	0x20000da0
 8003ff0:	08005014 	.word	0x08005014
 8003ff4:	0800411d 	.word	0x0800411d
 8003ff8:	20000da4 	.word	0x20000da4

08003ffc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xTimerGenericCommand+0x30>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	623b      	str	r3, [r7, #32]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800402c:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <xTimerGenericCommand+0x98>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02a      	beq.n	800408a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b05      	cmp	r3, #5
 8004044:	dc18      	bgt.n	8004078 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004046:	f7ff fea7 	bl	8003d98 <xTaskGetSchedulerState>
 800404a:	4603      	mov	r3, r0
 800404c:	2b02      	cmp	r3, #2
 800404e:	d109      	bne.n	8004064 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <xTimerGenericCommand+0x98>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f107 0110 	add.w	r1, r7, #16
 8004058:	2300      	movs	r3, #0
 800405a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800405c:	f7fe fc40 	bl	80028e0 <xQueueGenericSend>
 8004060:	6278      	str	r0, [r7, #36]	@ 0x24
 8004062:	e012      	b.n	800408a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004064:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <xTimerGenericCommand+0x98>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	f107 0110 	add.w	r1, r7, #16
 800406c:	2300      	movs	r3, #0
 800406e:	2200      	movs	r2, #0
 8004070:	f7fe fc36 	bl	80028e0 <xQueueGenericSend>
 8004074:	6278      	str	r0, [r7, #36]	@ 0x24
 8004076:	e008      	b.n	800408a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <xTimerGenericCommand+0x98>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	f107 0110 	add.w	r1, r7, #16
 8004080:	2300      	movs	r3, #0
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	f7fe fd2e 	bl	8002ae4 <xQueueGenericSendFromISR>
 8004088:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800408c:	4618      	mov	r0, r3
 800408e:	3728      	adds	r7, #40	@ 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000da0 	.word	0x20000da0

08004098 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af02      	add	r7, sp, #8
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <prvProcessExpiredTimer+0x80>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fae1 	bl	8002678 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d123      	bne.n	8004106 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	18d1      	adds	r1, r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f000 f8cc 	bl	8004268 <prvInsertTimerInActiveList>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2300      	movs	r3, #0
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	2100      	movs	r1, #0
 80040e0:	6978      	ldr	r0, [r7, #20]
 80040e2:	f7ff ff8b 	bl	8003ffc <xTimerGenericCommand>
 80040e6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60fb      	str	r3, [r7, #12]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	4798      	blx	r3
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000d98 	.word	0x20000d98

0800411c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f859 	bl	80041e0 <prvGetNextExpireTime>
 800412e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f805 	bl	8004144 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800413a:	f000 f8d7 	bl	80042ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800413e:	bf00      	nop
 8004140:	e7f0      	b.n	8004124 <prvTimerTask+0x8>
	...

08004144 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800414e:	f7ff fa13 	bl	8003578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f866 	bl	8004228 <prvSampleTimeNow>
 800415c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d130      	bne.n	80041c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <prvProcessTimerOrBlockTask+0x3c>
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d806      	bhi.n	8004180 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004172:	f7ff fa0f 	bl	8003594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff8d 	bl	8004098 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800417e:	e024      	b.n	80041ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004186:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <prvProcessTimerOrBlockTask+0x90>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <prvProcessTimerOrBlockTask+0x94>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f7fe ff55 	bl	8003054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041aa:	f7ff f9f3 	bl	8003594 <xTaskResumeAll>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <prvProcessTimerOrBlockTask+0x98>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
}
 80041c4:	e001      	b.n	80041ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041c6:	f7ff f9e5 	bl	8003594 <xTaskResumeAll>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000d9c 	.word	0x20000d9c
 80041d8:	20000da0 	.word	0x20000da0
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <prvGetNextExpireTime+0x44>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004206:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <prvGetNextExpireTime+0x44>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e001      	b.n	8004216 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	20000d98 	.word	0x20000d98

08004228 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004230:	f7ff fa4e 	bl	80036d0 <xTaskGetTickCount>
 8004234:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <prvSampleTimeNow+0x3c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d205      	bcs.n	800424c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004240:	f000 f910 	bl	8004464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e002      	b.n	8004252 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <prvSampleTimeNow+0x3c>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000da8 	.word	0x20000da8

08004268 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d812      	bhi.n	80042b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e01b      	b.n	80042da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <prvInsertTimerInActiveList+0x7c>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fe f9aa 	bl	8002606 <vListInsert>
 80042b2:	e012      	b.n	80042da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d206      	bcs.n	80042ca <prvInsertTimerInActiveList+0x62>
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e007      	b.n	80042da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <prvInsertTimerInActiveList+0x80>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7fe f996 	bl	8002606 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000d9c 	.word	0x20000d9c
 80042e8:	20000d98 	.word	0x20000d98

080042ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	@ 0x38
 80042f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042f2:	e0a5      	b.n	8004440 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da19      	bge.n	800432e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	3304      	adds	r3, #4
 80042fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61fb      	str	r3, [r7, #28]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004324:	6850      	ldr	r0, [r2, #4]
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	6892      	ldr	r2, [r2, #8]
 800432a:	4611      	mov	r1, r2
 800432c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f2c0 8085 	blt.w	8004440 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe f996 	bl	8002678 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800434c:	463b      	mov	r3, r7
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff6a 	bl	8004228 <prvSampleTimeNow>
 8004354:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b09      	cmp	r3, #9
 800435a:	d86c      	bhi.n	8004436 <prvProcessReceivedCommands+0x14a>
 800435c:	a201      	add	r2, pc, #4	@ (adr r2, 8004364 <prvProcessReceivedCommands+0x78>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	0800438d 	.word	0x0800438d
 8004368:	0800438d 	.word	0x0800438d
 800436c:	0800438d 	.word	0x0800438d
 8004370:	08004437 	.word	0x08004437
 8004374:	080043eb 	.word	0x080043eb
 8004378:	08004425 	.word	0x08004425
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800438d 	.word	0x0800438d
 8004384:	08004437 	.word	0x08004437
 8004388:	080043eb 	.word	0x080043eb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	18d1      	adds	r1, r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800439a:	f7ff ff65 	bl	8004268 <prvInsertTimerInActiveList>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d04a      	beq.n	800443a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d142      	bne.n	800443a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	441a      	add	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	2100      	movs	r1, #0
 80043c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c6:	f7ff fe19 	bl	8003ffc <xTimerGenericCommand>
 80043ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d133      	bne.n	800443a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	61bb      	str	r3, [r7, #24]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	617b      	str	r3, [r7, #20]
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	18d1      	adds	r1, r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800441e:	f7ff ff23 	bl	8004268 <prvInsertTimerInActiveList>
					break;
 8004422:	e00d      	b.n	8004440 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800442e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004430:	f000 fbd4 	bl	8004bdc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004434:	e003      	b.n	800443e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <prvProcessReceivedCommands+0x154>
					break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <prvProcessReceivedCommands+0x154>
					break;
 800443e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004440:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <prvProcessReceivedCommands+0x174>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1d39      	adds	r1, r7, #4
 8004446:	2200      	movs	r2, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fbe7 	bl	8002c1c <xQueueReceive>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af4f 	bne.w	80042f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	@ 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000da0 	.word	0x20000da0

08004464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800446a:	e046      	b.n	80044fa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800446c:	4b2c      	ldr	r3, [pc, #176]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004476:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe f8f7 	bl	8002678 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12f      	bne.n	80044fa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d90e      	bls.n	80044ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fe f89f 	bl	8002606 <vListInsert>
 80044c8:	e017      	b.n	80044fa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ca:	2300      	movs	r3, #0
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	2100      	movs	r1, #0
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fd91 	bl	8003ffc <xTimerGenericCommand>
 80044da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <prvSwitchTimerLists+0x96>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	603b      	str	r3, [r7, #0]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1b3      	bne.n	800446c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004504:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800450a:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <prvSwitchTimerLists+0xc0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a04      	ldr	r2, [pc, #16]	@ (8004520 <prvSwitchTimerLists+0xbc>)
 8004510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004512:	4a04      	ldr	r2, [pc, #16]	@ (8004524 <prvSwitchTimerLists+0xc0>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000d98 	.word	0x20000d98
 8004524:	20000d9c 	.word	0x20000d9c

08004528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800452e:	f000 f96b 	bl	8004808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004532:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d120      	bne.n	800457c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800453a:	4814      	ldr	r0, [pc, #80]	@ (800458c <prvCheckForValidListAndQueue+0x64>)
 800453c:	f7fe f812 	bl	8002564 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004540:	4813      	ldr	r0, [pc, #76]	@ (8004590 <prvCheckForValidListAndQueue+0x68>)
 8004542:	f7fe f80f 	bl	8002564 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004546:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <prvCheckForValidListAndQueue+0x6c>)
 8004548:	4a10      	ldr	r2, [pc, #64]	@ (800458c <prvCheckForValidListAndQueue+0x64>)
 800454a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <prvCheckForValidListAndQueue+0x70>)
 800454e:	4a10      	ldr	r2, [pc, #64]	@ (8004590 <prvCheckForValidListAndQueue+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004552:	2300      	movs	r3, #0
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4b11      	ldr	r3, [pc, #68]	@ (800459c <prvCheckForValidListAndQueue+0x74>)
 8004558:	4a11      	ldr	r2, [pc, #68]	@ (80045a0 <prvCheckForValidListAndQueue+0x78>)
 800455a:	2110      	movs	r1, #16
 800455c:	200a      	movs	r0, #10
 800455e:	f7fe f91f 	bl	80027a0 <xQueueGenericCreateStatic>
 8004562:	4603      	mov	r3, r0
 8004564:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <prvCheckForValidListAndQueue+0x60>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	490b      	ldr	r1, [pc, #44]	@ (80045a4 <prvCheckForValidListAndQueue+0x7c>)
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fd42 	bl	8003000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800457c:	f000 f976 	bl	800486c <vPortExitCritical>
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000da0 	.word	0x20000da0
 800458c:	20000d70 	.word	0x20000d70
 8004590:	20000d84 	.word	0x20000d84
 8004594:	20000d98 	.word	0x20000d98
 8004598:	20000d9c 	.word	0x20000d9c
 800459c:	20000e4c 	.word	0x20000e4c
 80045a0:	20000dac 	.word	0x20000dac
 80045a4:	0800501c 	.word	0x0800501c

080045a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b04      	subs	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b04      	subs	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045d8:	4a0c      	ldr	r2, [pc, #48]	@ (800460c <pxPortInitialiseStack+0x64>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b14      	subs	r3, #20
 80045e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f06f 0202 	mvn.w	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3b20      	subs	r3, #32
 80045fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	08004611 	.word	0x08004611

08004610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800461a:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <prvTaskExitError+0x58>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d00b      	beq.n	800463c <prvTaskExitError+0x2c>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <prvTaskExitError+0x28>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
}
 800464e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004650:	bf00      	nop
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0fc      	beq.n	8004652 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c
 800466c:	00000000 	.word	0x00000000

08004670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004698:	4808      	ldr	r0, [pc, #32]	@ (80046bc <prvPortStartFirstTask+0x24>)
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f380 8808 	msr	MSP, r0
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8814 	msr	CONTROL, r0
 80046aa:	b662      	cpsie	i
 80046ac:	b661      	cpsie	f
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	df00      	svc	0
 80046b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ba:	bf00      	nop
 80046bc:	e000ed08 	.word	0xe000ed08

080046c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046c6:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <xPortStartScheduler+0x124>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <xPortStartScheduler+0x128>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10b      	bne.n	80046e8 <xPortStartScheduler+0x28>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	613b      	str	r3, [r7, #16]
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046e8:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <xPortStartScheduler+0x124>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <xPortStartScheduler+0x12c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10b      	bne.n	800470a <xPortStartScheduler+0x4a>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470a:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <xPortStartScheduler+0x130>)
 800470c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	22ff      	movs	r2, #255	@ 0xff
 800471a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800472c:	b2da      	uxtb	r2, r3
 800472e:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <xPortStartScheduler+0x134>)
 8004730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <xPortStartScheduler+0x138>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004738:	e009      	b.n	800474e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <xPortStartScheduler+0x138>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	4a2d      	ldr	r2, [pc, #180]	@ (80047f8 <xPortStartScheduler+0x138>)
 8004742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d0ef      	beq.n	800473a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475a:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <xPortStartScheduler+0x138>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00b      	beq.n	800477e <xPortStartScheduler+0xbe>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	e7fd      	b.n	800477a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800477e:	4b1e      	ldr	r3, [pc, #120]	@ (80047f8 <xPortStartScheduler+0x138>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <xPortStartScheduler+0x138>)
 8004786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <xPortStartScheduler+0x138>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004790:	4a19      	ldr	r2, [pc, #100]	@ (80047f8 <xPortStartScheduler+0x138>)
 8004792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800479c:	4b17      	ldr	r3, [pc, #92]	@ (80047fc <xPortStartScheduler+0x13c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <xPortStartScheduler+0x13c>)
 80047a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047a8:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <xPortStartScheduler+0x13c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <xPortStartScheduler+0x13c>)
 80047ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047b4:	f000 f8da 	bl	800496c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <xPortStartScheduler+0x140>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047be:	f000 f8f9 	bl	80049b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047c2:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <xPortStartScheduler+0x144>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004804 <xPortStartScheduler+0x144>)
 80047c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80047cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047ce:	f7ff ff63 	bl	8004698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047d2:	f7ff f84d 	bl	8003870 <vTaskSwitchContext>
	prvTaskExitError();
 80047d6:	f7ff ff1b 	bl	8004610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	410fc271 	.word	0x410fc271
 80047ec:	410fc270 	.word	0x410fc270
 80047f0:	e000e400 	.word	0xe000e400
 80047f4:	20000e9c 	.word	0x20000e9c
 80047f8:	20000ea0 	.word	0x20000ea0
 80047fc:	e000ed20 	.word	0xe000ed20
 8004800:	2000000c 	.word	0x2000000c
 8004804:	e000ef34 	.word	0xe000ef34

08004808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
}
 8004820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004822:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <vPortEnterCritical+0x5c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	4a0e      	ldr	r2, [pc, #56]	@ (8004864 <vPortEnterCritical+0x5c>)
 800482a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800482c:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <vPortEnterCritical+0x5c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d110      	bne.n	8004856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <vPortEnterCritical+0x60>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <vPortEnterCritical+0x4e>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	603b      	str	r3, [r7, #0]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <vPortEnterCritical+0x4a>
	}
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004872:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <vPortExitCritical+0x50>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <vPortExitCritical+0x26>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <vPortExitCritical+0x50>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3b01      	subs	r3, #1
 8004898:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <vPortExitCritical+0x50>)
 800489a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800489c:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <vPortExitCritical+0x50>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <vPortExitCritical+0x44>
 80048a4:	2300      	movs	r3, #0
 80048a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f383 8811 	msr	BASEPRI, r3
}
 80048ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	2000000c 	.word	0x2000000c

080048c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048c0:	f3ef 8009 	mrs	r0, PSP
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <pxCurrentTCBConst>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f01e 0f10 	tst.w	lr, #16
 80048d0:	bf08      	it	eq
 80048d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048e4:	f380 8811 	msr	BASEPRI, r0
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f7fe ffbe 	bl	8003870 <vTaskSwitchContext>
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f380 8811 	msr	BASEPRI, r0
 80048fc:	bc09      	pop	{r0, r3}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004906:	f01e 0f10 	tst.w	lr, #16
 800490a:	bf08      	it	eq
 800490c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004910:	f380 8809 	msr	PSP, r0
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst>:
 8004920:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7fe fed5 	bl	80036f0 <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <xPortSysTickHandler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <vPortSetupTimerInterrupt+0x38>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <vPortSetupTimerInterrupt+0x40>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a09      	ldr	r2, [pc, #36]	@ (80049b0 <vPortSetupTimerInterrupt+0x44>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e010 	.word	0xe000e010
 80049a4:	e000e018 	.word	0xe000e018
 80049a8:	20000000 	.word	0x20000000
 80049ac:	10624dd3 	.word	0x10624dd3
 80049b0:	e000e014 	.word	0xe000e014

080049b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049c4 <vPortEnableVFP+0x10>
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed88 	.word	0xe000ed88

080049c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ce:	f3ef 8305 	mrs	r3, IPSR
 80049d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d915      	bls.n	8004a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049da:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <vPortValidateInterruptPriority+0x74>)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e4:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <vPortValidateInterruptPriority+0x78>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	7afa      	ldrb	r2, [r7, #11]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20b      	bcs.n	8004a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a06:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <vPortValidateInterruptPriority+0x7c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a48 <vPortValidateInterruptPriority+0x80>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d90b      	bls.n	8004a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	603b      	str	r3, [r7, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	e7fd      	b.n	8004a2a <vPortValidateInterruptPriority+0x62>
	}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e3f0 	.word	0xe000e3f0
 8004a40:	20000e9c 	.word	0x20000e9c
 8004a44:	e000ed0c 	.word	0xe000ed0c
 8004a48:	20000ea0 	.word	0x20000ea0

08004a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a58:	f7fe fd8e 	bl	8003578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc8 <pvPortMalloc+0x17c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a64:	f000 f916 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a68:	4b58      	ldr	r3, [pc, #352]	@ (8004bcc <pvPortMalloc+0x180>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8090 	bne.w	8004b96 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01e      	beq.n	8004aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <pvPortMalloc+0x6e>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d06a      	beq.n	8004b96 <pvPortMalloc+0x14a>
 8004ac0:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d865      	bhi.n	8004b96 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aca:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ace:	4b41      	ldr	r3, [pc, #260]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ad4:	e004      	b.n	8004ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d903      	bls.n	8004af2 <pvPortMalloc+0xa6>
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f1      	bne.n	8004ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004af2:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <pvPortMalloc+0x17c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d04c      	beq.n	8004b96 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4413      	add	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	2308      	movs	r3, #8
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d920      	bls.n	8004b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <pvPortMalloc+0xfc>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b5a:	69b8      	ldr	r0, [r7, #24]
 8004b5c:	f000 f8fc 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b60:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	4a19      	ldr	r2, [pc, #100]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b6e:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d203      	bcs.n	8004b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <pvPortMalloc+0x184>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <pvPortMalloc+0x180>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b96:	f7fe fcfd 	bl	8003594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <pvPortMalloc+0x170>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60fb      	str	r3, [r7, #12]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <pvPortMalloc+0x16c>
	return pvReturn;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	@ 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20004d2c 	.word	0x20004d2c
 8004bcc:	20004d38 	.word	0x20004d38
 8004bd0:	20004d30 	.word	0x20004d30
 8004bd4:	20004d24 	.word	0x20004d24
 8004bd8:	20004d34 	.word	0x20004d34

08004bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d04a      	beq.n	8004c84 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bee:	2308      	movs	r3, #8
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <vPortFree+0xb0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <vPortFree+0x46>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60fb      	str	r3, [r7, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <vPortFree+0x66>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	60bb      	str	r3, [r7, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b11      	ldr	r3, [pc, #68]	@ (8004c8c <vPortFree+0xb0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d019      	beq.n	8004c84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <vPortFree+0xb0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c68:	f7fe fc86 	bl	8003578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <vPortFree+0xb4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <vPortFree+0xb4>)
 8004c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 f86c 	bl	8004d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c80:	f7fe fc88 	bl	8003594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20004d38 	.word	0x20004d38
 8004c90:	20004d30 	.word	0x20004d30

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	@ (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	@ (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	@ (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000ea4 	.word	0x20000ea4
 8004d44:	20004d24 	.word	0x20004d24
 8004d48:	20004d2c 	.word	0x20004d2c
 8004d4c:	20004d34 	.word	0x20004d34
 8004d50:	20004d30 	.word	0x20004d30
 8004d54:	20004d38 	.word	0x20004d38

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8f7      	bhi.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20004d24 	.word	0x20004d24
 8004e08:	20004d2c 	.word	0x20004d2c

08004e0c <memset>:
 8004e0c:	4402      	add	r2, r0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d100      	bne.n	8004e16 <memset+0xa>
 8004e14:	4770      	bx	lr
 8004e16:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1a:	e7f9      	b.n	8004e10 <memset+0x4>

08004e1c <_reclaim_reent>:
 8004e1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <_reclaim_reent+0xa8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4283      	cmp	r3, r0
 8004e22:	b570      	push	{r4, r5, r6, lr}
 8004e24:	4604      	mov	r4, r0
 8004e26:	d04b      	beq.n	8004ec0 <_reclaim_reent+0xa4>
 8004e28:	69c3      	ldr	r3, [r0, #28]
 8004e2a:	b1ab      	cbz	r3, 8004e58 <_reclaim_reent+0x3c>
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	b16b      	cbz	r3, 8004e4c <_reclaim_reent+0x30>
 8004e30:	2500      	movs	r5, #0
 8004e32:	69e3      	ldr	r3, [r4, #28]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	5959      	ldr	r1, [r3, r5]
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d13b      	bne.n	8004eb4 <_reclaim_reent+0x98>
 8004e3c:	3504      	adds	r5, #4
 8004e3e:	2d80      	cmp	r5, #128	@ 0x80
 8004e40:	d1f7      	bne.n	8004e32 <_reclaim_reent+0x16>
 8004e42:	69e3      	ldr	r3, [r4, #28]
 8004e44:	4620      	mov	r0, r4
 8004e46:	68d9      	ldr	r1, [r3, #12]
 8004e48:	f000 f872 	bl	8004f30 <_free_r>
 8004e4c:	69e3      	ldr	r3, [r4, #28]
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	b111      	cbz	r1, 8004e58 <_reclaim_reent+0x3c>
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 f86c 	bl	8004f30 <_free_r>
 8004e58:	6961      	ldr	r1, [r4, #20]
 8004e5a:	b111      	cbz	r1, 8004e62 <_reclaim_reent+0x46>
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 f867 	bl	8004f30 <_free_r>
 8004e62:	69e1      	ldr	r1, [r4, #28]
 8004e64:	b111      	cbz	r1, 8004e6c <_reclaim_reent+0x50>
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f862 	bl	8004f30 <_free_r>
 8004e6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e6e:	b111      	cbz	r1, 8004e76 <_reclaim_reent+0x5a>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 f85d 	bl	8004f30 <_free_r>
 8004e76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e78:	b111      	cbz	r1, 8004e80 <_reclaim_reent+0x64>
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f000 f858 	bl	8004f30 <_free_r>
 8004e80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004e82:	b111      	cbz	r1, 8004e8a <_reclaim_reent+0x6e>
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f853 	bl	8004f30 <_free_r>
 8004e8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004e8c:	b111      	cbz	r1, 8004e94 <_reclaim_reent+0x78>
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f84e 	bl	8004f30 <_free_r>
 8004e94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e96:	b111      	cbz	r1, 8004e9e <_reclaim_reent+0x82>
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 f849 	bl	8004f30 <_free_r>
 8004e9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ea0:	b111      	cbz	r1, 8004ea8 <_reclaim_reent+0x8c>
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f844 	bl	8004f30 <_free_r>
 8004ea8:	6a23      	ldr	r3, [r4, #32]
 8004eaa:	b14b      	cbz	r3, 8004ec0 <_reclaim_reent+0xa4>
 8004eac:	4620      	mov	r0, r4
 8004eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eb2:	4718      	bx	r3
 8004eb4:	680e      	ldr	r6, [r1, #0]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f83a 	bl	8004f30 <_free_r>
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	e7bb      	b.n	8004e38 <_reclaim_reent+0x1c>
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000010 	.word	0x20000010

08004ec8 <__libc_init_array>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4d0d      	ldr	r5, [pc, #52]	@ (8004f00 <__libc_init_array+0x38>)
 8004ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8004f04 <__libc_init_array+0x3c>)
 8004ece:	1b64      	subs	r4, r4, r5
 8004ed0:	10a4      	asrs	r4, r4, #2
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	42a6      	cmp	r6, r4
 8004ed6:	d109      	bne.n	8004eec <__libc_init_array+0x24>
 8004ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8004f08 <__libc_init_array+0x40>)
 8004eda:	4c0c      	ldr	r4, [pc, #48]	@ (8004f0c <__libc_init_array+0x44>)
 8004edc:	f000 f87e 	bl	8004fdc <_init>
 8004ee0:	1b64      	subs	r4, r4, r5
 8004ee2:	10a4      	asrs	r4, r4, #2
 8004ee4:	2600      	movs	r6, #0
 8004ee6:	42a6      	cmp	r6, r4
 8004ee8:	d105      	bne.n	8004ef6 <__libc_init_array+0x2e>
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef0:	4798      	blx	r3
 8004ef2:	3601      	adds	r6, #1
 8004ef4:	e7ee      	b.n	8004ed4 <__libc_init_array+0xc>
 8004ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efa:	4798      	blx	r3
 8004efc:	3601      	adds	r6, #1
 8004efe:	e7f2      	b.n	8004ee6 <__libc_init_array+0x1e>
 8004f00:	080050a4 	.word	0x080050a4
 8004f04:	080050a4 	.word	0x080050a4
 8004f08:	080050a4 	.word	0x080050a4
 8004f0c:	080050a8 	.word	0x080050a8

08004f10 <__retarget_lock_acquire_recursive>:
 8004f10:	4770      	bx	lr

08004f12 <__retarget_lock_release_recursive>:
 8004f12:	4770      	bx	lr

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d041      	beq.n	8004fbc <_free_r+0x8c>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f000 f83e 	bl	8004fc4 <__malloc_lock>
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <_free_r+0x90>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	b933      	cbnz	r3, 8004f5c <_free_r+0x2c>
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	6014      	str	r4, [r2, #0]
 8004f52:	4628      	mov	r0, r5
 8004f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f58:	f000 b83a 	b.w	8004fd0 <__malloc_unlock>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d908      	bls.n	8004f72 <_free_r+0x42>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf01      	itttt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	1809      	addeq	r1, r1, r0
 8004f6e:	6021      	streq	r1, [r4, #0]
 8004f70:	e7ed      	b.n	8004f4e <_free_r+0x1e>
 8004f72:	461a      	mov	r2, r3
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	b10b      	cbz	r3, 8004f7c <_free_r+0x4c>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d9fa      	bls.n	8004f72 <_free_r+0x42>
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	1850      	adds	r0, r2, r1
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d10b      	bne.n	8004f9c <_free_r+0x6c>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	4401      	add	r1, r0
 8004f88:	1850      	adds	r0, r2, r1
 8004f8a:	4283      	cmp	r3, r0
 8004f8c:	6011      	str	r1, [r2, #0]
 8004f8e:	d1e0      	bne.n	8004f52 <_free_r+0x22>
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	6053      	str	r3, [r2, #4]
 8004f96:	4408      	add	r0, r1
 8004f98:	6010      	str	r0, [r2, #0]
 8004f9a:	e7da      	b.n	8004f52 <_free_r+0x22>
 8004f9c:	d902      	bls.n	8004fa4 <_free_r+0x74>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	e7d6      	b.n	8004f52 <_free_r+0x22>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	1821      	adds	r1, r4, r0
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf04      	itt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	bf04      	itt	eq
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	6054      	str	r4, [r2, #4]
 8004fba:	e7ca      	b.n	8004f52 <_free_r+0x22>
 8004fbc:	bd38      	pop	{r3, r4, r5, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20004e78 	.word	0x20004e78

08004fc4 <__malloc_lock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	@ (8004fcc <__malloc_lock+0x8>)
 8004fc6:	f7ff bfa3 	b.w	8004f10 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20004e74 	.word	0x20004e74

08004fd0 <__malloc_unlock>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	@ (8004fd8 <__malloc_unlock+0x8>)
 8004fd2:	f7ff bf9e 	b.w	8004f12 <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	20004e74 	.word	0x20004e74

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
