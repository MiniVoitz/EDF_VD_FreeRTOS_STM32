
NUCLEO_F303RE_FreeRTOS_EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006c7c  08006c7c  00007c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d80  08006d80  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d84  08006d84  00007d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006d88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00004e54  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ec0  20004ec0  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fac  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003180  00000000  00000000  0001d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000201c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e02  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023171  00000000  00000000  0002220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ea6  00000000  00000000  0004537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f7f  00000000  00000000  0005b221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c1a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054b8  00000000  00000000  0012c1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0013169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c64 	.word	0x08006c64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006c64 	.word	0x08006c64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000b70:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <MX_FREERTOS_Init+0x28>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <MX_FREERTOS_Init+0x2c>)
 8000b76:	f002 f97b 	bl	8002e70 <osThreadNew>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <MX_FREERTOS_Init+0x30>)
 8000b7e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <MX_FREERTOS_Init+0x34>)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <MX_FREERTOS_Init+0x38>)
 8000b86:	f002 f973 	bl	8002e70 <osThreadNew>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <MX_FREERTOS_Init+0x3c>)
 8000b8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	08006cc4 	.word	0x08006cc4
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	20000088 	.word	0x20000088
 8000ba0:	08006ce8 	.word	0x08006ce8
 8000ba4:	08000bd9 	.word	0x08000bd9
 8000ba8:	2000008c 	.word	0x2000008c

08000bac <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */

  for(;;)
  {
	i_task01++;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <StartTask01+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <StartTask01+0x28>)
 8000bbc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f000 fb8a 	bl	80012dc <HAL_GPIO_TogglePin>
	osDelay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bcc:	f002 f9fa 	bl	8002fc4 <osDelay>
	i_task01++;
 8000bd0:	bf00      	nop
 8000bd2:	e7ef      	b.n	8000bb4 <StartTask01+0x8>
 8000bd4:	20000090 	.word	0x20000090

08000bd8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	i_task02++;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <StartTask02+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <StartTask02+0x28>)
 8000be8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000bea:	2120      	movs	r1, #32
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f000 fb74 	bl	80012dc <HAL_GPIO_TogglePin>
	osDelay(3000);
 8000bf4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000bf8:	f002 f9e4 	bl	8002fc4 <osDelay>
	i_task02++;
 8000bfc:	bf00      	nop
 8000bfe:	e7ef      	b.n	8000be0 <StartTask02+0x8>
 8000c00:	20000094 	.word	0x20000094

08000c04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_GPIO_Init+0x2c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <MX_GPIO_Init+0x2c>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_GPIO_Init+0x2c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fa38 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f80a 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f7ff ffe0 	bl	8000c04 <MX_GPIO_Init>
//  int i_compteur = 0;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c44:	f002 f8ac 	bl	8002da0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c48:	f7ff ff90 	bl	8000b6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f002 f8dc 	bl	8002e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <main+0x1c>

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	@ 0x40
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2228      	movs	r2, #40	@ 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f005 f981 	bl	8005f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fb40 	bl	8001310 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c96:	f000 f82b 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fb80 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f817 	bl	8000cf0 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3740      	adds	r7, #64	@ 0x40
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 f9fb 	bl	80010d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	210f      	movs	r1, #15
 8000d36:	f06f 0001 	mvn.w	r0, #1
 8000d3a:	f000 faa5 	bl	8001288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d5c:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <HAL_InitTick+0xe0>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a32      	ldr	r2, [pc, #200]	@ (8000e2c <HAL_InitTick+0xe0>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	61d3      	str	r3, [r2, #28]
 8000d68:	4b30      	ldr	r3, [pc, #192]	@ (8000e2c <HAL_InitTick+0xe0>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fd18 	bl	80027b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8e:	f001 fcef 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8000d92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d94:	e004      	b.n	8000da0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d96:	f001 fceb 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <HAL_InitTick+0xe4>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9b      	lsrs	r3, r3, #18
 8000daa:	3b01      	subs	r3, #1
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <HAL_InitTick+0xec>)
 8000db2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000db6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dd4:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dd6:	f001 fd1f 	bl	8002818 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11b      	bne.n	8000e20 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000de8:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <HAL_InitTick+0xe8>)
 8000dea:	f001 fd77 	bl	80028dc <HAL_TIM_Base_Start_IT>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000df4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d111      	bne.n	8000e20 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dfc:	2036      	movs	r0, #54	@ 0x36
 8000dfe:	f000 fa5f 	bl	80012c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d808      	bhi.n	8000e1a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2036      	movs	r0, #54	@ 0x36
 8000e0e:	f000 fa3b 	bl	8001288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_InitTick+0xf0>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e002      	b.n	8000e20 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3738      	adds	r7, #56	@ 0x38
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	20000098 	.word	0x20000098
 8000e38:	40001000 	.word	0x40001000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <TIM6_DAC_IRQHandler+0x10>)
 8000e7e:	f001 fd9d 	bl	80029bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000098 	.word	0x20000098

08000e8c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000e90:	f000 f922 	bl	80010d8 <HAL_IncTick>
  xPortSysTickHandler();
 8000e94:	f004 fce0 	bl	8005858 <xPortSysTickHandler>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ITM_SendChar>:

//ITM Register Address
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN 		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1 << 24);
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <ITM_SendChar+0x48>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee4 <ITM_SendChar+0x48>)
 8000eac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eb0:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1 << 0);
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <ITM_SendChar+0x4c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <ITM_SendChar+0x4c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ebe:	bf00      	nop
 8000ec0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f8      	beq.n	8000ec0 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8000ece:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000edfc 	.word	0xe000edfc
 8000ee8:	e0000e00 	.word	0xe0000e00

08000eec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>

  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	    ITM_SendChar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffab 	bl	8000e9c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f005 f85c 	bl	80060b4 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20010000 	.word	0x20010000
 8001028:	00000400 	.word	0x00000400
 800102c:	200000e4 	.word	0x200000e4
 8001030:	20004ec0 	.word	0x20004ec0

08001034 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001090 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopForever+0xe>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopForever+0x16>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f005 f81b 	bl	80060c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fdd3 	bl	8000c34 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800109c:	08006d88 	.word	0x08006d88
  ldr r2, =_sbss
 80010a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010a4:	20004ec0 	.word	0x20004ec0

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>
	...

080010ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_Init+0x28>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_Init+0x28>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f8d8 	bl	8001272 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f7ff fe42 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fe18 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200000e8 	.word	0x200000e8

08001100 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;  
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200000e8 	.word	0x200000e8

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff4c 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129a:	f7ff ff61 	bl	8001160 <__NVIC_GetPriorityGrouping>
 800129e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f7ff ffb1 	bl	800120c <NVIC_EncodePriority>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff80 	bl	80011b8 <__NVIC_SetPriority>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff54 	bl	800117c <__NVIC_EnableIRQ>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43d9      	mvns	r1, r3
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	400b      	ands	r3, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001316:	af00      	add	r7, sp, #0
 8001318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001320:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001326:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	f001 b83a 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 816f 	beq.w	800162a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800134c:	4bb5      	ldr	r3, [pc, #724]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b04      	cmp	r3, #4
 8001356:	d00c      	beq.n	8001372 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001358:	4bb2      	ldr	r3, [pc, #712]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d15c      	bne.n	800141e <HAL_RCC_OscConfig+0x10e>
 8001364:	4baf      	ldr	r3, [pc, #700]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001370:	d155      	bne.n	800141e <HAL_RCC_OscConfig+0x10e>
 8001372:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001376:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001386:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	095b      	lsrs	r3, r3, #5
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x94>
 800139e:	4ba1      	ldr	r3, [pc, #644]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	e015      	b.n	80013d0 <HAL_RCC_OscConfig+0xc0>
 80013a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013a8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80013b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013cc:	4b95      	ldr	r3, [pc, #596]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013d4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80013d8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80013dc:	fa92 f2a2 	rbit	r2, r2
 80013e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80013e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80013e8:	fab2 f282 	clz	r2, r2
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	f042 0220 	orr.w	r2, r2, #32
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8111 	beq.w	8001628 <HAL_RCC_OscConfig+0x318>
 8001406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 8108 	bne.w	8001628 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	f000 bfc6 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x12e>
 8001430:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e036      	b.n	80014ac <HAL_RCC_OscConfig+0x19c>
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x158>
 800144e:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b72      	ldr	r3, [pc, #456]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a71      	ldr	r2, [pc, #452]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e021      	b.n	80014ac <HAL_RCC_OscConfig+0x19c>
 8001468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x184>
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a69      	ldr	r2, [pc, #420]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b67      	ldr	r3, [pc, #412]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a66      	ldr	r2, [pc, #408]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0x19c>
 8001494:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a62      	ldr	r2, [pc, #392]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b60      	ldr	r3, [pc, #384]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014aa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d059      	beq.n	8001570 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fe20 	bl	8001100 <HAL_GetTick>
 80014c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff fe1b 	bl	8001100 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	@ 0x64
 80014d4:	d902      	bls.n	80014dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f000 bf67 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 80014dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014e0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80014f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x1fe>
 8001508:	4b46      	ldr	r3, [pc, #280]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x22a>
 800150e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001512:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001522:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001526:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800152a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800153e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001542:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001546:	fa92 f2a2 	rbit	r2, r2
 800154a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800154e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ab      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1b6>
 800156e:	e05c      	b.n	800162a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fdc6 	bl	8001100 <HAL_GetTick>
 8001574:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fdc1 	bl	8001100 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d902      	bls.n	8001590 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	f000 bf0d 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 8001590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001594:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80015a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2b2>
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e015      	b.n	80015ee <HAL_RCC_OscConfig+0x2de>
 80015c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80015d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015da:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80015de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_RCC_OscConfig+0x314>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80015f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001602:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ab      	bne.n	800157a <HAL_RCC_OscConfig+0x26a>
 8001622:	e002      	b.n	800162a <HAL_RCC_OscConfig+0x31a>
 8001624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 817f 	beq.w	800193e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001640:	4ba7      	ldr	r3, [pc, #668]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800164c:	4ba4      	ldr	r3, [pc, #656]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d173      	bne.n	8001740 <HAL_RCC_OscConfig+0x430>
 8001658:	4ba1      	ldr	r3, [pc, #644]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001664:	d16c      	bne.n	8001740 <HAL_RCC_OscConfig+0x430>
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001678:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d102      	bne.n	8001696 <HAL_RCC_OscConfig+0x386>
 8001690:	4b93      	ldr	r3, [pc, #588]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	e013      	b.n	80016be <HAL_RCC_OscConfig+0x3ae>
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016ba:	4b89      	ldr	r3, [pc, #548]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80016c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80016c8:	fa92 f2a2 	rbit	r2, r2
 80016cc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80016d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80016d4:	fab2 f282 	clz	r2, r2
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f002 021f 	and.w	r2, r2, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00a      	beq.n	8001706 <HAL_RCC_OscConfig+0x3f6>
 80016f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d002      	beq.n	8001706 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f000 be52 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800170e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001712:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	21f8      	movs	r1, #248	@ 0xf8
 800171c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001724:	fa91 f1a1 	rbit	r1, r1
 8001728:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800172c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001730:	fab1 f181 	clz	r1, r1
 8001734:	b2c9      	uxtb	r1, r1
 8001736:	408b      	lsls	r3, r1
 8001738:	4969      	ldr	r1, [pc, #420]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e0fe      	b.n	800193e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001744:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8088 	beq.w	8001862 <HAL_RCC_OscConfig+0x552>
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001764:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001772:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	461a      	mov	r2, r3
 800177a:	2301      	movs	r3, #1
 800177c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fcbf 	bl	8001100 <HAL_GetTick>
 8001782:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fcba 	bl	8001100 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d902      	bls.n	800179e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	f000 be06 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80017b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
 80017c8:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x4e6>
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80017e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2202      	movs	r2, #2
 80017f8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80017fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001800:	fa92 f2a2 	rbit	r2, r2
 8001804:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001808:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0af      	beq.n	8001788 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001834:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	21f8      	movs	r1, #248	@ 0xf8
 800183e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001846:	fa91 f1a1 	rbit	r1, r1
 800184a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800184e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001852:	fab1 f181 	clz	r1, r1
 8001856:	b2c9      	uxtb	r1, r1
 8001858:	408b      	lsls	r3, r1
 800185a:	4921      	ldr	r1, [pc, #132]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e06d      	b.n	800193e <HAL_RCC_OscConfig+0x62e>
 8001862:	2301      	movs	r3, #1
 8001864:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001874:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001882:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fc37 	bl	8001100 <HAL_GetTick>
 8001892:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fc32 	bl	8001100 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d902      	bls.n	80018ae <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f000 bd7e 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80018c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5d4>
 80018d8:	4b01      	ldr	r3, [pc, #4]	@ (80018e0 <HAL_RCC_OscConfig+0x5d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	e016      	b.n	800190c <HAL_RCC_OscConfig+0x5fc>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001908:	4bbf      	ldr	r3, [pc, #764]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	2202      	movs	r2, #2
 800190e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001912:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001916:	fa92 f2a2 	rbit	r2, r2
 800191a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800191e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0220 	orr.w	r2, r2, #32
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ac      	bne.n	8001898 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8113 	beq.w	8001b7a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001958:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x74e>
 8001964:	2301      	movs	r3, #1
 8001966:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001976:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4ba2      	ldr	r3, [pc, #648]	@ (8001c0c <HAL_RCC_OscConfig+0x8fc>)
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	461a      	mov	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fbb7 	bl	8001100 <HAL_GetTick>
 8001992:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fbb2 	bl	8001100 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d902      	bls.n	80019ae <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f000 bcfe 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019ce:	2202      	movs	r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f2a3 	rbit	r2, r3
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	6019      	str	r1, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f1a3 	rbit	r1, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a34:	6019      	str	r1, [r3, #0]
  return result;
 8001a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d09d      	beq.n	8001998 <HAL_RCC_OscConfig+0x688>
 8001a5c:	e08d      	b.n	8001b7a <HAL_RCC_OscConfig+0x86a>
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a80:	601a      	str	r2, [r3, #0]
  return result;
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b5d      	ldr	r3, [pc, #372]	@ (8001c0c <HAL_RCC_OscConfig+0x8fc>)
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fb2e 	bl	8001100 <HAL_GetTick>
 8001aa4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fb29 	bl	8001100 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d902      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	f000 bc75 	b.w	80023aa <HAL_RCC_OscConfig+0x109a>
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ac8:	2202      	movs	r2, #2
 8001aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ade:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b38:	2102      	movs	r1, #2
 8001b3a:	6019      	str	r1, [r3, #0]
 8001b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f1a3 	rbit	r1, r3
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b52:	6019      	str	r1, [r3, #0]
  return result;
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d197      	bne.n	8001aaa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 81a5 	beq.w	8001eda <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <HAL_RCC_OscConfig+0x8f8>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_RCC_OscConfig+0x900>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_OscConfig+0x900>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <HAL_RCC_OscConfig+0x900>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fa8a 	bl	8001100 <HAL_GetTick>
 8001bec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e010      	b.n	8001c14 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fa85 	bl	8001100 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	@ 0x64
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e3d1      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	10908120 	.word	0x10908120
 8001c10:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	4b8d      	ldr	r3, [pc, #564]	@ (8001e4c <HAL_RCC_OscConfig+0xb3c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0e8      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x92e>
 8001c30:	4b87      	ldr	r3, [pc, #540]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a86      	ldr	r2, [pc, #536]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e035      	b.n	8001caa <HAL_RCC_OscConfig+0x99a>
 8001c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x958>
 8001c4e:	4b80      	ldr	r3, [pc, #512]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a7f      	ldr	r2, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	e020      	b.n	8001caa <HAL_RCC_OscConfig+0x99a>
 8001c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x982>
 8001c78:	4b75      	ldr	r3, [pc, #468]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a74      	ldr	r2, [pc, #464]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	4b72      	ldr	r3, [pc, #456]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a71      	ldr	r2, [pc, #452]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x99a>
 8001c92:	4b6f      	ldr	r3, [pc, #444]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8081 	beq.w	8001dbe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fa20 	bl	8001100 <HAL_GetTick>
 8001cc0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e00b      	b.n	8001cde <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff fa1b 	bl	8001100 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e365      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 8001cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_OscConfig+0xa3a>
 8001d44:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	e013      	b.n	8001d72 <HAL_RCC_OscConfig+0xa62>
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d68:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d76:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	6011      	str	r1, [r2, #0]
 8001d7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d82:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fa92 f1a2 	rbit	r1, r2
 8001d8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d90:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d94:	6011      	str	r1, [r2, #0]
  return result;
 8001d96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d9a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fab2 f282 	clz	r2, r2
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f002 021f 	and.w	r2, r2, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f202 	lsl.w	r2, r1, r2
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d084      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x9b6>
 8001dbc:	e083      	b.n	8001ec6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f99f 	bl	8001100 <HAL_GetTick>
 8001dc2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f99a 	bl	8001100 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e2e4      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 8001de0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e14:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e22:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e26:	601a      	str	r2, [r3, #0]
  return result;
 8001e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0xb44>
 8001e46:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_RCC_OscConfig+0xb40>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	e017      	b.n	8001e7c <HAL_RCC_OscConfig+0xb6c>
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e58:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e64:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e72:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4bb3      	ldr	r3, [pc, #716]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e80:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e84:	2102      	movs	r1, #2
 8001e86:	6011      	str	r1, [r2, #0]
 8001e88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e8c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	fa92 f1a2 	rbit	r1, r2
 8001e96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e9a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001e9e:	6011      	str	r1, [r2, #0]
  return result;
 8001ea0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ea4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	fab2 f282 	clz	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f002 021f 	and.w	r2, r2, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d180      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b9e      	ldr	r3, [pc, #632]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a9d      	ldr	r2, [pc, #628]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 825e 	beq.w	80023a8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b96      	ldr	r3, [pc, #600]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	f000 821f 	beq.w	8002338 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	f040 8170 	bne.w	80021ec <HAL_RCC_OscConfig+0xedc>
 8001f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f10:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f30:	601a      	str	r2, [r3, #0]
  return result;
 8001f32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f3a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2300      	movs	r3, #0
 8001f50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f8d5 	bl	8001100 <HAL_GetTick>
 8001f56:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8d0 	bl	8001100 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e21c      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 8001f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f82:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f94:	601a      	str	r2, [r3, #0]
  return result;
 8001f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0xcaa>
 8001fb4:	4b64      	ldr	r3, [pc, #400]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e027      	b.n	800200a <HAL_RCC_OscConfig+0xcfa>
 8001fba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fbe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fcc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fda:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800200e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002012:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002016:	6011      	str	r1, [r2, #0]
 8002018:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800201c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	fa92 f1a2 	rbit	r1, r2
 8002026:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800202a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800202e:	6011      	str	r1, [r2, #0]
  return result;
 8002030:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002034:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f002 021f 	and.w	r2, r2, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d182      	bne.n	8001f5c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002056:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	4937      	ldr	r1, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 800206c:	4313      	orrs	r3, r2
 800206e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002070:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a19      	ldr	r1, [r3, #32]
 8002084:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002088:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	430b      	orrs	r3, r1
 8002092:	492d      	ldr	r1, [pc, #180]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 8002098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020bc:	601a      	str	r2, [r3, #0]
  return result;
 80020be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f80f 	bl	8001100 <HAL_GetTick>
 80020e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e6:	e009      	b.n	80020fc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff f80a 	bl	8001100 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e156      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002104:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002120:	601a      	str	r2, [r3, #0]
  return result;
 8002122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002126:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800212a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0xe3c>
 8002140:	4b01      	ldr	r3, [pc, #4]	@ (8002148 <HAL_RCC_OscConfig+0xe38>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e02a      	b.n	800219c <HAL_RCC_OscConfig+0xe8c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002150:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002176:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800217a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002184:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002192:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b86      	ldr	r3, [pc, #536]	@ (80023b4 <HAL_RCC_OscConfig+0x10a4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ae:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fa92 f1a2 	rbit	r1, r2
 80021b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021bc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021c6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f43f af7f 	beq.w	80020e8 <HAL_RCC_OscConfig+0xdd8>
 80021ea:	e0dd      	b.n	80023a8 <HAL_RCC_OscConfig+0x1098>
 80021ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800221a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002226:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2300      	movs	r3, #0
 8002230:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe ff65 	bl	8001100 <HAL_GetTick>
 8002236:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	e009      	b.n	8002250 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff60 	bl	8001100 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0ac      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002274:	601a      	str	r2, [r3, #0]
  return result;
 8002276:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800227e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_RCC_OscConfig+0xf8a>
 8002294:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_OscConfig+0x10a4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e027      	b.n	80022ea <HAL_RCC_OscConfig+0xfda>
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <HAL_RCC_OscConfig+0x10a4>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022ee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80022f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022f6:	6011      	str	r1, [r2, #0]
 80022f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	fa92 f1a2 	rbit	r1, r2
 8002306:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800230a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800230e:	6011      	str	r1, [r2, #0]
  return result;
 8002310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002314:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d182      	bne.n	800223c <HAL_RCC_OscConfig+0xf2c>
 8002336:	e037      	b.n	80023a8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e02e      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_OscConfig+0x10a4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_RCC_OscConfig+0x10a4>)
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800235c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002360:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002368:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	d117      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002378:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002388:	429a      	cmp	r2, r3
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800238c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09e      	sub	sp, #120	@ 0x78
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e162      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b90      	ldr	r3, [pc, #576]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b8d      	ldr	r3, [pc, #564]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	498b      	ldr	r1, [pc, #556]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b89      	ldr	r3, [pc, #548]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e14a      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b82      	ldr	r3, [pc, #520]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	497f      	ldr	r1, [pc, #508]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80dc 	beq.w	80025e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d13c      	bne.n	80024ae <HAL_RCC_ClockConfig+0xf6>
 8002434:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_RCC_ClockConfig+0xa6>
 8002458:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e00f      	b.n	800247e <HAL_RCC_ClockConfig+0xc6>
 800245e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	667b      	str	r3, [r7, #100]	@ 0x64
 800246c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002470:	663b      	str	r3, [r7, #96]	@ 0x60
 8002472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800247a:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002482:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002486:	fa92 f2a2 	rbit	r2, r2
 800248a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800248c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0220 	orr.w	r2, r2, #32
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f002 021f 	and.w	r2, r2, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d17b      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0f3      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d13c      	bne.n	8002530 <HAL_RCC_ClockConfig+0x178>
 80024b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x128>
 80024da:	4b4f      	ldr	r3, [pc, #316]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e00f      	b.n	8002500 <HAL_RCC_ClockConfig+0x148>
 80024e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80024f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fc:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002504:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800250e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13a      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b2      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
 8002530:	2302      	movs	r3, #2
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e00d      	b.n	8002574 <HAL_RCC_ClockConfig+0x1bc>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	2202      	movs	r2, #2
 8002576:	61ba      	str	r2, [r7, #24]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	617a      	str	r2, [r7, #20]
  return result;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e079      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	491a      	ldr	r1, [pc, #104]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fda4 	bl	8001100 <HAL_GetTick>
 80025b8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fda0 	bl	8001100 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e061      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d214      	bcs.n	800261c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4906      	ldr	r1, [pc, #24]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e040      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	491a      	ldr	r1, [pc, #104]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4912      	ldr	r1, [pc, #72]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800265a:	f000 f829 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002668:	22f0      	movs	r2, #240	@ 0xf0
 800266a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	60fa      	str	r2, [r7, #12]
  return result;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	40d3      	lsrs	r3, r2
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	fa21 f303 	lsr.w	r3, r1, r3
 8002686:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_RCC_ClockConfig+0x2f4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fb5c 	bl	8000d4c <HAL_InitTick>
  
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3778      	adds	r7, #120	@ 0x78
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08006d0c 	.word	0x08006d0c
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x98>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x30>
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x36>
 80026de:	e029      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e2:	613b      	str	r3, [r7, #16]
      break;
 80026e4:	e029      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4a15      	ldr	r2, [pc, #84]	@ (8002754 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800270c:	4a0f      	ldr	r2, [pc, #60]	@ (800274c <HAL_RCC_GetSysClockFreq+0x9c>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	fbb2 f2f3 	udiv	r2, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e007      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800271e:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	fbb2 f2f3 	udiv	r2, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	613b      	str	r3, [r7, #16]
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	693b      	ldr	r3, [r7, #16]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	007a1200 	.word	0x007a1200
 8002750:	08006d24 	.word	0x08006d24
 8002754:	08006d34 	.word	0x08006d34

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002776:	f7ff ffef 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002784:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002788:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	fa92 f2a2 	rbit	r2, r2
 8002790:	603a      	str	r2, [r7, #0]
  return result;
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	40d3      	lsrs	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08006d1c 	.word	0x08006d1c

080027b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	220f      	movs	r2, #15
 80027c2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c4:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <HAL_RCC_GetClockConfig+0x60>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e049      	b.n	80028be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f841 	bl	80028c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 f9da 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e04f      	b.n	8002994 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a23      	ldr	r2, [pc, #140]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01d      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291e:	d018      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <HAL_TIM_Base_Start_IT+0xd0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIM_Base_Start_IT+0x76>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d115      	bne.n	800297e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d015      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0xb4>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296a:	d011      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297c:	e008      	b.n	8002990 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e000      	b.n	8002992 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40013400 	.word	0x40013400
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40015000 	.word	0x40015000
 80029b8:	00010007 	.word	0x00010007

080029bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d020      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0202 	mvn.w	r2, #2
 80029f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8e4 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8d6 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f8e7 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0204 	mvn.w	r2, #4
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8be 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8b0 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8c1 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d020      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f898 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f88a 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f89b 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0210 	mvn.w	r2, #16
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f872 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f864 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f875 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0201 	mvn.w	r2, #1
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f8d2 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f916 	bl	8002d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f90e 	bl	8002d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f834 	bl	8002bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0220 	mvn.w	r2, #32
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8d6 	bl	8002d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a48      	ldr	r2, [pc, #288]	@ (8002d44 <TIM_Base_SetConfig+0x134>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2e:	d00f      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a45      	ldr	r2, [pc, #276]	@ (8002d48 <TIM_Base_SetConfig+0x138>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a44      	ldr	r2, [pc, #272]	@ (8002d4c <TIM_Base_SetConfig+0x13c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a43      	ldr	r2, [pc, #268]	@ (8002d50 <TIM_Base_SetConfig+0x140>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a42      	ldr	r2, [pc, #264]	@ (8002d54 <TIM_Base_SetConfig+0x144>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a37      	ldr	r2, [pc, #220]	@ (8002d44 <TIM_Base_SetConfig+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01f      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c70:	d01b      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <TIM_Base_SetConfig+0x138>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d017      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a33      	ldr	r2, [pc, #204]	@ (8002d4c <TIM_Base_SetConfig+0x13c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a32      	ldr	r2, [pc, #200]	@ (8002d50 <TIM_Base_SetConfig+0x140>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00f      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a32      	ldr	r2, [pc, #200]	@ (8002d58 <TIM_Base_SetConfig+0x148>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <TIM_Base_SetConfig+0x14c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <TIM_Base_SetConfig+0x150>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x9a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d54 <TIM_Base_SetConfig+0x144>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <TIM_Base_SetConfig+0x134>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a19      	ldr	r2, [pc, #100]	@ (8002d50 <TIM_Base_SetConfig+0x140>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <TIM_Base_SetConfig+0x148>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <TIM_Base_SetConfig+0x14c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <TIM_Base_SetConfig+0x150>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x100>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a12      	ldr	r2, [pc, #72]	@ (8002d54 <TIM_Base_SetConfig+0x144>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
  }
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40013400 	.word	0x40013400
 8002d54:	40015000 	.word	0x40015000
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800

08002d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002da6:	f3ef 8305 	mrs	r3, IPSR
 8002daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db2:	f3ef 8310 	mrs	r3, PRIMASK
 8002db6:	607b      	str	r3, [r7, #4]
  return(result);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <osKernelInitialize+0x32>
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <osKernelInitialize+0x64>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d109      	bne.n	8002dda <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dca:	603b      	str	r3, [r7, #0]
  return(result);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002dd2:	f06f 0305 	mvn.w	r3, #5
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00c      	b.n	8002df4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dda:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <osKernelInitialize+0x64>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <osKernelInitialize+0x64>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e002      	b.n	8002df4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002df4:	68fb      	ldr	r3, [r7, #12]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200000ec 	.word	0x200000ec

08002e08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e0e:	f3ef 8305 	mrs	r3, IPSR
 8002e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <osKernelStart+0x32>
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <osKernelStart+0x64>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d109      	bne.n	8002e42 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e32:	603b      	str	r3, [r7, #0]
  return(result);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e3a:	f06f 0305 	mvn.w	r3, #5
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e00e      	b.n	8002e60 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <osKernelStart+0x64>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <osKernelStart+0x64>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e50:	f001 fa74 	bl	800433c <vTaskStartScheduler>
      stat = osOK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e002      	b.n	8002e60 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200000ec 	.word	0x200000ec

08002e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b092      	sub	sp, #72	@ 0x48
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e80:	f3ef 8305 	mrs	r3, IPSR
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 8094 	bne.w	8002fb6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	623b      	str	r3, [r7, #32]
  return(result);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 808d 	bne.w	8002fb6 <osThreadNew+0x146>
 8002e9c:	4b48      	ldr	r3, [pc, #288]	@ (8002fc0 <osThreadNew+0x150>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d106      	bne.n	8002eb2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ea8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 8082 	bne.w	8002fb6 <osThreadNew+0x146>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07e      	beq.n	8002fb6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002ebc:	2318      	movs	r3, #24
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002ec4:	f107 031b 	add.w	r3, r7, #27
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d045      	beq.n	8002f62 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <osThreadNew+0x74>
        name = attr->name;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <osThreadNew+0x9a>
 8002ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efa:	2b38      	cmp	r3, #56	@ 0x38
 8002efc:	d805      	bhi.n	8002f0a <osThreadNew+0x9a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <osThreadNew+0x9e>
        return (NULL);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e054      	b.n	8002fb8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <osThreadNew+0xd4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2bab      	cmp	r3, #171	@ 0xab
 8002f2c:	d90a      	bls.n	8002f44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <osThreadNew+0xd4>
        mem = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f42:	e010      	b.n	8002f66 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <osThreadNew+0xf6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <osThreadNew+0xf6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <osThreadNew+0xf6>
          mem = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f60:	e001      	b.n	8002f66 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d110      	bne.n	8002f8e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f74:	9202      	str	r2, [sp, #8]
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fe80 	bl	8003c88 <xTaskCreateStatic>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e013      	b.n	8002fb6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d110      	bne.n	8002fb6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fece 	bl	8003d48 <xTaskCreate>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <osThreadNew+0x146>
          hTask = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fb6:	697b      	ldr	r3, [r7, #20]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3738      	adds	r7, #56	@ 0x38
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200000ec 	.word	0x200000ec

08002fc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fcc:	f3ef 8305 	mrs	r3, IPSR
 8002fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <osDelay+0x34>
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <osDelay+0x58>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d109      	bne.n	8003000 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fec:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <osDelay+0x3c>
    stat = osErrorISR;
 8002ff8:	f06f 0305 	mvn.w	r3, #5
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e007      	b.n	8003010 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <osDelay+0x4c>
      vTaskDelay(ticks);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f001 f808 	bl	8004020 <vTaskDelay>
    }
  }

  return (stat);
 8003010:	697b      	ldr	r3, [r7, #20]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000ec 	.word	0x200000ec

08003020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a07      	ldr	r2, [pc, #28]	@ (800304c <vApplicationGetIdleTaskMemory+0x2c>)
 8003030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4a06      	ldr	r2, [pc, #24]	@ (8003050 <vApplicationGetIdleTaskMemory+0x30>)
 8003036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	601a      	str	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200000f0 	.word	0x200000f0
 8003050:	2000019c 	.word	0x2000019c

08003054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a07      	ldr	r2, [pc, #28]	@ (8003080 <vApplicationGetTimerTaskMemory+0x2c>)
 8003064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a06      	ldr	r2, [pc, #24]	@ (8003084 <vApplicationGetTimerTaskMemory+0x30>)
 800306a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	2000039c 	.word	0x2000039c
 8003084:	20000448 	.word	0x20000448

08003088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 0208 	add.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0208 	add.w	r2, r3, #8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 0208 	add.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d103      	bne.n	800314a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e00c      	b.n	8003164 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3308      	adds	r3, #8
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e002      	b.n	8003158 <vListInsert+0x2e>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	429a      	cmp	r2, r3
 8003162:	d2f6      	bcs.n	8003152 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6852      	ldr	r2, [r2, #4]
 80031bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d103      	bne.n	80031d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800321c:	f002 fa8c 	bl	8005738 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	3b01      	subs	r3, #1
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	22ff      	movs	r2, #255	@ 0xff
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	22ff      	movs	r2, #255	@ 0xff
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d114      	bne.n	800329c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01a      	beq.n	80032b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3310      	adds	r3, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fb4c 	bl	800491c <xTaskRemoveFromEventList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <xQueueGenericReset+0xd0>)
 800328c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	e009      	b.n	80032b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3310      	adds	r3, #16
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fef1 	bl	8003088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3324      	adds	r3, #36	@ 0x24
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff feec 	bl	8003088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032b0:	f002 fa74 	bl	800579c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032b4:	2301      	movs	r3, #1
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	@ 0x38
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <xQueueGenericCreateStatic+0x56>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <xQueueGenericCreateStatic+0x5a>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <xQueueGenericCreateStatic+0x5c>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	623b      	str	r3, [r7, #32]
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <xQueueGenericCreateStatic+0x84>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <xQueueGenericCreateStatic+0x88>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <xQueueGenericCreateStatic+0x8a>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	61fb      	str	r3, [r7, #28]
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800336a:	2350      	movs	r3, #80	@ 0x50
 800336c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b50      	cmp	r3, #80	@ 0x50
 8003372:	d00b      	beq.n	800338c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61bb      	str	r3, [r7, #24]
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800339e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f805 	bl	80033bc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3730      	adds	r7, #48	@ 0x30
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e002      	b.n	80033de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ea:	2101      	movs	r1, #1
 80033ec:	69b8      	ldr	r0, [r7, #24]
 80033ee:	f7ff feff 	bl	80031f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	@ 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <xQueueGenericSend+0x34>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <xQueueGenericSend+0x42>
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <xQueueGenericSend+0x46>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <xQueueGenericSend+0x48>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <xQueueGenericSend+0x64>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d103      	bne.n	8003476 <xQueueGenericSend+0x72>
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <xQueueGenericSend+0x76>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <xQueueGenericSend+0x78>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <xQueueGenericSend+0x94>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	623b      	str	r3, [r7, #32]
}
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003498:	f001 fc20 	bl	8004cdc <xTaskGetSchedulerState>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <xQueueGenericSend+0xa4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <xQueueGenericSend+0xa8>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <xQueueGenericSend+0xaa>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <xQueueGenericSend+0xc6>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	61fb      	str	r3, [r7, #28]
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	e7fd      	b.n	80034c6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ca:	f002 f935 	bl	8005738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <xQueueGenericSend+0xdc>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d129      	bne.n	8003534 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034e6:	f000 fa0d 	bl	8003904 <prvCopyDataToQueue>
 80034ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	3324      	adds	r3, #36	@ 0x24
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fa0f 	bl	800491c <xTaskRemoveFromEventList>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003504:	4b3f      	ldr	r3, [pc, #252]	@ (8003604 <xQueueGenericSend+0x200>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	e00a      	b.n	800352c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800351c:	4b39      	ldr	r3, [pc, #228]	@ (8003604 <xQueueGenericSend+0x200>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800352c:	f002 f936 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003530:	2301      	movs	r3, #1
 8003532:	e063      	b.n	80035fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800353a:	f002 f92f 	bl	800579c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800353e:	2300      	movs	r3, #0
 8003540:	e05c      	b.n	80035fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fa3b 	bl	80049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003556:	f002 f921 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800355a:	f000 ff81 	bl	8004460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800355e:	f002 f8eb 	bl	8005738 <vPortEnterCritical>
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003568:	b25b      	sxtb	r3, r3
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d103      	bne.n	8003578 <xQueueGenericSend+0x174>
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357e:	b25b      	sxtb	r3, r3
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d103      	bne.n	800358e <xQueueGenericSend+0x18a>
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800358e:	f002 f905 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003592:	1d3a      	adds	r2, r7, #4
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fa2a 	bl	80049f4 <xTaskCheckForTimeOut>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d124      	bne.n	80035f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035a8:	f000 faa4 	bl	8003af4 <prvIsQueueFull>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d018      	beq.n	80035e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	3310      	adds	r3, #16
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 f95c 	bl	8004878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035c2:	f000 fa2f 	bl	8003a24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035c6:	f000 ff59 	bl	800447c <xTaskResumeAll>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f af7c 	bne.w	80034ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <xQueueGenericSend+0x200>)
 80035d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	e772      	b.n	80034ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e6:	f000 fa1d 	bl	8003a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ea:	f000 ff47 	bl	800447c <xTaskResumeAll>
 80035ee:	e76c      	b.n	80034ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035f2:	f000 fa17 	bl	8003a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035f6:	f000 ff41 	bl	800447c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035fa:	2300      	movs	r3, #0
		}
	}
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3738      	adds	r7, #56	@ 0x38
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	@ 0x38
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <xQueueGenericSendFromISR+0x3e>
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <xQueueGenericSendFromISR+0x42>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <xQueueGenericSendFromISR+0x44>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d103      	bne.n	8003676 <xQueueGenericSendFromISR+0x6e>
 800366e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <xQueueGenericSendFromISR+0x72>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericSendFromISR+0x74>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61fb      	str	r3, [r7, #28]
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003698:	f002 f92e 	bl	80058f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800369c:	f3ef 8211 	mrs	r2, BASEPRI
 80036a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61ba      	str	r2, [r7, #24]
 80036b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <xQueueGenericSendFromISR+0xc2>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d12c      	bne.n	8003724 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036da:	f000 f913 	bl	8003904 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036de:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d112      	bne.n	800370e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d016      	beq.n	800371e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f911 	bl	800491c <xTaskRemoveFromEventList>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e007      	b.n	800371e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800370e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003712:	3301      	adds	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	b25a      	sxtb	r2, r3
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003722:	e001      	b.n	8003728 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003732:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003736:	4618      	mov	r0, r3
 8003738:	3738      	adds	r7, #56	@ 0x38
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	@ 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <xQueueReceive+0x32>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	623b      	str	r3, [r7, #32]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <xQueueReceive+0x40>
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <xQueueReceive+0x44>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <xQueueReceive+0x46>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <xQueueReceive+0x62>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	61fb      	str	r3, [r7, #28]
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	e7fd      	b.n	800379e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a2:	f001 fa9b 	bl	8004cdc <xTaskGetSchedulerState>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <xQueueReceive+0x72>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <xQueueReceive+0x76>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueReceive+0x78>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <xQueueReceive+0x94>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61bb      	str	r3, [r7, #24]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037d4:	f001 ffb0 	bl	8005738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01f      	beq.n	8003824 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037e8:	f000 f8f6 	bl	80039d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	3310      	adds	r3, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f001 f88b 	bl	800491c <xTaskRemoveFromEventList>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800380c:	4b3c      	ldr	r3, [pc, #240]	@ (8003900 <xQueueReceive+0x1c0>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800381c:	f001 ffbe 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	e069      	b.n	80038f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800382a:	f001 ffb7 	bl	800579c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800382e:	2300      	movs	r3, #0
 8003830:	e062      	b.n	80038f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003838:	f107 0310 	add.w	r3, r7, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f8c3 	bl	80049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003846:	f001 ffa9 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800384a:	f000 fe09 	bl	8004460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800384e:	f001 ff73 	bl	8005738 <vPortEnterCritical>
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d103      	bne.n	8003868 <xQueueReceive+0x128>
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d103      	bne.n	800387e <xQueueReceive+0x13e>
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800387e:	f001 ff8d 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003882:	1d3a      	adds	r2, r7, #4
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f8b2 	bl	80049f4 <xTaskCheckForTimeOut>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d123      	bne.n	80038de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003898:	f000 f916 	bl	8003ac8 <prvIsQueueEmpty>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	3324      	adds	r3, #36	@ 0x24
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ffe4 	bl	8004878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b2:	f000 f8b7 	bl	8003a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038b6:	f000 fde1 	bl	800447c <xTaskResumeAll>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d189      	bne.n	80037d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <xQueueReceive+0x1c0>)
 80038c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	e780      	b.n	80037d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d4:	f000 f8a6 	bl	8003a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038d8:	f000 fdd0 	bl	800447c <xTaskResumeAll>
 80038dc:	e77a      	b.n	80037d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e0:	f000 f8a0 	bl	8003a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038e4:	f000 fdca 	bl	800447c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ea:	f000 f8ed 	bl	8003ac8 <prvIsQueueEmpty>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f43f af6f 	beq.w	80037d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	@ 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d14d      	bne.n	80039c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f9f2 	bl	8004d18 <xTaskPriorityDisinherit>
 8003934:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	e043      	b.n	80039c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d119      	bne.n	8003978 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6898      	ldr	r0, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	461a      	mov	r2, r3
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	f002 fbdd 	bl	800610e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	441a      	add	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d32b      	bcc.n	80039c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e026      	b.n	80039c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68d8      	ldr	r0, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	461a      	mov	r2, r3
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	f002 fbc3 	bl	800610e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	425b      	negs	r3, r3
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d207      	bcs.n	80039b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	425b      	negs	r3, r3
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d105      	bne.n	80039c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039ce:	697b      	ldr	r3, [r7, #20]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	441a      	add	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d303      	bcc.n	8003a0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68d9      	ldr	r1, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	461a      	mov	r2, r3
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f002 fb79 	bl	800610e <memcpy>
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a2c:	f001 fe84 	bl	8005738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a38:	e011      	b.n	8003a5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3324      	adds	r3, #36	@ 0x24
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ff68 	bl	800491c <xTaskRemoveFromEventList>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a52:	f001 f843 	bl	8004adc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dce9      	bgt.n	8003a3a <prvUnlockQueue+0x16>
 8003a66:	e000      	b.n	8003a6a <prvUnlockQueue+0x46>
					break;
 8003a68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	22ff      	movs	r2, #255	@ 0xff
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a72:	f001 fe93 	bl	800579c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a76:	f001 fe5f 	bl	8005738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a82:	e011      	b.n	8003aa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d012      	beq.n	8003ab2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3310      	adds	r3, #16
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 ff43 	bl	800491c <xTaskRemoveFromEventList>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a9c:	f001 f81e 	bl	8004adc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003aa0:	7bbb      	ldrb	r3, [r7, #14]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	dce9      	bgt.n	8003a84 <prvUnlockQueue+0x60>
 8003ab0:	e000      	b.n	8003ab4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ab2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	22ff      	movs	r2, #255	@ 0xff
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003abc:	f001 fe6e 	bl	800579c <vPortExitCritical>
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad0:	f001 fe32 	bl	8005738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e001      	b.n	8003ae6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ae6:	f001 fe59 	bl	800579c <vPortExitCritical>

	return xReturn;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003afc:	f001 fe1c 	bl	8005738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d102      	bne.n	8003b12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e001      	b.n	8003b16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b16:	f001 fe41 	bl	800579c <vPortExitCritical>

	return xReturn;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e014      	b.n	8003b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b34:	4a0f      	ldr	r2, [pc, #60]	@ (8003b74 <vQueueAddToRegistry+0x50>)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b40:	490c      	ldr	r1, [pc, #48]	@ (8003b74 <vQueueAddToRegistry+0x50>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <vQueueAddToRegistry+0x50>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b56:	e006      	b.n	8003b66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	d9e7      	bls.n	8003b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000848 	.word	0x20000848

08003b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b88:	f001 fdd6 	bl	8005738 <vPortEnterCritical>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d103      	bne.n	8003ba2 <vQueueWaitForMessageRestricted+0x2a>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d103      	bne.n	8003bb8 <vQueueWaitForMessageRestricted+0x40>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bb8:	f001 fdf0 	bl	800579c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3324      	adds	r3, #36	@ 0x24
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fe79 	bl	80048c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	f7ff ff26 	bl	8003a24 <prvUnlockQueue>
	}
 8003bd8:	bf00      	nop
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <task_set_DEADLINE>:
	 * Place the task represented by pxTCB into the appropriate ready list for
	 * the task.  It is inserted at the end of the list.
	 */
	#if ( configUSE_EDFVD_SCHEDULER == 1 )
	    unsigned long task_set_DEADLINE( tskTCB * pxTCB )
	    {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	        uint32_t absdeadline;
	        if(pxTCB->pcTaskName[0]=='I' && pxTCB->pcTaskName[1]=='D' && pxTCB->pcTaskName[2]=='L' && pxTCB->pcTaskName[3]=='E')
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bee:	2b49      	cmp	r3, #73	@ 0x49
 8003bf0:	d113      	bne.n	8003c1a <task_set_DEADLINE+0x3a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf8:	2b44      	cmp	r3, #68	@ 0x44
 8003bfa:	d10e      	bne.n	8003c1a <task_set_DEADLINE+0x3a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003c02:	2b4c      	cmp	r3, #76	@ 0x4c
 8003c04:	d109      	bne.n	8003c1a <task_set_DEADLINE+0x3a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8003c0c:	2b45      	cmp	r3, #69	@ 0x45
 8003c0e:	d104      	bne.n	8003c1a <task_set_DEADLINE+0x3a>
	      //if(&xIdleTaskHandle==pxTCB) same as above, looking for idle task
	      //if(pxTCB->xi==2) another way to identify the idle task
	            absdeadline=pxTCB->Deadline;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e01f      	b.n	8003c5a <task_set_DEADLINE+0x7a>
	        else
	            //absdeadline=pxTCB->Deadline + xTickCount;
	        {
	            if(pxTCB->xi==0) // low critical tasks use always normal deadlines
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <task_set_DEADLINE+0x54>
	                absdeadline=pxTCB->Deadline + xTickCount;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <task_set_DEADLINE+0x9c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e012      	b.n	8003c5a <task_set_DEADLINE+0x7a>
	            else
	            {
	             if(mode==high)
 8003c34:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <task_set_DEADLINE+0xa0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <task_set_DEADLINE+0x6c>
	                 absdeadline=pxTCB->Deadline + xTickCount;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <task_set_DEADLINE+0x9c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e006      	b.n	8003c5a <task_set_DEADLINE+0x7a>
	             else
	                 absdeadline=pxTCB->virtualDeadline + xTickCount;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c52:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <task_set_DEADLINE+0x9c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
	            }
	        }
	        if(absdeadline > xTickCount)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <task_set_DEADLINE+0x9c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d901      	bls.n	8003c68 <task_set_DEADLINE+0x88>
	            return (absdeadline);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	e004      	b.n	8003c72 <task_set_DEADLINE+0x92>
	        else
	        {
	            printf("deadline overflow !!!"); // like it can happen by vTaskDelayUntil(%awake_Time,deadline)
 8003c68:	4806      	ldr	r0, [pc, #24]	@ (8003c84 <task_set_DEADLINE+0xa4>)
 8003c6a:	f002 f929 	bl	8005ec0 <iprintf>
	            return UINT32_MAX; // probaly not the best way to handle deadline overflows
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
	        }
	    }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000d78 	.word	0x20000d78
 8003c80:	20000009 	.word	0x20000009
 8003c84:	08006c94 	.word	0x08006c94

08003c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	623b      	str	r3, [r7, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61fb      	str	r3, [r7, #28]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cd2:	23ac      	movs	r3, #172	@ 0xac
 8003cd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2bc4      	cmp	r3, #196	@ 0xc4
 8003cda:	d00b      	beq.n	8003cf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61bb      	str	r3, [r7, #24]
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01f      	beq.n	8003d3a <xTaskCreateStatic+0xb2>
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01c      	beq.n	8003d3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d12:	2300      	movs	r3, #0
 8003d14:	9303      	str	r3, [sp, #12]
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	9302      	str	r3, [sp, #8]
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f852 	bl	8003dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB, pvParameters );
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d34:	f000 f8f4 	bl	8003f20 <prvAddNewTaskToReadyList>
 8003d38:	e001      	b.n	8003d3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
	}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	@ 0x30
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 fe0d 	bl	800597c <pvPortMalloc>
 8003d62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d6a:	20c4      	movs	r0, #196	@ 0xc4
 8003d6c:	f001 fe06 	bl	800597c <pvPortMalloc>
 8003d70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d7e:	e005      	b.n	8003d8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f001 fec3 	bl	8005b0c <vPortFree>
 8003d86:	e001      	b.n	8003d8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	9302      	str	r3, [sp, #8]
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f80f 	bl	8003dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB, pvParameters );
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	69f8      	ldr	r0, [r7, #28]
 8003dba:	f000 f8b1 	bl	8003f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e002      	b.n	8003dca <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dca:	69bb      	ldr	r3, [r7, #24]
	}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	21a5      	movs	r1, #165	@ 0xa5
 8003dee:	f002 f8bc 	bl	8005f6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e012      	b.n	8003e5a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	7819      	ldrb	r1, [r3, #0]
 8003e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	3334      	adds	r3, #52	@ 0x34
 8003e44:	460a      	mov	r2, r1
 8003e46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3301      	adds	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d9e9      	bls.n	8003e34 <prvInitialiseNewTask+0x60>
 8003e60:	e000      	b.n	8003e64 <prvInitialiseNewTask+0x90>
		{
			break;
 8003e62:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	2b37      	cmp	r3, #55	@ 0x37
 8003e70:	d901      	bls.n	8003e76 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e72:	2337      	movs	r3, #55	@ 0x37
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	2200      	movs	r2, #0
 8003e86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff f91b 	bl	80030c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	3318      	adds	r3, #24
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f916 	bl	80030c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	3358      	adds	r3, #88	@ 0x58
 8003ecc:	224c      	movs	r2, #76	@ 0x4c
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f002 f84a 	bl	8005f6a <memset>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <prvInitialiseNewTask+0x140>)
 8003eda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	4a0e      	ldr	r2, [pc, #56]	@ (8003f18 <prvInitialiseNewTask+0x144>)
 8003ee0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f1c <prvInitialiseNewTask+0x148>)
 8003ee6:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	69b8      	ldr	r0, [r7, #24]
 8003ef6:	f001 faeb 	bl	80054d0 <pxPortInitialiseStack>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f0c:	bf00      	nop
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20004d74 	.word	0x20004d74
 8003f18:	20004ddc 	.word	0x20004ddc
 8003f1c:	20004e44 	.word	0x20004e44

08003f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB, void * const pvParameters)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f2a:	f001 fc05 	bl	8005738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f2e:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <prvAddNewTaskToReadyList+0xe8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a34      	ldr	r2, [pc, #208]	@ (8004008 <prvAddNewTaskToReadyList+0xe8>)
 8003f36:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f38:	4b34      	ldr	r3, [pc, #208]	@ (800400c <prvAddNewTaskToReadyList+0xec>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <prvAddNewTaskToReadyList+0x34>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f40:	4a32      	ldr	r2, [pc, #200]	@ (800400c <prvAddNewTaskToReadyList+0xec>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f46:	4b30      	ldr	r3, [pc, #192]	@ (8004008 <prvAddNewTaskToReadyList+0xe8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d110      	bne.n	8003f70 <prvAddNewTaskToReadyList+0x50>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f4e:	f000 fdf7 	bl	8004b40 <prvInitialiseTaskLists>
 8003f52:	e00d      	b.n	8003f70 <prvAddNewTaskToReadyList+0x50>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f54:	4b2e      	ldr	r3, [pc, #184]	@ (8004010 <prvAddNewTaskToReadyList+0xf0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <prvAddNewTaskToReadyList+0x50>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <prvAddNewTaskToReadyList+0xec>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d802      	bhi.n	8003f70 <prvAddNewTaskToReadyList+0x50>
				{
					pxCurrentTCB = pxNewTCB;
 8003f6a:	4a28      	ldr	r2, [pc, #160]	@ (800400c <prvAddNewTaskToReadyList+0xec>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <prvAddNewTaskToReadyList+0xf4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a27      	ldr	r2, [pc, #156]	@ (8004014 <prvAddNewTaskToReadyList+0xf4>)
 8003f78:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <prvAddNewTaskToReadyList+0xf4>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		#if ( configUSE_EDFVD_SCHEDULER == 1 )
			pxNewTCB->Deadline        = *(UBaseType_t*) (pvParameters+ 0); // parai[0]=Deadline
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
			pxNewTCB->virtualDeadline = *(UBaseType_t*) (pvParameters+ 0); // parai[0]=Deadline
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			pxNewTCB->c_low           = *(UBaseType_t*) (pvParameters+ 4); // parai[1]=c_low
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
			pxNewTCB->c_high          = *(UBaseType_t*) (pvParameters+ 8); // parai[2]=c_high
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
			pxNewTCB->xi              = *(UBaseType_t*) (pvParameters+12); // parai[3]=xi
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
			pxNewTCB->VD_is_set       = 0 ;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		#endif

		prvAddTaskToReadyList( pxNewTCB );
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fe0f 	bl	8003be0 <task_set_DEADLINE>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4812      	ldr	r0, [pc, #72]	@ (8004018 <prvAddNewTaskToReadyList+0xf8>)
 8003fd0:	f7ff f8ab 	bl	800312a <vListInsert>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fd4:	f001 fbe2 	bl	800579c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <prvAddNewTaskToReadyList+0xf0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <prvAddNewTaskToReadyList+0xde>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <prvAddNewTaskToReadyList+0xec>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d207      	bcs.n	8003ffe <prvAddNewTaskToReadyList+0xde>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <prvAddNewTaskToReadyList+0xfc>)
 8003ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000d74 	.word	0x20000d74
 800400c:	20000888 	.word	0x20000888
 8004010:	20000d80 	.word	0x20000d80
 8004014:	20000d90 	.word	0x20000d90
 8004018:	20000d30 	.word	0x20000d30
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d018      	beq.n	8004064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004032:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <vTaskDelay+0x64>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <vTaskDelay+0x32>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60bb      	str	r3, [r7, #8]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004052:	f000 fa05 	bl	8004460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004056:	2100      	movs	r1, #0
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 febf 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800405e:	f000 fa0d 	bl	800447c <xTaskResumeAll>
 8004062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <vTaskDelay+0x68>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000d9c 	.word	0x20000d9c
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <check_schedulability>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_EDFVD_SCHEDULER == 1 )
            double check_schedulability(){
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b090      	sub	sp, #64	@ 0x40
 8004090:	af00      	add	r7, sp, #0
                double xd;
                unsigned long it=0;
 8004092:	2300      	movs	r3, #0
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
                double utilization_low_high=0;    // utilization of all c_low  over all high tasks
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
                double utilization_low_low=0;     // utilization of all c_low  over all low  tasks
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
                double utilization_high_high=0;   // utilization of all c_high over all high tasks
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

unsigned long debug=0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
                ListItem_t *pxIterator;
                List_t * pxList=&xReadyTasksListEDFVD;
 80040be:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <check_schedulability+0x1a4>)
 80040c0:	617b      	str	r3, [r7, #20]
                TCB_t *pxTCB;
                for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); it <= pxList->uxNumberOfItems ; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3308      	adds	r3, #8
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	e071      	b.n	80041ae <check_schedulability+0x122>
                {
                    if(it!=0) // skip first one  (xListEnd)
 80040ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d068      	beq.n	80041a2 <check_schedulability+0x116>
                    {
                    pxTCB=pxIterator->pvOwner; debug+=pxTCB->Deadline;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
                        if(pxTCB->xi==1){ // if its a high critical task
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d13c      	bne.n	8004166 <check_schedulability+0xda>
                        utilization_high_high+=((double)(pxTCB->c_high)/(double)pxTCB->Deadline);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc fa06 	bl	8000504 <__aeabi_ui2d>
 80040f8:	4604      	mov	r4, r0
 80040fa:	460d      	mov	r5, r1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc f9fe 	bl	8000504 <__aeabi_ui2d>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4620      	mov	r0, r4
 800410e:	4629      	mov	r1, r5
 8004110:	f7fc fb9c 	bl	800084c <__aeabi_ddiv>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800411c:	f7fc f8b6 	bl	800028c <__adddf3>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        utilization_low_high +=((double)(pxTCB->c_low )/(double)pxTCB->Deadline);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc f9e8 	bl	8000504 <__aeabi_ui2d>
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9e0 	bl	8000504 <__aeabi_ui2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fb7e 	bl	800084c <__aeabi_ddiv>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004158:	f7fc f898 	bl	800028c <__adddf3>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004164:	e01d      	b.n	80041a2 <check_schedulability+0x116>
                        }
                        else{
                        utilization_low_low +=(((double)pxTCB->c_low )/(double)pxTCB->Deadline);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800416c:	4618      	mov	r0, r3
 800416e:	f7fc f9c9 	bl	8000504 <__aeabi_ui2d>
 8004172:	4604      	mov	r4, r0
 8004174:	460d      	mov	r5, r1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f9c1 	bl	8000504 <__aeabi_ui2d>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4620      	mov	r0, r4
 8004188:	4629      	mov	r1, r5
 800418a:	f7fc fb5f 	bl	800084c <__aeabi_ddiv>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004196:	f7fc f879 	bl	800028c <__adddf3>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
                        }
                    }
                    it++;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	3301      	adds	r3, #1
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); it <= pxList->uxNumberOfItems ; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d988      	bls.n	80040ca <check_schedulability+0x3e>
                }

                xd=utilization_low_high/(1-utilization_low_low);
 80041b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	491c      	ldr	r1, [pc, #112]	@ (8004234 <check_schedulability+0x1a8>)
 80041c2:	f7fc f861 	bl	8000288 <__aeabi_dsub>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80041ce:	f7fc fb3d 	bl	800084c <__aeabi_ddiv>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
                // configASSERT(xd<1);

                if(xd * utilization_low_low + utilization_high_high < 1)
 80041da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041e2:	f7fc fa09 	bl	80005f8 <__aeabi_dmul>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041f2:	f7fc f84b 	bl	800028c <__adddf3>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <check_schedulability+0x1a8>)
 8004204:	f7fc fc6a 	bl	8000adc <__aeabi_dcmplt>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <check_schedulability+0x188>
                {
                    // success scheduable
                    return xd;
 800420e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004212:	e003      	b.n	800421c <check_schedulability+0x190>
                }
                else
                {
    //                fprintf(stderr,"not scheduable");
                    return 0; // !!!
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
                }

            };
 800421c:	ec43 2b17 	vmov	d7, r2, r3
 8004220:	eeb0 0a47 	vmov.f32	s0, s14
 8004224:	eef0 0a67 	vmov.f32	s1, s15
 8004228:	3740      	adds	r7, #64	@ 0x40
 800422a:	46bd      	mov	sp, r7
 800422c:	bdb0      	pop	{r4, r5, r7, pc}
 800422e:	bf00      	nop
 8004230:	20000d30 	.word	0x20000d30
 8004234:	3ff00000 	.word	0x3ff00000

08004238 <update_deadlines>:
//                                it++;
//                            }



           void update_deadlines( double xd ){
 8004238:	b580      	push	{r7, lr}
 800423a:	b0b8      	sub	sp, #224	@ 0xe0
 800423c:	af00      	add	r7, sp, #0
 800423e:	ed87 0b00 	vstr	d0, [r7]
                                      ListItem_t *pxIterator;
                                      List_t * pxList=&xReadyTasksListEDFVD;
 8004242:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <update_deadlines+0x100>)
 8004244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                                      TCB_t *pxTCB;
                                      TCB_t temp;
                                      unsigned long int it=0;
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                                      unsigned long int number_of_items=pxList->uxNumberOfItems;
 800424e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0


                                      //for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd );(pxIterator != pxList->xListEnd) && (it != 0); pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

                                      while(it<=pxList->uxNumberOfItems)
 8004258:	e061      	b.n	800431e <update_deadlines+0xe6>
                                      {
                                          it=0;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                                          for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); it <= pxList->uxNumberOfItems ; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004264:	3308      	adds	r3, #8
 8004266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800426a:	e051      	b.n	8004310 <update_deadlines+0xd8>
                                          {
                                              if(it!=0) // skip first one  (xListEnd)
 800426c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d043      	beq.n	80042fc <update_deadlines+0xc4>
                                              {
                                                  pxTCB=pxIterator->pvOwner;
 8004274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                                                  if(pxTCB->xi==1 && (pxTCB->VD_is_set==0) ) // if its a high critical task
 800427e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004282:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d138      	bne.n	80042fc <update_deadlines+0xc4>
 800428a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800428e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d132      	bne.n	80042fc <update_deadlines+0xc4>
                                                  {
                                                      number_of_items=uxListRemove( &( pxTCB->xStateListItem ) ); // take it out
 8004296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe ff7d 	bl	800319c <uxListRemove>
 80042a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
                                                      pxTCB->virtualDeadline=(unsigned long) pxTCB->Deadline * xd; // update virtual deadline
 80042a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f928 	bl	8000504 <__aeabi_ui2d>
 80042b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b8:	f7fc f99e 	bl	80005f8 <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7fc fc32 	bl	8000b2c <__aeabi_d2uiz>
 80042c8:	4602      	mov	r2, r0
 80042ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                                                      pxTCB->VD_is_set=1;
 80042d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042d6:	2201      	movs	r2, #1
 80042d8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                                      listSET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ),task_set_DEADLINE(pxTCB) ); // change value
 80042dc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80042e0:	f7ff fc7e 	bl	8003be0 <task_set_DEADLINE>
 80042e4:	4602      	mov	r2, r0
 80042e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ea:	605a      	str	r2, [r3, #4]
                                                      vListInsert( &(xReadyTasksListEDFVD), &( ( pxTCB )->xStateListItem ) ); // put it in again
 80042ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4810      	ldr	r0, [pc, #64]	@ (8004338 <update_deadlines+0x100>)
 80042f6:	f7fe ff18 	bl	800312a <vListInsert>
                                                  break;
 80042fa:	e010      	b.n	800431e <update_deadlines+0xe6>
                                                  }
                                              } // end of if it
                                              it++;
 80042fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004300:	3301      	adds	r3, #1
 8004302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                                          for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); it <= pxList->uxNumberOfItems ; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800431a:	429a      	cmp	r2, r3
 800431c:	d9a6      	bls.n	800426c <update_deadlines+0x34>
                                      while(it<=pxList->uxNumberOfItems)
 800431e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8004328:	429a      	cmp	r2, r3
 800432a:	d996      	bls.n	800425a <update_deadlines+0x22>
                                           } // end of for
                                      } // end of while
                 } // end of void update_deadlines
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	37e0      	adds	r7, #224	@ 0xe0
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000d30 	.word	0x20000d30

0800433c <vTaskStartScheduler>:




void vTaskStartScheduler( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	@ 0x38
 8004340:	af04      	add	r7, sp, #16
#if ( configUSE_EDFVD_SCHEDULER == 1 )
    double x=0;
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    x=check_schedulability(); // check before idle task is created
 800434e:	f7ff fe9d 	bl	800408c <check_schedulability>
 8004352:	ed87 0b06 	vstr	d0, [r7, #24]
    update_deadlines(x);     // update deadlines_accordingly to x
 8004356:	ed97 0b06 	vldr	d0, [r7, #24]
 800435a:	f7ff ff6d 	bl	8004238 <update_deadlines>
    pxCurrentTCB = (TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( &(xReadyTasksListEDFVD ) );
 800435e:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <vTaskStartScheduler+0xfc>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a35      	ldr	r2, [pc, #212]	@ (800443c <vTaskStartScheduler+0x100>)
 8004366:	6013      	str	r3, [r2, #0]
//
//    fprintf(stderr,"%s: in %s \n",ABC);



    critical_time_instance = pxCurrentTCB->c_low * 1800;
 8004368:	4b34      	ldr	r3, [pc, #208]	@ (800443c <vTaskStartScheduler+0x100>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004370:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	4a31      	ldr	r2, [pc, #196]	@ (8004440 <vTaskStartScheduler+0x104>)
 800437a:	6013      	str	r3, [r2, #0]
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004384:	1d3a      	adds	r2, r7, #4
 8004386:	f107 0108 	add.w	r1, r7, #8
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fe46 	bl	8003020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	460a      	mov	r2, r1
 80043a6:	4927      	ldr	r1, [pc, #156]	@ (8004444 <vTaskStartScheduler+0x108>)
 80043a8:	4827      	ldr	r0, [pc, #156]	@ (8004448 <vTaskStartScheduler+0x10c>)
 80043aa:	f7ff fc6d 	bl	8003c88 <xTaskCreateStatic>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a26      	ldr	r2, [pc, #152]	@ (800444c <vTaskStartScheduler+0x110>)
 80043b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043b4:	4b25      	ldr	r3, [pc, #148]	@ (800444c <vTaskStartScheduler+0x110>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <vTaskStartScheduler+0x86>
		{
			xReturn = pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c0:	e001      	b.n	80043c6 <vTaskStartScheduler+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <vTaskStartScheduler+0x96>
		{
			xReturn = xTimerCreateTimerTask();
 80043cc:	f000 fd60 	bl	8004e90 <xTimerCreateTimerTask>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d11b      	bne.n	8004410 <vTaskStartScheduler+0xd4>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	617b      	str	r3, [r7, #20]
}
 80043ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <vTaskStartScheduler+0x100>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3358      	adds	r3, #88	@ 0x58
 80043f2:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <vTaskStartScheduler+0x114>)
 80043f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043f6:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <vTaskStartScheduler+0x118>)
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043fe:	4b16      	ldr	r3, [pc, #88]	@ (8004458 <vTaskStartScheduler+0x11c>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004404:	4b15      	ldr	r3, [pc, #84]	@ (800445c <vTaskStartScheduler+0x120>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
//		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800440a:	f001 f8f1 	bl	80055f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800440e:	e00f      	b.n	8004430 <vTaskStartScheduler+0xf4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d10b      	bne.n	8004430 <vTaskStartScheduler+0xf4>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	613b      	str	r3, [r7, #16]
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <vTaskStartScheduler+0xf0>
}
 8004430:	bf00      	nop
 8004432:	3728      	adds	r7, #40	@ 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000d30 	.word	0x20000d30
 800443c:	20000888 	.word	0x20000888
 8004440:	20000d44 	.word	0x20000d44
 8004444:	08006cac 	.word	0x08006cac
 8004448:	08004af5 	.word	0x08004af5
 800444c:	20000d98 	.word	0x20000d98
 8004450:	2000001c 	.word	0x2000001c
 8004454:	20000d94 	.word	0x20000d94
 8004458:	20000d80 	.word	0x20000d80
 800445c:	20000d78 	.word	0x20000d78

08004460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <vTaskSuspendAll+0x18>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4a03      	ldr	r2, [pc, #12]	@ (8004478 <vTaskSuspendAll+0x18>)
 800446c:	6013      	str	r3, [r2, #0]
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	20000d9c 	.word	0x20000d9c

0800447c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800448a:	4b3c      	ldr	r3, [pc, #240]	@ (800457c <xTaskResumeAll+0x100>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xTaskResumeAll+0x2e>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	603b      	str	r3, [r7, #0]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044aa:	f001 f945 	bl	8005738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044ae:	4b33      	ldr	r3, [pc, #204]	@ (800457c <xTaskResumeAll+0x100>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4a31      	ldr	r2, [pc, #196]	@ (800457c <xTaskResumeAll+0x100>)
 80044b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b8:	4b30      	ldr	r3, [pc, #192]	@ (800457c <xTaskResumeAll+0x100>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d156      	bne.n	800456e <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004580 <xTaskResumeAll+0x104>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d052      	beq.n	800456e <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044c8:	e023      	b.n	8004512 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004584 <xTaskResumeAll+0x108>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3318      	adds	r3, #24
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fe60 	bl	800319c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fe5b 	bl	800319c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fb7a 	bl	8003be0 <task_set_DEADLINE>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4823      	ldr	r0, [pc, #140]	@ (8004588 <xTaskResumeAll+0x10c>)
 80044fa:	f7fe fe16 	bl	800312a <vListInsert>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <xTaskResumeAll+0x110>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
 800450c:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <xTaskResumeAll+0x114>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004512:	4b1c      	ldr	r3, [pc, #112]	@ (8004584 <xTaskResumeAll+0x108>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1d7      	bne.n	80044ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <xTaskResumeAll+0xa8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004520:	f000 fbb6 	bl	8004c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004524:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <xTaskResumeAll+0x118>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004530:	f000 f844 	bl	80045bc <xTaskIncrementTick>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <xTaskResumeAll+0xc4>
							{
								xYieldPending = pdTRUE;
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <xTaskResumeAll+0x114>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <xTaskResumeAll+0xb4>

						uxPendedTicks = 0;
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <xTaskResumeAll+0x118>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004552:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <xTaskResumeAll+0x114>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <xTaskResumeAll+0xf2>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <xTaskResumeAll+0x11c>)
 8004560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800456e:	f001 f915 	bl	800579c <vPortExitCritical>

	return xAlreadyYielded;
 8004572:	68bb      	ldr	r3, [r7, #8]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000d9c 	.word	0x20000d9c
 8004580:	20000d74 	.word	0x20000d74
 8004584:	20000d1c 	.word	0x20000d1c
 8004588:	20000d30 	.word	0x20000d30
 800458c:	20000888 	.word	0x20000888
 8004590:	20000d88 	.word	0x20000d88
 8004594:	20000d84 	.word	0x20000d84
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <xTaskGetTickCount+0x1c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000d78 	.word	0x20000d78

080045bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c6:	4b50      	ldr	r3, [pc, #320]	@ (8004708 <xTaskIncrementTick+0x14c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8083 	bne.w	80046d6 <xTaskIncrementTick+0x11a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045d0:	4b4e      	ldr	r3, [pc, #312]	@ (800470c <xTaskIncrementTick+0x150>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045d8:	4a4c      	ldr	r2, [pc, #304]	@ (800470c <xTaskIncrementTick+0x150>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d121      	bne.n	8004628 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004710 <xTaskIncrementTick+0x154>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <xTaskIncrementTick+0x4a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	603b      	str	r3, [r7, #0]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xTaskIncrementTick+0x46>
 8004606:	4b42      	ldr	r3, [pc, #264]	@ (8004710 <xTaskIncrementTick+0x154>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	4b41      	ldr	r3, [pc, #260]	@ (8004714 <xTaskIncrementTick+0x158>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3f      	ldr	r2, [pc, #252]	@ (8004710 <xTaskIncrementTick+0x154>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4a3f      	ldr	r2, [pc, #252]	@ (8004714 <xTaskIncrementTick+0x158>)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <xTaskIncrementTick+0x15c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	4a3d      	ldr	r2, [pc, #244]	@ (8004718 <xTaskIncrementTick+0x15c>)
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	f000 fb34 	bl	8004c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004628:	4b3c      	ldr	r3, [pc, #240]	@ (800471c <xTaskIncrementTick+0x160>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d342      	bcc.n	80046b8 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <xTaskIncrementTick+0x154>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <xTaskIncrementTick+0x84>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <xTaskIncrementTick+0x86>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004646:	4b35      	ldr	r3, [pc, #212]	@ (800471c <xTaskIncrementTick+0x160>)
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	601a      	str	r2, [r3, #0]
					break;
 800464e:	e033      	b.n	80046b8 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <xTaskIncrementTick+0x154>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d203      	bcs.n	8004670 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004668:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <xTaskIncrementTick+0x160>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6013      	str	r3, [r2, #0]
						break;
 800466e:	e023      	b.n	80046b8 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fd91 	bl	800319c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	3318      	adds	r3, #24
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fd88 	bl	800319c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f7ff faa7 	bl	8003be0 <task_set_DEADLINE>
 8004692:	4602      	mov	r2, r0
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4820      	ldr	r0, [pc, #128]	@ (8004720 <xTaskIncrementTick+0x164>)
 80046a0:	f7fe fd43 	bl	800312a <vListInsert>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <xTaskIncrementTick+0x168>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3bf      	bcc.n	8004632 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b6:	e7bc      	b.n	8004632 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <xTaskIncrementTick+0x168>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046be:	491a      	ldr	r1, [pc, #104]	@ (8004728 <xTaskIncrementTick+0x16c>)
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d907      	bls.n	80046e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e004      	b.n	80046e0 <xTaskIncrementTick+0x124>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <xTaskIncrementTick+0x170>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	4a13      	ldr	r2, [pc, #76]	@ (800472c <xTaskIncrementTick+0x170>)
 80046de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046e0:	4b13      	ldr	r3, [pc, #76]	@ (8004730 <xTaskIncrementTick+0x174>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <xTaskIncrementTick+0x130>
		{
			xSwitchRequired = pdTRUE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	#if ( configUSE_EDFVD_SCHEDULER == 1 )
		if( pxCurrentTCB != (TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( &(xReadyTasksListEDFVD ) ))
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <xTaskIncrementTick+0x164>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <xTaskIncrementTick+0x168>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
		}
	#endif

	return xSwitchRequired;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000d9c 	.word	0x20000d9c
 800470c:	20000d78 	.word	0x20000d78
 8004710:	20000d14 	.word	0x20000d14
 8004714:	20000d18 	.word	0x20000d18
 8004718:	20000d8c 	.word	0x20000d8c
 800471c:	20000d94 	.word	0x20000d94
 8004720:	20000d30 	.word	0x20000d30
 8004724:	20000888 	.word	0x20000888
 8004728:	2000088c 	.word	0x2000088c
 800472c:	20000d84 	.word	0x20000d84
 8004730:	20000d88 	.word	0x20000d88

08004734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800473a:	4b43      	ldr	r3, [pc, #268]	@ (8004848 <vTaskSwitchContext+0x114>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004742:	4b42      	ldr	r3, [pc, #264]	@ (800484c <vTaskSwitchContext+0x118>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004748:	e078      	b.n	800483c <vTaskSwitchContext+0x108>
		xYieldPending = pdFALSE;
 800474a:	4b40      	ldr	r3, [pc, #256]	@ (800484c <vTaskSwitchContext+0x118>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = xTickCount ;//portGET_RUN_TIME_COUNTER_VALUE();
 8004750:	4b3f      	ldr	r3, [pc, #252]	@ (8004850 <vTaskSwitchContext+0x11c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3f      	ldr	r2, [pc, #252]	@ (8004854 <vTaskSwitchContext+0x120>)
 8004756:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime && job_interrupted==yes)
 8004758:	4b3e      	ldr	r3, [pc, #248]	@ (8004854 <vTaskSwitchContext+0x120>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b3e      	ldr	r3, [pc, #248]	@ (8004858 <vTaskSwitchContext+0x124>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d90d      	bls.n	8004780 <vTaskSwitchContext+0x4c>
 8004764:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <vTaskSwitchContext+0x128>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d109      	bne.n	8004780 <vTaskSwitchContext+0x4c>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800476c:	4b3c      	ldr	r3, [pc, #240]	@ (8004860 <vTaskSwitchContext+0x12c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004772:	4a38      	ldr	r2, [pc, #224]	@ (8004854 <vTaskSwitchContext+0x120>)
 8004774:	6810      	ldr	r0, [r2, #0]
 8004776:	4a38      	ldr	r2, [pc, #224]	@ (8004858 <vTaskSwitchContext+0x124>)
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	1a82      	subs	r2, r0, r2
 800477c:	440a      	add	r2, r1
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
                ulTaskSwitchedInTime = ulTotalRunTime;
 8004780:	4b34      	ldr	r3, [pc, #208]	@ (8004854 <vTaskSwitchContext+0x120>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a34      	ldr	r2, [pc, #208]	@ (8004858 <vTaskSwitchContext+0x124>)
 8004786:	6013      	str	r3, [r2, #0]
                job_interrupted=yes;
 8004788:	4b34      	ldr	r3, [pc, #208]	@ (800485c <vTaskSwitchContext+0x128>)
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
				pxCurrentTCB = (TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( &(xReadyTasksListEDFVD ) );
 800478e:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <vTaskSwitchContext+0x130>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a32      	ldr	r2, [pc, #200]	@ (8004860 <vTaskSwitchContext+0x12c>)
 8004796:	6013      	str	r3, [r2, #0]
				critical_time_instance = ulTotalRunTime +  ((pxCurrentTCB->c_low) - pxCurrentTCB->ulRunTimeCounter);
 8004798:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <vTaskSwitchContext+0x12c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80047a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <vTaskSwitchContext+0x12c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <vTaskSwitchContext+0x120>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4413      	add	r3, r2
 80047ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004868 <vTaskSwitchContext+0x134>)
 80047b0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047b2:	4b2e      	ldr	r3, [pc, #184]	@ (800486c <vTaskSwitchContext+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e011      	b.n	80047de <vTaskSwitchContext+0xaa>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <vTaskSwitchContext+0xa4>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	607b      	str	r3, [r7, #4]
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <vTaskSwitchContext+0xa0>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	4924      	ldr	r1, [pc, #144]	@ (8004870 <vTaskSwitchContext+0x13c>)
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0e3      	beq.n	80047ba <vTaskSwitchContext+0x86>
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <vTaskSwitchContext+0x13c>)
 80047fe:	4413      	add	r3, r2
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3308      	adds	r3, #8
 8004814:	429a      	cmp	r2, r3
 8004816:	d104      	bne.n	8004822 <vTaskSwitchContext+0xee>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <vTaskSwitchContext+0x12c>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4a0f      	ldr	r2, [pc, #60]	@ (800486c <vTaskSwitchContext+0x138>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <vTaskSwitchContext+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3358      	adds	r3, #88	@ 0x58
 8004838:	4a0e      	ldr	r2, [pc, #56]	@ (8004874 <vTaskSwitchContext+0x140>)
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000d9c 	.word	0x20000d9c
 800484c:	20000d88 	.word	0x20000d88
 8004850:	20000d78 	.word	0x20000d78
 8004854:	20000da4 	.word	0x20000da4
 8004858:	20000da0 	.word	0x20000da0
 800485c:	2000000a 	.word	0x2000000a
 8004860:	20000888 	.word	0x20000888
 8004864:	20000d30 	.word	0x20000d30
 8004868:	20000d44 	.word	0x20000d44
 800486c:	20000d7c 	.word	0x20000d7c
 8004870:	2000088c 	.word	0x2000088c
 8004874:	2000001c 	.word	0x2000001c

08004878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048a0:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <vTaskPlaceOnEventList+0x48>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3318      	adds	r3, #24
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe fc3e 	bl	800312a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ae:	2101      	movs	r1, #1
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	f000 fa93 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000888 	.word	0x20000888

080048c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	617b      	str	r3, [r7, #20]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <vTaskPlaceOnEventListRestricted+0x54>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3318      	adds	r3, #24
 80048f4:	4619      	mov	r1, r3
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7fe fbf3 	bl	80030e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f000 fa66 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
	}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000888 	.word	0x20000888

0800491c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60fb      	str	r3, [r7, #12]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3318      	adds	r3, #24
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fc24 	bl	800319c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b17      	ldr	r3, [pc, #92]	@ (80049b4 <xTaskRemoveFromEventList+0x98>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d111      	bne.n	8004980 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fc1b 	bl	800319c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f7ff f93a 	bl	8003be0 <task_set_DEADLINE>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	480f      	ldr	r0, [pc, #60]	@ (80049b8 <xTaskRemoveFromEventList+0x9c>)
 800497a:	f7fe fbd6 	bl	800312a <vListInsert>
 800497e:	e005      	b.n	800498c <xTaskRemoveFromEventList+0x70>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3318      	adds	r3, #24
 8004984:	4619      	mov	r1, r3
 8004986:	480d      	ldr	r0, [pc, #52]	@ (80049bc <xTaskRemoveFromEventList+0xa0>)
 8004988:	f7fe fbab 	bl	80030e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <xTaskRemoveFromEventList+0xa4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	429a      	cmp	r2, r3
 8004998:	d905      	bls.n	80049a6 <xTaskRemoveFromEventList+0x8a>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800499a:	2301      	movs	r3, #1
 800499c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <xTaskRemoveFromEventList+0xa8>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e001      	b.n	80049aa <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		xReturn = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049aa:	697b      	ldr	r3, [r7, #20]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000d9c 	.word	0x20000d9c
 80049b8:	20000d30 	.word	0x20000d30
 80049bc:	20000d1c 	.word	0x20000d1c
 80049c0:	20000888 	.word	0x20000888
 80049c4:	20000d88 	.word	0x20000d88

080049c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <vTaskInternalSetTimeOutState+0x24>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <vTaskInternalSetTimeOutState+0x28>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	605a      	str	r2, [r3, #4]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20000d8c 	.word	0x20000d8c
 80049f0:	20000d78 	.word	0x20000d78

080049f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60fb      	str	r3, [r7, #12]
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a3a:	f000 fe7d 	bl	8005738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <xTaskCheckForTimeOut+0xdc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8004a4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <xTaskCheckForTimeOut+0xe0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <xTaskCheckForTimeOut+0xe0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
				xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e02b      	b.n	8004ac2 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e023      	b.n	8004ac2 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <xTaskCheckForTimeOut+0xe4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d007      	beq.n	8004a96 <xTaskCheckForTimeOut+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e015      	b.n	8004ac2 <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20b      	bcs.n	8004ab8 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff8b 	bl	80049c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e004      	b.n	8004ac2 <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f000 fe6b 	bl	800579c <vPortExitCritical>

	return xReturn;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000d78 	.word	0x20000d78
 8004ad4:	20000888 	.word	0x20000888
 8004ad8:	20000d8c 	.word	0x20000d8c

08004adc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <vTaskMissedYield+0x14>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20000d88 	.word	0x20000d88

08004af4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	portTASK_CALLS_SECURE_FUNCTIONS();

	for( ;; )
	{
		#if ( configUSE_EDFVD_SCHEDULER == 1 )
		  listSET_LIST_ITEM_VALUE( &( ( pxCurrentTCB )->xStateListItem ), ( pxCurrentTCB )->Deadline); // renew it's deadline
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <prvIdleTask+0x3c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <prvIdleTask+0x3c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8004b08:	605a      	str	r2, [r3, #4]
		  mode=low; // set mode low in an idle instants
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <prvIdleTask+0x40>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
		#endif
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b10:	f000 f85a 	bl	8004bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <prvIdleTask+0x44>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d9ef      	bls.n	8004afc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <prvIdleTask+0x48>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
		  listSET_LIST_ITEM_VALUE( &( ( pxCurrentTCB )->xStateListItem ), ( pxCurrentTCB )->Deadline); // renew it's deadline
 8004b2c:	e7e6      	b.n	8004afc <prvIdleTask+0x8>
 8004b2e:	bf00      	nop
 8004b30:	20000888 	.word	0x20000888
 8004b34:	20000009 	.word	0x20000009
 8004b38:	2000088c 	.word	0x2000088c
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e00c      	b.n	8004b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a13      	ldr	r2, [pc, #76]	@ (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fa94 	bl	8003088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b37      	cmp	r3, #55	@ 0x37
 8004b6a:	d9ef      	bls.n	8004b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b6c:	480e      	ldr	r0, [pc, #56]	@ (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b6e:	f7fe fa8b 	bl	8003088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b72:	480e      	ldr	r0, [pc, #56]	@ (8004bac <prvInitialiseTaskLists+0x6c>)
 8004b74:	f7fe fa88 	bl	8003088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b78:	480d      	ldr	r0, [pc, #52]	@ (8004bb0 <prvInitialiseTaskLists+0x70>)
 8004b7a:	f7fe fa85 	bl	8003088 <vListInitialise>
	#if ( configUSE_EDFVD_SCHEDULER == 1 )
		vListInitialise( &xReadyTasksListEDFVD );
 8004b7e:	480d      	ldr	r0, [pc, #52]	@ (8004bb4 <prvInitialiseTaskLists+0x74>)
 8004b80:	f7fe fa82 	bl	8003088 <vListInitialise>
	#endif

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b84:	480c      	ldr	r0, [pc, #48]	@ (8004bb8 <prvInitialiseTaskLists+0x78>)
 8004b86:	f7fe fa7f 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b8a:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <prvInitialiseTaskLists+0x7c>)
 8004b8c:	f7fe fa7c 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <prvInitialiseTaskLists+0x80>)
 8004b92:	4a05      	ldr	r2, [pc, #20]	@ (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <prvInitialiseTaskLists+0x84>)
 8004b98:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <prvInitialiseTaskLists+0x6c>)
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	2000088c 	.word	0x2000088c
 8004ba8:	20000cec 	.word	0x20000cec
 8004bac:	20000d00 	.word	0x20000d00
 8004bb0:	20000d1c 	.word	0x20000d1c
 8004bb4:	20000d30 	.word	0x20000d30
 8004bb8:	20000d48 	.word	0x20000d48
 8004bbc:	20000d60 	.word	0x20000d60
 8004bc0:	20000d14 	.word	0x20000d14
 8004bc4:	20000d18 	.word	0x20000d18

08004bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bce:	e019      	b.n	8004c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bd0:	f000 fdb2 	bl	8005738 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bd4:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <prvCheckTasksWaitingTermination+0x50>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fadb 	bl	800319c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004be6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <prvCheckTasksWaitingTermination+0x54>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	4a0b      	ldr	r2, [pc, #44]	@ (8004c1c <prvCheckTasksWaitingTermination+0x54>)
 8004bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <prvCheckTasksWaitingTermination+0x58>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <prvCheckTasksWaitingTermination+0x58>)
 8004bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bfa:	f000 fdcf 	bl	800579c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f810 	bl	8004c24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <prvCheckTasksWaitingTermination+0x58>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e1      	bne.n	8004bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000d48 	.word	0x20000d48
 8004c1c:	20000d74 	.word	0x20000d74
 8004c20:	20000d5c 	.word	0x20000d5c

08004c24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3358      	adds	r3, #88	@ 0x58
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 f9b3 	bl	8005f9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 ff61 	bl	8005b0c <vPortFree>
				vPortFree( pxTCB );
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 ff5e 	bl	8005b0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c50:	e019      	b.n	8004c86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d103      	bne.n	8004c64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 ff55 	bl	8005b0c <vPortFree>
	}
 8004c62:	e010      	b.n	8004c86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d00b      	beq.n	8004c86 <prvDeleteTCB+0x62>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60fb      	str	r3, [r7, #12]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <prvDeleteTCB+0x5e>
	}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <prvResetNextTaskUnblockTime+0x44>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <prvResetNextTaskUnblockTime+0x14>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <prvResetNextTaskUnblockTime+0x16>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x48>)
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb2:	e008      	b.n	8004cc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <prvResetNextTaskUnblockTime+0x44>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4a05      	ldr	r2, [pc, #20]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x48>)
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000d14 	.word	0x20000d14
 8004cd8:	20000d94 	.word	0x20000d94

08004cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <xTaskGetSchedulerState+0x34>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cea:	2301      	movs	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	e008      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <xTaskGetSchedulerState+0x38>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e001      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d02:	687b      	ldr	r3, [r7, #4]
	}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000d80 	.word	0x20000d80
 8004d14:	20000d9c 	.word	0x20000d9c

08004d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04c      	beq.n	8004dc8 <xTaskPriorityDisinherit+0xb0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d2e:	4b29      	ldr	r3, [pc, #164]	@ (8004dd4 <xTaskPriorityDisinherit+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d00b      	beq.n	8004d50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60fb      	str	r3, [r7, #12]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60bb      	str	r3, [r7, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d020      	beq.n	8004dc8 <xTaskPriorityDisinherit+0xb0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d11c      	bne.n	8004dc8 <xTaskPriorityDisinherit+0xb0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fa02 	bl	800319c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dac:	6938      	ldr	r0, [r7, #16]
 8004dae:	f7fe ff17 	bl	8003be0 <task_set_DEADLINE>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	605a      	str	r2, [r3, #4]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4806      	ldr	r0, [pc, #24]	@ (8004dd8 <xTaskPriorityDisinherit+0xc0>)
 8004dc0:	f7fe f9b3 	bl	800312a <vListInsert>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dc8:	697b      	ldr	r3, [r7, #20]
	}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000888 	.word	0x20000888
 8004dd8:	20000d30 	.word	0x20000d30

08004ddc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004de6:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004dec:	4b23      	ldr	r3, [pc, #140]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004df6:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f9cd 	bl	800319c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d10a      	bne.n	8004e20 <prvAddCurrentTaskToDelayedList+0x44>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e10:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4819      	ldr	r0, [pc, #100]	@ (8004e80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e1a:	f7fe f962 	bl	80030e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e1e:	e026      	b.n	8004e6e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e28:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d209      	bcs.n	8004e4c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e38:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <prvAddCurrentTaskToDelayedList+0xa8>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7fe f970 	bl	800312a <vListInsert>
}
 8004e4a:	e010      	b.n	8004e6e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e88 <prvAddCurrentTaskToDelayedList+0xac>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f7fe f966 	bl	800312a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d202      	bcs.n	8004e6e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6013      	str	r3, [r2, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000d78 	.word	0x20000d78
 8004e7c:	20000888 	.word	0x20000888
 8004e80:	20000d60 	.word	0x20000d60
 8004e84:	20000d18 	.word	0x20000d18
 8004e88:	20000d14 	.word	0x20000d14
 8004e8c:	20000d94 	.word	0x20000d94

08004e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e9a:	f000 fad9 	bl	8005450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <xTimerCreateTimerTask+0x84>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d021      	beq.n	8004eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004eae:	1d3a      	adds	r2, r7, #4
 8004eb0:	f107 0108 	add.w	r1, r7, #8
 8004eb4:	f107 030c 	add.w	r3, r7, #12
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe f8cb 	bl	8003054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	9202      	str	r2, [sp, #8]
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2302      	movs	r3, #2
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	460a      	mov	r2, r1
 8004ed0:	4911      	ldr	r1, [pc, #68]	@ (8004f18 <xTimerCreateTimerTask+0x88>)
 8004ed2:	4812      	ldr	r0, [pc, #72]	@ (8004f1c <xTimerCreateTimerTask+0x8c>)
 8004ed4:	f7fe fed8 	bl	8003c88 <xTaskCreateStatic>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a11      	ldr	r2, [pc, #68]	@ (8004f20 <xTimerCreateTimerTask+0x90>)
 8004edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <xTimerCreateTimerTask+0x90>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f08:	697b      	ldr	r3, [r7, #20]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000dd8 	.word	0x20000dd8
 8004f18:	08006cb4 	.word	0x08006cb4
 8004f1c:	08005045 	.word	0x08005045
 8004f20:	20000ddc 	.word	0x20000ddc

08004f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	@ 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f54:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <xTimerGenericCommand+0x98>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02a      	beq.n	8004fb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	dc18      	bgt.n	8004fa0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f6e:	f7ff feb5 	bl	8004cdc <xTaskGetSchedulerState>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d109      	bne.n	8004f8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f78:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <xTimerGenericCommand+0x98>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f107 0110 	add.w	r1, r7, #16
 8004f80:	2300      	movs	r3, #0
 8004f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f84:	f7fe fa3e 	bl	8003404 <xQueueGenericSend>
 8004f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f8a:	e012      	b.n	8004fb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <xTimerGenericCommand+0x98>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	f107 0110 	add.w	r1, r7, #16
 8004f94:	2300      	movs	r3, #0
 8004f96:	2200      	movs	r2, #0
 8004f98:	f7fe fa34 	bl	8003404 <xQueueGenericSend>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f9e:	e008      	b.n	8004fb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fa0:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <xTimerGenericCommand+0x98>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	f107 0110 	add.w	r1, r7, #16
 8004fa8:	2300      	movs	r3, #0
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	f7fe fb2c 	bl	8003608 <xQueueGenericSendFromISR>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3728      	adds	r7, #40	@ 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000dd8 	.word	0x20000dd8

08004fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fca:	4b1d      	ldr	r3, [pc, #116]	@ (8005040 <prvProcessExpiredTimer+0x80>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe f8df 	bl	800319c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d123      	bne.n	800502e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	18d1      	adds	r1, r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f000 f8cc 	bl	8005190 <prvInsertTimerInActiveList>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ffe:	2300      	movs	r3, #0
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	2100      	movs	r1, #0
 8005008:	6978      	ldr	r0, [r7, #20]
 800500a:	f7ff ff8b 	bl	8004f24 <xTimerGenericCommand>
 800500e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	4798      	blx	r3
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000dd0 	.word	0x20000dd0

08005044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f859 	bl	8005108 <prvGetNextExpireTime>
 8005056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4619      	mov	r1, r3
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f805 	bl	800506c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005062:	f000 f8d7 	bl	8005214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005066:	bf00      	nop
 8005068:	e7f0      	b.n	800504c <prvTimerTask+0x8>
	...

0800506c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005076:	f7ff f9f3 	bl	8004460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f866 	bl	8005150 <prvSampleTimeNow>
 8005084:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d130      	bne.n	80050ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <prvProcessTimerOrBlockTask+0x3c>
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	429a      	cmp	r2, r3
 8005098:	d806      	bhi.n	80050a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800509a:	f7ff f9ef 	bl	800447c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff8d 	bl	8004fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050a6:	e024      	b.n	80050f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050ae:	4b13      	ldr	r3, [pc, #76]	@ (80050fc <prvProcessTimerOrBlockTask+0x90>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <prvProcessTimerOrBlockTask+0x94>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	4619      	mov	r1, r3
 80050ce:	f7fe fd53 	bl	8003b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050d2:	f7ff f9d3 	bl	800447c <xTaskResumeAll>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <prvProcessTimerOrBlockTask+0x98>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
}
 80050ec:	e001      	b.n	80050f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050ee:	f7ff f9c5 	bl	800447c <xTaskResumeAll>
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000dd4 	.word	0x20000dd4
 8005100:	20000dd8 	.word	0x20000dd8
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005110:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <prvGetNextExpireTime+0x44>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <prvGetNextExpireTime+0x44>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e001      	b.n	800513e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800513e:	68fb      	ldr	r3, [r7, #12]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000dd0 	.word	0x20000dd0

08005150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005158:	f7ff fa20 	bl	800459c <xTaskGetTickCount>
 800515c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <prvSampleTimeNow+0x3c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d205      	bcs.n	8005174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005168:	f000 f910 	bl	800538c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e002      	b.n	800517a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800517a:	4a04      	ldr	r2, [pc, #16]	@ (800518c <prvSampleTimeNow+0x3c>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000de0 	.word	0x20000de0

08005190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d812      	bhi.n	80051dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e01b      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <prvInsertTimerInActiveList+0x7c>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fd ffa8 	bl	800312a <vListInsert>
 80051da:	e012      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d206      	bcs.n	80051f2 <prvInsertTimerInActiveList+0x62>
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e007      	b.n	8005202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051f2:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <prvInsertTimerInActiveList+0x80>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fd ff94 	bl	800312a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000dd4 	.word	0x20000dd4
 8005210:	20000dd0 	.word	0x20000dd0

08005214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	@ 0x38
 8005218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521a:	e0a5      	b.n	8005368 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da19      	bge.n	8005256 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	3304      	adds	r3, #4
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	61fb      	str	r3, [r7, #28]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524c:	6850      	ldr	r0, [r2, #4]
 800524e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	4611      	mov	r1, r2
 8005254:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f2c0 8085 	blt.w	8005368 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd ff94 	bl	800319c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005274:	463b      	mov	r3, r7
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff6a 	bl	8005150 <prvSampleTimeNow>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b09      	cmp	r3, #9
 8005282:	d86c      	bhi.n	800535e <prvProcessReceivedCommands+0x14a>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <prvProcessReceivedCommands+0x78>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052b5 	.word	0x080052b5
 8005298:	0800535f 	.word	0x0800535f
 800529c:	08005313 	.word	0x08005313
 80052a0:	0800534d 	.word	0x0800534d
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052b5 	.word	0x080052b5
 80052ac:	0800535f 	.word	0x0800535f
 80052b0:	08005313 	.word	0x08005313
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	18d1      	adds	r1, r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c2:	f7ff ff65 	bl	8005190 <prvInsertTimerInActiveList>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d04a      	beq.n	8005362 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d142      	bne.n	8005362 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	441a      	add	r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	2100      	movs	r1, #0
 80052ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052ee:	f7ff fe19 	bl	8004f24 <xTimerGenericCommand>
 80052f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d133      	bne.n	8005362 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61bb      	str	r3, [r7, #24]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	617b      	str	r3, [r7, #20]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	18d1      	adds	r1, r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005346:	f7ff ff23 	bl	8005190 <prvInsertTimerInActiveList>
					break;
 800534a:	e00d      	b.n	8005368 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005358:	f000 fbd8 	bl	8005b0c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800535c:	e003      	b.n	8005366 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <prvProcessReceivedCommands+0x154>
					break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <prvProcessReceivedCommands+0x154>
					break;
 8005366:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <prvProcessReceivedCommands+0x174>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	1d39      	adds	r1, r7, #4
 800536e:	2200      	movs	r2, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe f9e5 	bl	8003740 <xQueueReceive>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f af4f 	bne.w	800521c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000dd8 	.word	0x20000dd8

0800538c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005392:	e046      	b.n	8005422 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800539e:	4b2a      	ldr	r3, [pc, #168]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd fef5 	bl	800319c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d12f      	bne.n	8005422 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d90e      	bls.n	80053f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e0:	4b19      	ldr	r3, [pc, #100]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fd fe9d 	bl	800312a <vListInsert>
 80053f0:	e017      	b.n	8005422 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	2100      	movs	r1, #0
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fd91 	bl	8004f24 <xTimerGenericCommand>
 8005402:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvSwitchTimerLists+0x96>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005422:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1b3      	bne.n	8005394 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <prvSwitchTimerLists+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <prvSwitchTimerLists+0xbc>)
 8005438:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800543a:	4a04      	ldr	r2, [pc, #16]	@ (800544c <prvSwitchTimerLists+0xc0>)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000dd0 	.word	0x20000dd0
 800544c:	20000dd4 	.word	0x20000dd4

08005450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005456:	f000 f96f 	bl	8005738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800545a:	4b15      	ldr	r3, [pc, #84]	@ (80054b0 <prvCheckForValidListAndQueue+0x60>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d120      	bne.n	80054a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005462:	4814      	ldr	r0, [pc, #80]	@ (80054b4 <prvCheckForValidListAndQueue+0x64>)
 8005464:	f7fd fe10 	bl	8003088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005468:	4813      	ldr	r0, [pc, #76]	@ (80054b8 <prvCheckForValidListAndQueue+0x68>)
 800546a:	f7fd fe0d 	bl	8003088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800546e:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <prvCheckForValidListAndQueue+0x6c>)
 8005470:	4a10      	ldr	r2, [pc, #64]	@ (80054b4 <prvCheckForValidListAndQueue+0x64>)
 8005472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005474:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <prvCheckForValidListAndQueue+0x70>)
 8005476:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <prvCheckForValidListAndQueue+0x68>)
 8005478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <prvCheckForValidListAndQueue+0x74>)
 8005480:	4a11      	ldr	r2, [pc, #68]	@ (80054c8 <prvCheckForValidListAndQueue+0x78>)
 8005482:	2110      	movs	r1, #16
 8005484:	200a      	movs	r0, #10
 8005486:	f7fd ff1d 	bl	80032c4 <xQueueGenericCreateStatic>
 800548a:	4603      	mov	r3, r0
 800548c:	4a08      	ldr	r2, [pc, #32]	@ (80054b0 <prvCheckForValidListAndQueue+0x60>)
 800548e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005490:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <prvCheckForValidListAndQueue+0x60>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <prvCheckForValidListAndQueue+0x60>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	490b      	ldr	r1, [pc, #44]	@ (80054cc <prvCheckForValidListAndQueue+0x7c>)
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe fb40 	bl	8003b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a4:	f000 f97a 	bl	800579c <vPortExitCritical>
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000dd8 	.word	0x20000dd8
 80054b4:	20000da8 	.word	0x20000da8
 80054b8:	20000dbc 	.word	0x20000dbc
 80054bc:	20000dd0 	.word	0x20000dd0
 80054c0:	20000dd4 	.word	0x20000dd4
 80054c4:	20000e84 	.word	0x20000e84
 80054c8:	20000de4 	.word	0x20000de4
 80054cc:	08006cbc 	.word	0x08006cbc

080054d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b04      	subs	r3, #4
 80054e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b04      	subs	r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b04      	subs	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005500:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <pxPortInitialiseStack+0x64>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b14      	subs	r3, #20
 800550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3b04      	subs	r3, #4
 8005516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f06f 0202 	mvn.w	r2, #2
 800551e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3b20      	subs	r3, #32
 8005524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	08005539 	.word	0x08005539

08005538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <prvTaskExitError+0x58>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d00b      	beq.n	8005564 <prvTaskExitError+0x2c>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60fb      	str	r3, [r7, #12]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <prvTaskExitError+0x28>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60bb      	str	r3, [r7, #8]
}
 8005576:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005578:	bf00      	nop
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0fc      	beq.n	800557a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c
	...

080055a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055a0:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <pxCurrentTCBConst2>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	f380 8809 	msr	PSP, r0
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	4770      	bx	lr
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst2>:
 80055c0:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055c8:	4808      	ldr	r0, [pc, #32]	@ (80055ec <prvPortStartFirstTask+0x24>)
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f380 8808 	msr	MSP, r0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8814 	msr	CONTROL, r0
 80055da:	b662      	cpsie	i
 80055dc:	b661      	cpsie	f
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	df00      	svc	0
 80055e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ea:	bf00      	nop
 80055ec:	e000ed08 	.word	0xe000ed08

080055f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055f6:	4b47      	ldr	r3, [pc, #284]	@ (8005714 <xPortStartScheduler+0x124>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a47      	ldr	r2, [pc, #284]	@ (8005718 <xPortStartScheduler+0x128>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10b      	bne.n	8005618 <xPortStartScheduler+0x28>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005618:	4b3e      	ldr	r3, [pc, #248]	@ (8005714 <xPortStartScheduler+0x124>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <xPortStartScheduler+0x12c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10b      	bne.n	800563a <xPortStartScheduler+0x4a>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60fb      	str	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800563a:	4b39      	ldr	r3, [pc, #228]	@ (8005720 <xPortStartScheduler+0x130>)
 800563c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	22ff      	movs	r2, #255	@ 0xff
 800564a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <xPortStartScheduler+0x134>)
 8005660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005662:	4b31      	ldr	r3, [pc, #196]	@ (8005728 <xPortStartScheduler+0x138>)
 8005664:	2207      	movs	r2, #7
 8005666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005668:	e009      	b.n	800567e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800566a:	4b2f      	ldr	r3, [pc, #188]	@ (8005728 <xPortStartScheduler+0x138>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3b01      	subs	r3, #1
 8005670:	4a2d      	ldr	r2, [pc, #180]	@ (8005728 <xPortStartScheduler+0x138>)
 8005672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d0ef      	beq.n	800566a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800568a:	4b27      	ldr	r3, [pc, #156]	@ (8005728 <xPortStartScheduler+0x138>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1c3 0307 	rsb	r3, r3, #7
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00b      	beq.n	80056ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005728 <xPortStartScheduler+0x138>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <xPortStartScheduler+0x138>)
 80056b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <xPortStartScheduler+0x138>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056c0:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <xPortStartScheduler+0x138>)
 80056c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <xPortStartScheduler+0x13c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <xPortStartScheduler+0x13c>)
 80056d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056d8:	4b14      	ldr	r3, [pc, #80]	@ (800572c <xPortStartScheduler+0x13c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a13      	ldr	r2, [pc, #76]	@ (800572c <xPortStartScheduler+0x13c>)
 80056de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056e4:	f000 f8da 	bl	800589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <xPortStartScheduler+0x140>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056ee:	f000 f8f9 	bl	80058e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056f2:	4b10      	ldr	r3, [pc, #64]	@ (8005734 <xPortStartScheduler+0x144>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005734 <xPortStartScheduler+0x144>)
 80056f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80056fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056fe:	f7ff ff63 	bl	80055c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005702:	f7ff f817 	bl	8004734 <vTaskSwitchContext>
	prvTaskExitError();
 8005706:	f7ff ff17 	bl	8005538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed00 	.word	0xe000ed00
 8005718:	410fc271 	.word	0x410fc271
 800571c:	410fc270 	.word	0x410fc270
 8005720:	e000e400 	.word	0xe000e400
 8005724:	20000ed4 	.word	0x20000ed4
 8005728:	20000ed8 	.word	0x20000ed8
 800572c:	e000ed20 	.word	0xe000ed20
 8005730:	2000000c 	.word	0x2000000c
 8005734:	e000ef34 	.word	0xe000ef34

08005738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <vPortEnterCritical+0x5c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a0e      	ldr	r2, [pc, #56]	@ (8005794 <vPortEnterCritical+0x5c>)
 800575a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800575c:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <vPortEnterCritical+0x5c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d110      	bne.n	8005786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005764:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <vPortEnterCritical+0x60>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <vPortEnterCritical+0x4e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <vPortEnterCritical+0x4a>
	}
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <vPortExitCritical+0x50>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <vPortExitCritical+0x26>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <vPortExitCritical+0x50>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <vPortExitCritical+0x50>)
 80057ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <vPortExitCritical+0x50>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <vPortExitCritical+0x44>
 80057d4:	2300      	movs	r3, #0
 80057d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f383 8811 	msr	BASEPRI, r3
}
 80057de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7fe ff88 	bl	8004734 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7fe fea3 	bl	80045bc <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <xPortSysTickHandler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a09      	ldr	r2, [pc, #36]	@ (80058e0 <vPortSetupTimerInterrupt+0x44>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010
 80058d4:	e000e018 	.word	0xe000e018
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	e000e014 	.word	0xe000e014

080058e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058f4 <vPortEnableVFP+0x10>
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058ee:	6001      	str	r1, [r0, #0]
 80058f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058f2:	bf00      	nop
 80058f4:	e000ed88 	.word	0xe000ed88

080058f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d915      	bls.n	8005936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800590a:	4a18      	ldr	r2, [pc, #96]	@ (800596c <vPortValidateInterruptPriority+0x74>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005914:	4b16      	ldr	r3, [pc, #88]	@ (8005970 <vPortValidateInterruptPriority+0x78>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	7afa      	ldrb	r2, [r7, #11]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20b      	bcs.n	8005936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005936:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <vPortValidateInterruptPriority+0x7c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800593e:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <vPortValidateInterruptPriority+0x80>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d90b      	bls.n	800595e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	603b      	str	r3, [r7, #0]
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	e7fd      	b.n	800595a <vPortValidateInterruptPriority+0x62>
	}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	e000e3f0 	.word	0xe000e3f0
 8005970:	20000ed4 	.word	0x20000ed4
 8005974:	e000ed0c 	.word	0xe000ed0c
 8005978:	20000ed8 	.word	0x20000ed8

0800597c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005988:	f7fe fd6a 	bl	8004460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800598c:	4b5a      	ldr	r3, [pc, #360]	@ (8005af8 <pvPortMalloc+0x17c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005994:	f000 f916 	bl	8005bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005998:	4b58      	ldr	r3, [pc, #352]	@ (8005afc <pvPortMalloc+0x180>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 8090 	bne.w	8005ac6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01e      	beq.n	80059ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80059ac:	2208      	movs	r2, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d015      	beq.n	80059ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f023 0307 	bic.w	r3, r3, #7
 80059c4:	3308      	adds	r3, #8
 80059c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <pvPortMalloc+0x6e>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d06a      	beq.n	8005ac6 <pvPortMalloc+0x14a>
 80059f0:	4b43      	ldr	r3, [pc, #268]	@ (8005b00 <pvPortMalloc+0x184>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d865      	bhi.n	8005ac6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059fa:	4b42      	ldr	r3, [pc, #264]	@ (8005b04 <pvPortMalloc+0x188>)
 80059fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059fe:	4b41      	ldr	r3, [pc, #260]	@ (8005b04 <pvPortMalloc+0x188>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a04:	e004      	b.n	8005a10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <pvPortMalloc+0xa6>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f1      	bne.n	8005a06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a22:	4b35      	ldr	r3, [pc, #212]	@ (8005af8 <pvPortMalloc+0x17c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d04c      	beq.n	8005ac6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	4413      	add	r3, r2
 8005a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	1ad2      	subs	r2, r2, r3
 8005a46:	2308      	movs	r3, #8
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d920      	bls.n	8005a90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <pvPortMalloc+0xfc>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	613b      	str	r3, [r7, #16]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	f000 f8fc 	bl	8005c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a90:	4b1b      	ldr	r3, [pc, #108]	@ (8005b00 <pvPortMalloc+0x184>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	4a19      	ldr	r2, [pc, #100]	@ (8005b00 <pvPortMalloc+0x184>)
 8005a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a9e:	4b18      	ldr	r3, [pc, #96]	@ (8005b00 <pvPortMalloc+0x184>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b19      	ldr	r3, [pc, #100]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d203      	bcs.n	8005ab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <pvPortMalloc+0x184>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <pvPortMalloc+0x180>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ac6:	f7fe fcd9 	bl	800447c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <pvPortMalloc+0x170>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <pvPortMalloc+0x16c>
	return pvReturn;
 8005aec:	69fb      	ldr	r3, [r7, #28]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	@ 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20004d64 	.word	0x20004d64
 8005afc:	20004d70 	.word	0x20004d70
 8005b00:	20004d68 	.word	0x20004d68
 8005b04:	20004d5c 	.word	0x20004d5c
 8005b08:	20004d6c 	.word	0x20004d6c

08005b0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04a      	beq.n	8005bb4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b1e:	2308      	movs	r3, #8
 8005b20:	425b      	negs	r3, r3
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4b22      	ldr	r3, [pc, #136]	@ (8005bbc <vPortFree+0xb0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <vPortFree+0x46>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60fb      	str	r3, [r7, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <vPortFree+0x66>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60bb      	str	r3, [r7, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	e7fd      	b.n	8005b6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <vPortFree+0xb0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d115      	bne.n	8005bb4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <vPortFree+0xb0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	401a      	ands	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b98:	f7fe fc62 	bl	8004460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <vPortFree+0xb4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4a06      	ldr	r2, [pc, #24]	@ (8005bc0 <vPortFree+0xb4>)
 8005ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005baa:	6938      	ldr	r0, [r7, #16]
 8005bac:	f000 f86c 	bl	8005c88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005bb0:	f7fe fc64 	bl	800447c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bb4:	bf00      	nop
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20004d70 	.word	0x20004d70
 8005bc0:	20004d68 	.word	0x20004d68

08005bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bca:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8005bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bd0:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <prvHeapInit+0xac>)
 8005bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3307      	adds	r3, #7
 8005be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c70 <prvHeapInit+0xac>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c74 <prvHeapInit+0xb0>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	@ (8005c74 <prvHeapInit+0xb0>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c10:	2208      	movs	r2, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a15      	ldr	r2, [pc, #84]	@ (8005c78 <prvHeapInit+0xb4>)
 8005c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c26:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <prvHeapInit+0xb4>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c2e:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <prvHeapInit+0xb4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c44:	4b0c      	ldr	r3, [pc, #48]	@ (8005c78 <prvHeapInit+0xb4>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	@ (8005c7c <prvHeapInit+0xb8>)
 8005c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <prvHeapInit+0xbc>)
 8005c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <prvHeapInit+0xc0>)
 8005c5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000edc 	.word	0x20000edc
 8005c74:	20004d5c 	.word	0x20004d5c
 8005c78:	20004d64 	.word	0x20004d64
 8005c7c:	20004d6c 	.word	0x20004d6c
 8005c80:	20004d68 	.word	0x20004d68
 8005c84:	20004d70 	.word	0x20004d70

08005c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c90:	4b28      	ldr	r3, [pc, #160]	@ (8005d34 <prvInsertBlockIntoFreeList+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e002      	b.n	8005c9c <prvInsertBlockIntoFreeList+0x14>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d8f7      	bhi.n	8005c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d108      	bne.n	8005cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d118      	bne.n	8005d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b15      	ldr	r3, [pc, #84]	@ (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d00d      	beq.n	8005d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e008      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e003      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d002      	beq.n	8005d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20004d5c 	.word	0x20004d5c
 8005d38:	20004d64 	.word	0x20004d64

08005d3c <std>:
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	4604      	mov	r4, r0
 8005d42:	e9c0 3300 	strd	r3, r3, [r0]
 8005d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	8181      	strh	r1, [r0, #12]
 8005d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d50:	81c2      	strh	r2, [r0, #14]
 8005d52:	6183      	str	r3, [r0, #24]
 8005d54:	4619      	mov	r1, r3
 8005d56:	2208      	movs	r2, #8
 8005d58:	305c      	adds	r0, #92	@ 0x5c
 8005d5a:	f000 f906 	bl	8005f6a <memset>
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <std+0x58>)
 8005d60:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d62:	4b0d      	ldr	r3, [pc, #52]	@ (8005d98 <std+0x5c>)
 8005d64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d66:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <std+0x60>)
 8005d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <std+0x64>)
 8005d6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <std+0x68>)
 8005d70:	6224      	str	r4, [r4, #32]
 8005d72:	429c      	cmp	r4, r3
 8005d74:	d006      	beq.n	8005d84 <std+0x48>
 8005d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d7a:	4294      	cmp	r4, r2
 8005d7c:	d002      	beq.n	8005d84 <std+0x48>
 8005d7e:	33d0      	adds	r3, #208	@ 0xd0
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d105      	bne.n	8005d90 <std+0x54>
 8005d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d8c:	f000 b9bc 	b.w	8006108 <__retarget_lock_init_recursive>
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop
 8005d94:	08005ee5 	.word	0x08005ee5
 8005d98:	08005f07 	.word	0x08005f07
 8005d9c:	08005f3f 	.word	0x08005f3f
 8005da0:	08005f63 	.word	0x08005f63
 8005da4:	20004d74 	.word	0x20004d74

08005da8 <stdio_exit_handler>:
 8005da8:	4a02      	ldr	r2, [pc, #8]	@ (8005db4 <stdio_exit_handler+0xc>)
 8005daa:	4903      	ldr	r1, [pc, #12]	@ (8005db8 <stdio_exit_handler+0x10>)
 8005dac:	4803      	ldr	r0, [pc, #12]	@ (8005dbc <stdio_exit_handler+0x14>)
 8005dae:	f000 b869 	b.w	8005e84 <_fwalk_sglue>
 8005db2:	bf00      	nop
 8005db4:	20000010 	.word	0x20000010
 8005db8:	080069c5 	.word	0x080069c5
 8005dbc:	20000020 	.word	0x20000020

08005dc0 <cleanup_stdio>:
 8005dc0:	6841      	ldr	r1, [r0, #4]
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <cleanup_stdio+0x34>)
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	4604      	mov	r4, r0
 8005dca:	d001      	beq.n	8005dd0 <cleanup_stdio+0x10>
 8005dcc:	f000 fdfa 	bl	80069c4 <_fflush_r>
 8005dd0:	68a1      	ldr	r1, [r4, #8]
 8005dd2:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <cleanup_stdio+0x38>)
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	d002      	beq.n	8005dde <cleanup_stdio+0x1e>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 fdf3 	bl	80069c4 <_fflush_r>
 8005dde:	68e1      	ldr	r1, [r4, #12]
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <cleanup_stdio+0x3c>)
 8005de2:	4299      	cmp	r1, r3
 8005de4:	d004      	beq.n	8005df0 <cleanup_stdio+0x30>
 8005de6:	4620      	mov	r0, r4
 8005de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dec:	f000 bdea 	b.w	80069c4 <_fflush_r>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	bf00      	nop
 8005df4:	20004d74 	.word	0x20004d74
 8005df8:	20004ddc 	.word	0x20004ddc
 8005dfc:	20004e44 	.word	0x20004e44

08005e00 <global_stdio_init.part.0>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <global_stdio_init.part.0+0x30>)
 8005e04:	4c0b      	ldr	r4, [pc, #44]	@ (8005e34 <global_stdio_init.part.0+0x34>)
 8005e06:	4a0c      	ldr	r2, [pc, #48]	@ (8005e38 <global_stdio_init.part.0+0x38>)
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2104      	movs	r1, #4
 8005e10:	f7ff ff94 	bl	8005d3c <std>
 8005e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2109      	movs	r1, #9
 8005e1c:	f7ff ff8e 	bl	8005d3c <std>
 8005e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e24:	2202      	movs	r2, #2
 8005e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2a:	2112      	movs	r1, #18
 8005e2c:	f7ff bf86 	b.w	8005d3c <std>
 8005e30:	20004eac 	.word	0x20004eac
 8005e34:	20004d74 	.word	0x20004d74
 8005e38:	08005da9 	.word	0x08005da9

08005e3c <__sfp_lock_acquire>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	@ (8005e44 <__sfp_lock_acquire+0x8>)
 8005e3e:	f000 b964 	b.w	800610a <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	20004eb5 	.word	0x20004eb5

08005e48 <__sfp_lock_release>:
 8005e48:	4801      	ldr	r0, [pc, #4]	@ (8005e50 <__sfp_lock_release+0x8>)
 8005e4a:	f000 b95f 	b.w	800610c <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20004eb5 	.word	0x20004eb5

08005e54 <__sinit>:
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4604      	mov	r4, r0
 8005e58:	f7ff fff0 	bl	8005e3c <__sfp_lock_acquire>
 8005e5c:	6a23      	ldr	r3, [r4, #32]
 8005e5e:	b11b      	cbz	r3, 8005e68 <__sinit+0x14>
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	f7ff bff0 	b.w	8005e48 <__sfp_lock_release>
 8005e68:	4b04      	ldr	r3, [pc, #16]	@ (8005e7c <__sinit+0x28>)
 8005e6a:	6223      	str	r3, [r4, #32]
 8005e6c:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <__sinit+0x2c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f5      	bne.n	8005e60 <__sinit+0xc>
 8005e74:	f7ff ffc4 	bl	8005e00 <global_stdio_init.part.0>
 8005e78:	e7f2      	b.n	8005e60 <__sinit+0xc>
 8005e7a:	bf00      	nop
 8005e7c:	08005dc1 	.word	0x08005dc1
 8005e80:	20004eac 	.word	0x20004eac

08005e84 <_fwalk_sglue>:
 8005e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e88:	4607      	mov	r7, r0
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e94:	f1b9 0901 	subs.w	r9, r9, #1
 8005e98:	d505      	bpl.n	8005ea6 <_fwalk_sglue+0x22>
 8005e9a:	6824      	ldr	r4, [r4, #0]
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	d1f7      	bne.n	8005e90 <_fwalk_sglue+0xc>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d907      	bls.n	8005ebc <_fwalk_sglue+0x38>
 8005eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	d003      	beq.n	8005ebc <_fwalk_sglue+0x38>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c0      	blx	r8
 8005eba:	4306      	orrs	r6, r0
 8005ebc:	3568      	adds	r5, #104	@ 0x68
 8005ebe:	e7e9      	b.n	8005e94 <_fwalk_sglue+0x10>

08005ec0 <iprintf>:
 8005ec0:	b40f      	push	{r0, r1, r2, r3}
 8005ec2:	b507      	push	{r0, r1, r2, lr}
 8005ec4:	4906      	ldr	r1, [pc, #24]	@ (8005ee0 <iprintf+0x20>)
 8005ec6:	ab04      	add	r3, sp, #16
 8005ec8:	6808      	ldr	r0, [r1, #0]
 8005eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ece:	6881      	ldr	r1, [r0, #8]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	f000 fa4d 	bl	8006370 <_vfiprintf_r>
 8005ed6:	b003      	add	sp, #12
 8005ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005edc:	b004      	add	sp, #16
 8005ede:	4770      	bx	lr
 8005ee0:	2000001c 	.word	0x2000001c

08005ee4 <__sread>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eec:	f000 f8be 	bl	800606c <_read_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	bfab      	itete	ge
 8005ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ef8:	181b      	addge	r3, r3, r0
 8005efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005efe:	bfac      	ite	ge
 8005f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f02:	81a3      	strhlt	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__swrite>:
 8005f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	898b      	ldrh	r3, [r1, #12]
 8005f0e:	05db      	lsls	r3, r3, #23
 8005f10:	4605      	mov	r5, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	4616      	mov	r6, r2
 8005f16:	d505      	bpl.n	8005f24 <__swrite+0x1e>
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f000 f892 	bl	8006048 <_lseek_r>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	4632      	mov	r2, r6
 8005f32:	463b      	mov	r3, r7
 8005f34:	4628      	mov	r0, r5
 8005f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	f000 b8a9 	b.w	8006090 <_write_r>

08005f3e <__sseek>:
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	460c      	mov	r4, r1
 8005f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f46:	f000 f87f 	bl	8006048 <_lseek_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	bf15      	itete	ne
 8005f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f5a:	81a3      	strheq	r3, [r4, #12]
 8005f5c:	bf18      	it	ne
 8005f5e:	81a3      	strhne	r3, [r4, #12]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__sclose>:
 8005f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f66:	f000 b809 	b.w	8005f7c <_close_r>

08005f6a <memset>:
 8005f6a:	4402      	add	r2, r0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d100      	bne.n	8005f74 <memset+0xa>
 8005f72:	4770      	bx	lr
 8005f74:	f803 1b01 	strb.w	r1, [r3], #1
 8005f78:	e7f9      	b.n	8005f6e <memset+0x4>
	...

08005f7c <_close_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d06      	ldr	r5, [pc, #24]	@ (8005f98 <_close_r+0x1c>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	f7fa ffe9 	bl	8000f5e <_close>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_close_r+0x1a>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_close_r+0x1a>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20004eb0 	.word	0x20004eb0

08005f9c <_reclaim_reent>:
 8005f9c:	4b29      	ldr	r3, [pc, #164]	@ (8006044 <_reclaim_reent+0xa8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4283      	cmp	r3, r0
 8005fa2:	b570      	push	{r4, r5, r6, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	d04b      	beq.n	8006040 <_reclaim_reent+0xa4>
 8005fa8:	69c3      	ldr	r3, [r0, #28]
 8005faa:	b1ab      	cbz	r3, 8005fd8 <_reclaim_reent+0x3c>
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	b16b      	cbz	r3, 8005fcc <_reclaim_reent+0x30>
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	69e3      	ldr	r3, [r4, #28]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	5959      	ldr	r1, [r3, r5]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d13b      	bne.n	8006034 <_reclaim_reent+0x98>
 8005fbc:	3504      	adds	r5, #4
 8005fbe:	2d80      	cmp	r5, #128	@ 0x80
 8005fc0:	d1f7      	bne.n	8005fb2 <_reclaim_reent+0x16>
 8005fc2:	69e3      	ldr	r3, [r4, #28]
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	68d9      	ldr	r1, [r3, #12]
 8005fc8:	f000 f8b0 	bl	800612c <_free_r>
 8005fcc:	69e3      	ldr	r3, [r4, #28]
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	b111      	cbz	r1, 8005fd8 <_reclaim_reent+0x3c>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f8aa 	bl	800612c <_free_r>
 8005fd8:	6961      	ldr	r1, [r4, #20]
 8005fda:	b111      	cbz	r1, 8005fe2 <_reclaim_reent+0x46>
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 f8a5 	bl	800612c <_free_r>
 8005fe2:	69e1      	ldr	r1, [r4, #28]
 8005fe4:	b111      	cbz	r1, 8005fec <_reclaim_reent+0x50>
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 f8a0 	bl	800612c <_free_r>
 8005fec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fee:	b111      	cbz	r1, 8005ff6 <_reclaim_reent+0x5a>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 f89b 	bl	800612c <_free_r>
 8005ff6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff8:	b111      	cbz	r1, 8006000 <_reclaim_reent+0x64>
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 f896 	bl	800612c <_free_r>
 8006000:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006002:	b111      	cbz	r1, 800600a <_reclaim_reent+0x6e>
 8006004:	4620      	mov	r0, r4
 8006006:	f000 f891 	bl	800612c <_free_r>
 800600a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800600c:	b111      	cbz	r1, 8006014 <_reclaim_reent+0x78>
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f88c 	bl	800612c <_free_r>
 8006014:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006016:	b111      	cbz	r1, 800601e <_reclaim_reent+0x82>
 8006018:	4620      	mov	r0, r4
 800601a:	f000 f887 	bl	800612c <_free_r>
 800601e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006020:	b111      	cbz	r1, 8006028 <_reclaim_reent+0x8c>
 8006022:	4620      	mov	r0, r4
 8006024:	f000 f882 	bl	800612c <_free_r>
 8006028:	6a23      	ldr	r3, [r4, #32]
 800602a:	b14b      	cbz	r3, 8006040 <_reclaim_reent+0xa4>
 800602c:	4620      	mov	r0, r4
 800602e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006032:	4718      	bx	r3
 8006034:	680e      	ldr	r6, [r1, #0]
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f878 	bl	800612c <_free_r>
 800603c:	4631      	mov	r1, r6
 800603e:	e7bb      	b.n	8005fb8 <_reclaim_reent+0x1c>
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	bf00      	nop
 8006044:	2000001c 	.word	0x2000001c

08006048 <_lseek_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	@ (8006068 <_lseek_r+0x20>)
 800604c:	4604      	mov	r4, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	602a      	str	r2, [r5, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7fa ffa8 	bl	8000fac <_lseek>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_lseek_r+0x1e>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_lseek_r+0x1e>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20004eb0 	.word	0x20004eb0

0800606c <_read_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	@ (800608c <_read_r+0x20>)
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fa ff36 	bl	8000eec <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_read_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_read_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20004eb0 	.word	0x20004eb0

08006090 <_write_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d07      	ldr	r5, [pc, #28]	@ (80060b0 <_write_r+0x20>)
 8006094:	4604      	mov	r4, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	2200      	movs	r2, #0
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fa ff41 	bl	8000f26 <_write>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_write_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_write_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20004eb0 	.word	0x20004eb0

080060b4 <__errno>:
 80060b4:	4b01      	ldr	r3, [pc, #4]	@ (80060bc <__errno+0x8>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000001c 	.word	0x2000001c

080060c0 <__libc_init_array>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4d0d      	ldr	r5, [pc, #52]	@ (80060f8 <__libc_init_array+0x38>)
 80060c4:	4c0d      	ldr	r4, [pc, #52]	@ (80060fc <__libc_init_array+0x3c>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	2600      	movs	r6, #0
 80060cc:	42a6      	cmp	r6, r4
 80060ce:	d109      	bne.n	80060e4 <__libc_init_array+0x24>
 80060d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006100 <__libc_init_array+0x40>)
 80060d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006104 <__libc_init_array+0x44>)
 80060d4:	f000 fdc6 	bl	8006c64 <_init>
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	2600      	movs	r6, #0
 80060de:	42a6      	cmp	r6, r4
 80060e0:	d105      	bne.n	80060ee <__libc_init_array+0x2e>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e8:	4798      	blx	r3
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7ee      	b.n	80060cc <__libc_init_array+0xc>
 80060ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f2:	4798      	blx	r3
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7f2      	b.n	80060de <__libc_init_array+0x1e>
 80060f8:	08006d80 	.word	0x08006d80
 80060fc:	08006d80 	.word	0x08006d80
 8006100:	08006d80 	.word	0x08006d80
 8006104:	08006d84 	.word	0x08006d84

08006108 <__retarget_lock_init_recursive>:
 8006108:	4770      	bx	lr

0800610a <__retarget_lock_acquire_recursive>:
 800610a:	4770      	bx	lr

0800610c <__retarget_lock_release_recursive>:
 800610c:	4770      	bx	lr

0800610e <memcpy>:
 800610e:	440a      	add	r2, r1
 8006110:	4291      	cmp	r1, r2
 8006112:	f100 33ff 	add.w	r3, r0, #4294967295
 8006116:	d100      	bne.n	800611a <memcpy+0xc>
 8006118:	4770      	bx	lr
 800611a:	b510      	push	{r4, lr}
 800611c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006120:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006124:	4291      	cmp	r1, r2
 8006126:	d1f9      	bne.n	800611c <memcpy+0xe>
 8006128:	bd10      	pop	{r4, pc}
	...

0800612c <_free_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4605      	mov	r5, r0
 8006130:	2900      	cmp	r1, #0
 8006132:	d041      	beq.n	80061b8 <_free_r+0x8c>
 8006134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006138:	1f0c      	subs	r4, r1, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfb8      	it	lt
 800613e:	18e4      	addlt	r4, r4, r3
 8006140:	f000 f8e0 	bl	8006304 <__malloc_lock>
 8006144:	4a1d      	ldr	r2, [pc, #116]	@ (80061bc <_free_r+0x90>)
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	b933      	cbnz	r3, 8006158 <_free_r+0x2c>
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	6014      	str	r4, [r2, #0]
 800614e:	4628      	mov	r0, r5
 8006150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006154:	f000 b8dc 	b.w	8006310 <__malloc_unlock>
 8006158:	42a3      	cmp	r3, r4
 800615a:	d908      	bls.n	800616e <_free_r+0x42>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	1821      	adds	r1, r4, r0
 8006160:	428b      	cmp	r3, r1
 8006162:	bf01      	itttt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	e7ed      	b.n	800614a <_free_r+0x1e>
 800616e:	461a      	mov	r2, r3
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b10b      	cbz	r3, 8006178 <_free_r+0x4c>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d9fa      	bls.n	800616e <_free_r+0x42>
 8006178:	6811      	ldr	r1, [r2, #0]
 800617a:	1850      	adds	r0, r2, r1
 800617c:	42a0      	cmp	r0, r4
 800617e:	d10b      	bne.n	8006198 <_free_r+0x6c>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	4401      	add	r1, r0
 8006184:	1850      	adds	r0, r2, r1
 8006186:	4283      	cmp	r3, r0
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	d1e0      	bne.n	800614e <_free_r+0x22>
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6053      	str	r3, [r2, #4]
 8006192:	4408      	add	r0, r1
 8006194:	6010      	str	r0, [r2, #0]
 8006196:	e7da      	b.n	800614e <_free_r+0x22>
 8006198:	d902      	bls.n	80061a0 <_free_r+0x74>
 800619a:	230c      	movs	r3, #12
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	e7d6      	b.n	800614e <_free_r+0x22>
 80061a0:	6820      	ldr	r0, [r4, #0]
 80061a2:	1821      	adds	r1, r4, r0
 80061a4:	428b      	cmp	r3, r1
 80061a6:	bf04      	itt	eq
 80061a8:	6819      	ldreq	r1, [r3, #0]
 80061aa:	685b      	ldreq	r3, [r3, #4]
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	bf04      	itt	eq
 80061b0:	1809      	addeq	r1, r1, r0
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	6054      	str	r4, [r2, #4]
 80061b6:	e7ca      	b.n	800614e <_free_r+0x22>
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	bf00      	nop
 80061bc:	20004ebc 	.word	0x20004ebc

080061c0 <sbrk_aligned>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006200 <sbrk_aligned+0x40>)
 80061c4:	460c      	mov	r4, r1
 80061c6:	6831      	ldr	r1, [r6, #0]
 80061c8:	4605      	mov	r5, r0
 80061ca:	b911      	cbnz	r1, 80061d2 <sbrk_aligned+0x12>
 80061cc:	f000 fcb6 	bl	8006b3c <_sbrk_r>
 80061d0:	6030      	str	r0, [r6, #0]
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fcb1 	bl	8006b3c <_sbrk_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d103      	bne.n	80061e6 <sbrk_aligned+0x26>
 80061de:	f04f 34ff 	mov.w	r4, #4294967295
 80061e2:	4620      	mov	r0, r4
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	1cc4      	adds	r4, r0, #3
 80061e8:	f024 0403 	bic.w	r4, r4, #3
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d0f8      	beq.n	80061e2 <sbrk_aligned+0x22>
 80061f0:	1a21      	subs	r1, r4, r0
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 fca2 	bl	8006b3c <_sbrk_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d1f2      	bne.n	80061e2 <sbrk_aligned+0x22>
 80061fc:	e7ef      	b.n	80061de <sbrk_aligned+0x1e>
 80061fe:	bf00      	nop
 8006200:	20004eb8 	.word	0x20004eb8

08006204 <_malloc_r>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	1ccd      	adds	r5, r1, #3
 800620a:	f025 0503 	bic.w	r5, r5, #3
 800620e:	3508      	adds	r5, #8
 8006210:	2d0c      	cmp	r5, #12
 8006212:	bf38      	it	cc
 8006214:	250c      	movcc	r5, #12
 8006216:	2d00      	cmp	r5, #0
 8006218:	4606      	mov	r6, r0
 800621a:	db01      	blt.n	8006220 <_malloc_r+0x1c>
 800621c:	42a9      	cmp	r1, r5
 800621e:	d904      	bls.n	800622a <_malloc_r+0x26>
 8006220:	230c      	movs	r3, #12
 8006222:	6033      	str	r3, [r6, #0]
 8006224:	2000      	movs	r0, #0
 8006226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006300 <_malloc_r+0xfc>
 800622e:	f000 f869 	bl	8006304 <__malloc_lock>
 8006232:	f8d8 3000 	ldr.w	r3, [r8]
 8006236:	461c      	mov	r4, r3
 8006238:	bb44      	cbnz	r4, 800628c <_malloc_r+0x88>
 800623a:	4629      	mov	r1, r5
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff ffbf 	bl	80061c0 <sbrk_aligned>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	4604      	mov	r4, r0
 8006246:	d158      	bne.n	80062fa <_malloc_r+0xf6>
 8006248:	f8d8 4000 	ldr.w	r4, [r8]
 800624c:	4627      	mov	r7, r4
 800624e:	2f00      	cmp	r7, #0
 8006250:	d143      	bne.n	80062da <_malloc_r+0xd6>
 8006252:	2c00      	cmp	r4, #0
 8006254:	d04b      	beq.n	80062ee <_malloc_r+0xea>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	4639      	mov	r1, r7
 800625a:	4630      	mov	r0, r6
 800625c:	eb04 0903 	add.w	r9, r4, r3
 8006260:	f000 fc6c 	bl	8006b3c <_sbrk_r>
 8006264:	4581      	cmp	r9, r0
 8006266:	d142      	bne.n	80062ee <_malloc_r+0xea>
 8006268:	6821      	ldr	r1, [r4, #0]
 800626a:	1a6d      	subs	r5, r5, r1
 800626c:	4629      	mov	r1, r5
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff ffa6 	bl	80061c0 <sbrk_aligned>
 8006274:	3001      	adds	r0, #1
 8006276:	d03a      	beq.n	80062ee <_malloc_r+0xea>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	442b      	add	r3, r5
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	f8d8 3000 	ldr.w	r3, [r8]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	bb62      	cbnz	r2, 80062e0 <_malloc_r+0xdc>
 8006286:	f8c8 7000 	str.w	r7, [r8]
 800628a:	e00f      	b.n	80062ac <_malloc_r+0xa8>
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	1b52      	subs	r2, r2, r5
 8006290:	d420      	bmi.n	80062d4 <_malloc_r+0xd0>
 8006292:	2a0b      	cmp	r2, #11
 8006294:	d917      	bls.n	80062c6 <_malloc_r+0xc2>
 8006296:	1961      	adds	r1, r4, r5
 8006298:	42a3      	cmp	r3, r4
 800629a:	6025      	str	r5, [r4, #0]
 800629c:	bf18      	it	ne
 800629e:	6059      	strne	r1, [r3, #4]
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	bf08      	it	eq
 80062a4:	f8c8 1000 	streq.w	r1, [r8]
 80062a8:	5162      	str	r2, [r4, r5]
 80062aa:	604b      	str	r3, [r1, #4]
 80062ac:	4630      	mov	r0, r6
 80062ae:	f000 f82f 	bl	8006310 <__malloc_unlock>
 80062b2:	f104 000b 	add.w	r0, r4, #11
 80062b6:	1d23      	adds	r3, r4, #4
 80062b8:	f020 0007 	bic.w	r0, r0, #7
 80062bc:	1ac2      	subs	r2, r0, r3
 80062be:	bf1c      	itt	ne
 80062c0:	1a1b      	subne	r3, r3, r0
 80062c2:	50a3      	strne	r3, [r4, r2]
 80062c4:	e7af      	b.n	8006226 <_malloc_r+0x22>
 80062c6:	6862      	ldr	r2, [r4, #4]
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	bf0c      	ite	eq
 80062cc:	f8c8 2000 	streq.w	r2, [r8]
 80062d0:	605a      	strne	r2, [r3, #4]
 80062d2:	e7eb      	b.n	80062ac <_malloc_r+0xa8>
 80062d4:	4623      	mov	r3, r4
 80062d6:	6864      	ldr	r4, [r4, #4]
 80062d8:	e7ae      	b.n	8006238 <_malloc_r+0x34>
 80062da:	463c      	mov	r4, r7
 80062dc:	687f      	ldr	r7, [r7, #4]
 80062de:	e7b6      	b.n	800624e <_malloc_r+0x4a>
 80062e0:	461a      	mov	r2, r3
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d1fb      	bne.n	80062e0 <_malloc_r+0xdc>
 80062e8:	2300      	movs	r3, #0
 80062ea:	6053      	str	r3, [r2, #4]
 80062ec:	e7de      	b.n	80062ac <_malloc_r+0xa8>
 80062ee:	230c      	movs	r3, #12
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 f80c 	bl	8006310 <__malloc_unlock>
 80062f8:	e794      	b.n	8006224 <_malloc_r+0x20>
 80062fa:	6005      	str	r5, [r0, #0]
 80062fc:	e7d6      	b.n	80062ac <_malloc_r+0xa8>
 80062fe:	bf00      	nop
 8006300:	20004ebc 	.word	0x20004ebc

08006304 <__malloc_lock>:
 8006304:	4801      	ldr	r0, [pc, #4]	@ (800630c <__malloc_lock+0x8>)
 8006306:	f7ff bf00 	b.w	800610a <__retarget_lock_acquire_recursive>
 800630a:	bf00      	nop
 800630c:	20004eb4 	.word	0x20004eb4

08006310 <__malloc_unlock>:
 8006310:	4801      	ldr	r0, [pc, #4]	@ (8006318 <__malloc_unlock+0x8>)
 8006312:	f7ff befb 	b.w	800610c <__retarget_lock_release_recursive>
 8006316:	bf00      	nop
 8006318:	20004eb4 	.word	0x20004eb4

0800631c <__sfputc_r>:
 800631c:	6893      	ldr	r3, [r2, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	b410      	push	{r4}
 8006324:	6093      	str	r3, [r2, #8]
 8006326:	da08      	bge.n	800633a <__sfputc_r+0x1e>
 8006328:	6994      	ldr	r4, [r2, #24]
 800632a:	42a3      	cmp	r3, r4
 800632c:	db01      	blt.n	8006332 <__sfputc_r+0x16>
 800632e:	290a      	cmp	r1, #10
 8006330:	d103      	bne.n	800633a <__sfputc_r+0x1e>
 8006332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006336:	f000 bb6d 	b.w	8006a14 <__swbuf_r>
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	1c58      	adds	r0, r3, #1
 800633e:	6010      	str	r0, [r2, #0]
 8006340:	7019      	strb	r1, [r3, #0]
 8006342:	4608      	mov	r0, r1
 8006344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006348:	4770      	bx	lr

0800634a <__sfputs_r>:
 800634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	4614      	mov	r4, r2
 8006352:	18d5      	adds	r5, r2, r3
 8006354:	42ac      	cmp	r4, r5
 8006356:	d101      	bne.n	800635c <__sfputs_r+0x12>
 8006358:	2000      	movs	r0, #0
 800635a:	e007      	b.n	800636c <__sfputs_r+0x22>
 800635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006360:	463a      	mov	r2, r7
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffda 	bl	800631c <__sfputc_r>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d1f3      	bne.n	8006354 <__sfputs_r+0xa>
 800636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006370 <_vfiprintf_r>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	460d      	mov	r5, r1
 8006376:	b09d      	sub	sp, #116	@ 0x74
 8006378:	4614      	mov	r4, r2
 800637a:	4698      	mov	r8, r3
 800637c:	4606      	mov	r6, r0
 800637e:	b118      	cbz	r0, 8006388 <_vfiprintf_r+0x18>
 8006380:	6a03      	ldr	r3, [r0, #32]
 8006382:	b90b      	cbnz	r3, 8006388 <_vfiprintf_r+0x18>
 8006384:	f7ff fd66 	bl	8005e54 <__sinit>
 8006388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800638a:	07d9      	lsls	r1, r3, #31
 800638c:	d405      	bmi.n	800639a <_vfiprintf_r+0x2a>
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	059a      	lsls	r2, r3, #22
 8006392:	d402      	bmi.n	800639a <_vfiprintf_r+0x2a>
 8006394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006396:	f7ff feb8 	bl	800610a <__retarget_lock_acquire_recursive>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	071b      	lsls	r3, r3, #28
 800639e:	d501      	bpl.n	80063a4 <_vfiprintf_r+0x34>
 80063a0:	692b      	ldr	r3, [r5, #16]
 80063a2:	b99b      	cbnz	r3, 80063cc <_vfiprintf_r+0x5c>
 80063a4:	4629      	mov	r1, r5
 80063a6:	4630      	mov	r0, r6
 80063a8:	f000 fb72 	bl	8006a90 <__swsetup_r>
 80063ac:	b170      	cbz	r0, 80063cc <_vfiprintf_r+0x5c>
 80063ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b0:	07dc      	lsls	r4, r3, #31
 80063b2:	d504      	bpl.n	80063be <_vfiprintf_r+0x4e>
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	b01d      	add	sp, #116	@ 0x74
 80063ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063be:	89ab      	ldrh	r3, [r5, #12]
 80063c0:	0598      	lsls	r0, r3, #22
 80063c2:	d4f7      	bmi.n	80063b4 <_vfiprintf_r+0x44>
 80063c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c6:	f7ff fea1 	bl	800610c <__retarget_lock_release_recursive>
 80063ca:	e7f3      	b.n	80063b4 <_vfiprintf_r+0x44>
 80063cc:	2300      	movs	r3, #0
 80063ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d0:	2320      	movs	r3, #32
 80063d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063da:	2330      	movs	r3, #48	@ 0x30
 80063dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800658c <_vfiprintf_r+0x21c>
 80063e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063e4:	f04f 0901 	mov.w	r9, #1
 80063e8:	4623      	mov	r3, r4
 80063ea:	469a      	mov	sl, r3
 80063ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f0:	b10a      	cbz	r2, 80063f6 <_vfiprintf_r+0x86>
 80063f2:	2a25      	cmp	r2, #37	@ 0x25
 80063f4:	d1f9      	bne.n	80063ea <_vfiprintf_r+0x7a>
 80063f6:	ebba 0b04 	subs.w	fp, sl, r4
 80063fa:	d00b      	beq.n	8006414 <_vfiprintf_r+0xa4>
 80063fc:	465b      	mov	r3, fp
 80063fe:	4622      	mov	r2, r4
 8006400:	4629      	mov	r1, r5
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ffa1 	bl	800634a <__sfputs_r>
 8006408:	3001      	adds	r0, #1
 800640a:	f000 80a7 	beq.w	800655c <_vfiprintf_r+0x1ec>
 800640e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006410:	445a      	add	r2, fp
 8006412:	9209      	str	r2, [sp, #36]	@ 0x24
 8006414:	f89a 3000 	ldrb.w	r3, [sl]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 809f 	beq.w	800655c <_vfiprintf_r+0x1ec>
 800641e:	2300      	movs	r3, #0
 8006420:	f04f 32ff 	mov.w	r2, #4294967295
 8006424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006434:	931a      	str	r3, [sp, #104]	@ 0x68
 8006436:	4654      	mov	r4, sl
 8006438:	2205      	movs	r2, #5
 800643a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643e:	4853      	ldr	r0, [pc, #332]	@ (800658c <_vfiprintf_r+0x21c>)
 8006440:	f7f9 fece 	bl	80001e0 <memchr>
 8006444:	9a04      	ldr	r2, [sp, #16]
 8006446:	b9d8      	cbnz	r0, 8006480 <_vfiprintf_r+0x110>
 8006448:	06d1      	lsls	r1, r2, #27
 800644a:	bf44      	itt	mi
 800644c:	2320      	movmi	r3, #32
 800644e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006452:	0713      	lsls	r3, r2, #28
 8006454:	bf44      	itt	mi
 8006456:	232b      	movmi	r3, #43	@ 0x2b
 8006458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800645c:	f89a 3000 	ldrb.w	r3, [sl]
 8006460:	2b2a      	cmp	r3, #42	@ 0x2a
 8006462:	d015      	beq.n	8006490 <_vfiprintf_r+0x120>
 8006464:	9a07      	ldr	r2, [sp, #28]
 8006466:	4654      	mov	r4, sl
 8006468:	2000      	movs	r0, #0
 800646a:	f04f 0c0a 	mov.w	ip, #10
 800646e:	4621      	mov	r1, r4
 8006470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006474:	3b30      	subs	r3, #48	@ 0x30
 8006476:	2b09      	cmp	r3, #9
 8006478:	d94b      	bls.n	8006512 <_vfiprintf_r+0x1a2>
 800647a:	b1b0      	cbz	r0, 80064aa <_vfiprintf_r+0x13a>
 800647c:	9207      	str	r2, [sp, #28]
 800647e:	e014      	b.n	80064aa <_vfiprintf_r+0x13a>
 8006480:	eba0 0308 	sub.w	r3, r0, r8
 8006484:	fa09 f303 	lsl.w	r3, r9, r3
 8006488:	4313      	orrs	r3, r2
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	46a2      	mov	sl, r4
 800648e:	e7d2      	b.n	8006436 <_vfiprintf_r+0xc6>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	1d19      	adds	r1, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	9103      	str	r1, [sp, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfbb      	ittet	lt
 800649c:	425b      	neglt	r3, r3
 800649e:	f042 0202 	orrlt.w	r2, r2, #2
 80064a2:	9307      	strge	r3, [sp, #28]
 80064a4:	9307      	strlt	r3, [sp, #28]
 80064a6:	bfb8      	it	lt
 80064a8:	9204      	strlt	r2, [sp, #16]
 80064aa:	7823      	ldrb	r3, [r4, #0]
 80064ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80064ae:	d10a      	bne.n	80064c6 <_vfiprintf_r+0x156>
 80064b0:	7863      	ldrb	r3, [r4, #1]
 80064b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064b4:	d132      	bne.n	800651c <_vfiprintf_r+0x1ac>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9203      	str	r2, [sp, #12]
 80064be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064c2:	3402      	adds	r4, #2
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800659c <_vfiprintf_r+0x22c>
 80064ca:	7821      	ldrb	r1, [r4, #0]
 80064cc:	2203      	movs	r2, #3
 80064ce:	4650      	mov	r0, sl
 80064d0:	f7f9 fe86 	bl	80001e0 <memchr>
 80064d4:	b138      	cbz	r0, 80064e6 <_vfiprintf_r+0x176>
 80064d6:	9b04      	ldr	r3, [sp, #16]
 80064d8:	eba0 000a 	sub.w	r0, r0, sl
 80064dc:	2240      	movs	r2, #64	@ 0x40
 80064de:	4082      	lsls	r2, r0
 80064e0:	4313      	orrs	r3, r2
 80064e2:	3401      	adds	r4, #1
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ea:	4829      	ldr	r0, [pc, #164]	@ (8006590 <_vfiprintf_r+0x220>)
 80064ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064f0:	2206      	movs	r2, #6
 80064f2:	f7f9 fe75 	bl	80001e0 <memchr>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d03f      	beq.n	800657a <_vfiprintf_r+0x20a>
 80064fa:	4b26      	ldr	r3, [pc, #152]	@ (8006594 <_vfiprintf_r+0x224>)
 80064fc:	bb1b      	cbnz	r3, 8006546 <_vfiprintf_r+0x1d6>
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	3307      	adds	r3, #7
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	3308      	adds	r3, #8
 8006508:	9303      	str	r3, [sp, #12]
 800650a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650c:	443b      	add	r3, r7
 800650e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006510:	e76a      	b.n	80063e8 <_vfiprintf_r+0x78>
 8006512:	fb0c 3202 	mla	r2, ip, r2, r3
 8006516:	460c      	mov	r4, r1
 8006518:	2001      	movs	r0, #1
 800651a:	e7a8      	b.n	800646e <_vfiprintf_r+0xfe>
 800651c:	2300      	movs	r3, #0
 800651e:	3401      	adds	r4, #1
 8006520:	9305      	str	r3, [sp, #20]
 8006522:	4619      	mov	r1, r3
 8006524:	f04f 0c0a 	mov.w	ip, #10
 8006528:	4620      	mov	r0, r4
 800652a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800652e:	3a30      	subs	r2, #48	@ 0x30
 8006530:	2a09      	cmp	r2, #9
 8006532:	d903      	bls.n	800653c <_vfiprintf_r+0x1cc>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0c6      	beq.n	80064c6 <_vfiprintf_r+0x156>
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	e7c4      	b.n	80064c6 <_vfiprintf_r+0x156>
 800653c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006540:	4604      	mov	r4, r0
 8006542:	2301      	movs	r3, #1
 8006544:	e7f0      	b.n	8006528 <_vfiprintf_r+0x1b8>
 8006546:	ab03      	add	r3, sp, #12
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	462a      	mov	r2, r5
 800654c:	4b12      	ldr	r3, [pc, #72]	@ (8006598 <_vfiprintf_r+0x228>)
 800654e:	a904      	add	r1, sp, #16
 8006550:	4630      	mov	r0, r6
 8006552:	f3af 8000 	nop.w
 8006556:	4607      	mov	r7, r0
 8006558:	1c78      	adds	r0, r7, #1
 800655a:	d1d6      	bne.n	800650a <_vfiprintf_r+0x19a>
 800655c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800655e:	07d9      	lsls	r1, r3, #31
 8006560:	d405      	bmi.n	800656e <_vfiprintf_r+0x1fe>
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	059a      	lsls	r2, r3, #22
 8006566:	d402      	bmi.n	800656e <_vfiprintf_r+0x1fe>
 8006568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800656a:	f7ff fdcf 	bl	800610c <__retarget_lock_release_recursive>
 800656e:	89ab      	ldrh	r3, [r5, #12]
 8006570:	065b      	lsls	r3, r3, #25
 8006572:	f53f af1f 	bmi.w	80063b4 <_vfiprintf_r+0x44>
 8006576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006578:	e71e      	b.n	80063b8 <_vfiprintf_r+0x48>
 800657a:	ab03      	add	r3, sp, #12
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	462a      	mov	r2, r5
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <_vfiprintf_r+0x228>)
 8006582:	a904      	add	r1, sp, #16
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f879 	bl	800667c <_printf_i>
 800658a:	e7e4      	b.n	8006556 <_vfiprintf_r+0x1e6>
 800658c:	08006d44 	.word	0x08006d44
 8006590:	08006d4e 	.word	0x08006d4e
 8006594:	00000000 	.word	0x00000000
 8006598:	0800634b 	.word	0x0800634b
 800659c:	08006d4a 	.word	0x08006d4a

080065a0 <_printf_common>:
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	4616      	mov	r6, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	688a      	ldr	r2, [r1, #8]
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfb8      	it	lt
 80065b4:	4613      	movlt	r3, r2
 80065b6:	6033      	str	r3, [r6, #0]
 80065b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065bc:	4607      	mov	r7, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b10a      	cbz	r2, 80065c6 <_printf_common+0x26>
 80065c2:	3301      	adds	r3, #1
 80065c4:	6033      	str	r3, [r6, #0]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	0699      	lsls	r1, r3, #26
 80065ca:	bf42      	ittt	mi
 80065cc:	6833      	ldrmi	r3, [r6, #0]
 80065ce:	3302      	addmi	r3, #2
 80065d0:	6033      	strmi	r3, [r6, #0]
 80065d2:	6825      	ldr	r5, [r4, #0]
 80065d4:	f015 0506 	ands.w	r5, r5, #6
 80065d8:	d106      	bne.n	80065e8 <_printf_common+0x48>
 80065da:	f104 0a19 	add.w	sl, r4, #25
 80065de:	68e3      	ldr	r3, [r4, #12]
 80065e0:	6832      	ldr	r2, [r6, #0]
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	42ab      	cmp	r3, r5
 80065e6:	dc26      	bgt.n	8006636 <_printf_common+0x96>
 80065e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	3b00      	subs	r3, #0
 80065f0:	bf18      	it	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	0692      	lsls	r2, r2, #26
 80065f6:	d42b      	bmi.n	8006650 <_printf_common+0xb0>
 80065f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065fc:	4641      	mov	r1, r8
 80065fe:	4638      	mov	r0, r7
 8006600:	47c8      	blx	r9
 8006602:	3001      	adds	r0, #1
 8006604:	d01e      	beq.n	8006644 <_printf_common+0xa4>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	6922      	ldr	r2, [r4, #16]
 800660a:	f003 0306 	and.w	r3, r3, #6
 800660e:	2b04      	cmp	r3, #4
 8006610:	bf02      	ittt	eq
 8006612:	68e5      	ldreq	r5, [r4, #12]
 8006614:	6833      	ldreq	r3, [r6, #0]
 8006616:	1aed      	subeq	r5, r5, r3
 8006618:	68a3      	ldr	r3, [r4, #8]
 800661a:	bf0c      	ite	eq
 800661c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006620:	2500      	movne	r5, #0
 8006622:	4293      	cmp	r3, r2
 8006624:	bfc4      	itt	gt
 8006626:	1a9b      	subgt	r3, r3, r2
 8006628:	18ed      	addgt	r5, r5, r3
 800662a:	2600      	movs	r6, #0
 800662c:	341a      	adds	r4, #26
 800662e:	42b5      	cmp	r5, r6
 8006630:	d11a      	bne.n	8006668 <_printf_common+0xc8>
 8006632:	2000      	movs	r0, #0
 8006634:	e008      	b.n	8006648 <_printf_common+0xa8>
 8006636:	2301      	movs	r3, #1
 8006638:	4652      	mov	r2, sl
 800663a:	4641      	mov	r1, r8
 800663c:	4638      	mov	r0, r7
 800663e:	47c8      	blx	r9
 8006640:	3001      	adds	r0, #1
 8006642:	d103      	bne.n	800664c <_printf_common+0xac>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664c:	3501      	adds	r5, #1
 800664e:	e7c6      	b.n	80065de <_printf_common+0x3e>
 8006650:	18e1      	adds	r1, r4, r3
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	2030      	movs	r0, #48	@ 0x30
 8006656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800665a:	4422      	add	r2, r4
 800665c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006664:	3302      	adds	r3, #2
 8006666:	e7c7      	b.n	80065f8 <_printf_common+0x58>
 8006668:	2301      	movs	r3, #1
 800666a:	4622      	mov	r2, r4
 800666c:	4641      	mov	r1, r8
 800666e:	4638      	mov	r0, r7
 8006670:	47c8      	blx	r9
 8006672:	3001      	adds	r0, #1
 8006674:	d0e6      	beq.n	8006644 <_printf_common+0xa4>
 8006676:	3601      	adds	r6, #1
 8006678:	e7d9      	b.n	800662e <_printf_common+0x8e>
	...

0800667c <_printf_i>:
 800667c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	7e0f      	ldrb	r7, [r1, #24]
 8006682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006684:	2f78      	cmp	r7, #120	@ 0x78
 8006686:	4691      	mov	r9, r2
 8006688:	4680      	mov	r8, r0
 800668a:	460c      	mov	r4, r1
 800668c:	469a      	mov	sl, r3
 800668e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006692:	d807      	bhi.n	80066a4 <_printf_i+0x28>
 8006694:	2f62      	cmp	r7, #98	@ 0x62
 8006696:	d80a      	bhi.n	80066ae <_printf_i+0x32>
 8006698:	2f00      	cmp	r7, #0
 800669a:	f000 80d2 	beq.w	8006842 <_printf_i+0x1c6>
 800669e:	2f58      	cmp	r7, #88	@ 0x58
 80066a0:	f000 80b9 	beq.w	8006816 <_printf_i+0x19a>
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066ac:	e03a      	b.n	8006724 <_printf_i+0xa8>
 80066ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066b2:	2b15      	cmp	r3, #21
 80066b4:	d8f6      	bhi.n	80066a4 <_printf_i+0x28>
 80066b6:	a101      	add	r1, pc, #4	@ (adr r1, 80066bc <_printf_i+0x40>)
 80066b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006729 	.word	0x08006729
 80066c4:	080066a5 	.word	0x080066a5
 80066c8:	080066a5 	.word	0x080066a5
 80066cc:	080066a5 	.word	0x080066a5
 80066d0:	080066a5 	.word	0x080066a5
 80066d4:	08006729 	.word	0x08006729
 80066d8:	080066a5 	.word	0x080066a5
 80066dc:	080066a5 	.word	0x080066a5
 80066e0:	080066a5 	.word	0x080066a5
 80066e4:	080066a5 	.word	0x080066a5
 80066e8:	08006829 	.word	0x08006829
 80066ec:	08006753 	.word	0x08006753
 80066f0:	080067e3 	.word	0x080067e3
 80066f4:	080066a5 	.word	0x080066a5
 80066f8:	080066a5 	.word	0x080066a5
 80066fc:	0800684b 	.word	0x0800684b
 8006700:	080066a5 	.word	0x080066a5
 8006704:	08006753 	.word	0x08006753
 8006708:	080066a5 	.word	0x080066a5
 800670c:	080066a5 	.word	0x080066a5
 8006710:	080067eb 	.word	0x080067eb
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6032      	str	r2, [r6, #0]
 800671c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006724:	2301      	movs	r3, #1
 8006726:	e09d      	b.n	8006864 <_printf_i+0x1e8>
 8006728:	6833      	ldr	r3, [r6, #0]
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	1d19      	adds	r1, r3, #4
 800672e:	6031      	str	r1, [r6, #0]
 8006730:	0606      	lsls	r6, r0, #24
 8006732:	d501      	bpl.n	8006738 <_printf_i+0xbc>
 8006734:	681d      	ldr	r5, [r3, #0]
 8006736:	e003      	b.n	8006740 <_printf_i+0xc4>
 8006738:	0645      	lsls	r5, r0, #25
 800673a:	d5fb      	bpl.n	8006734 <_printf_i+0xb8>
 800673c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006740:	2d00      	cmp	r5, #0
 8006742:	da03      	bge.n	800674c <_printf_i+0xd0>
 8006744:	232d      	movs	r3, #45	@ 0x2d
 8006746:	426d      	negs	r5, r5
 8006748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674c:	4859      	ldr	r0, [pc, #356]	@ (80068b4 <_printf_i+0x238>)
 800674e:	230a      	movs	r3, #10
 8006750:	e011      	b.n	8006776 <_printf_i+0xfa>
 8006752:	6821      	ldr	r1, [r4, #0]
 8006754:	6833      	ldr	r3, [r6, #0]
 8006756:	0608      	lsls	r0, r1, #24
 8006758:	f853 5b04 	ldr.w	r5, [r3], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0xe8>
 800675e:	0649      	lsls	r1, r1, #25
 8006760:	bf48      	it	mi
 8006762:	b2ad      	uxthmi	r5, r5
 8006764:	2f6f      	cmp	r7, #111	@ 0x6f
 8006766:	4853      	ldr	r0, [pc, #332]	@ (80068b4 <_printf_i+0x238>)
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	bf14      	ite	ne
 800676c:	230a      	movne	r3, #10
 800676e:	2308      	moveq	r3, #8
 8006770:	2100      	movs	r1, #0
 8006772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006776:	6866      	ldr	r6, [r4, #4]
 8006778:	60a6      	str	r6, [r4, #8]
 800677a:	2e00      	cmp	r6, #0
 800677c:	bfa2      	ittt	ge
 800677e:	6821      	ldrge	r1, [r4, #0]
 8006780:	f021 0104 	bicge.w	r1, r1, #4
 8006784:	6021      	strge	r1, [r4, #0]
 8006786:	b90d      	cbnz	r5, 800678c <_printf_i+0x110>
 8006788:	2e00      	cmp	r6, #0
 800678a:	d04b      	beq.n	8006824 <_printf_i+0x1a8>
 800678c:	4616      	mov	r6, r2
 800678e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006792:	fb03 5711 	mls	r7, r3, r1, r5
 8006796:	5dc7      	ldrb	r7, [r0, r7]
 8006798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800679c:	462f      	mov	r7, r5
 800679e:	42bb      	cmp	r3, r7
 80067a0:	460d      	mov	r5, r1
 80067a2:	d9f4      	bls.n	800678e <_printf_i+0x112>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d10b      	bne.n	80067c0 <_printf_i+0x144>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07df      	lsls	r7, r3, #31
 80067ac:	d508      	bpl.n	80067c0 <_printf_i+0x144>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4299      	cmp	r1, r3
 80067b4:	bfde      	ittt	le
 80067b6:	2330      	movle	r3, #48	@ 0x30
 80067b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067c0:	1b92      	subs	r2, r2, r6
 80067c2:	6122      	str	r2, [r4, #16]
 80067c4:	f8cd a000 	str.w	sl, [sp]
 80067c8:	464b      	mov	r3, r9
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	4621      	mov	r1, r4
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7ff fee6 	bl	80065a0 <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d14a      	bne.n	800686e <_printf_i+0x1f2>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	b004      	add	sp, #16
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f043 0320 	orr.w	r3, r3, #32
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	4833      	ldr	r0, [pc, #204]	@ (80068b8 <_printf_i+0x23c>)
 80067ec:	2778      	movs	r7, #120	@ 0x78
 80067ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6831      	ldr	r1, [r6, #0]
 80067f6:	061f      	lsls	r7, r3, #24
 80067f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80067fc:	d402      	bmi.n	8006804 <_printf_i+0x188>
 80067fe:	065f      	lsls	r7, r3, #25
 8006800:	bf48      	it	mi
 8006802:	b2ad      	uxthmi	r5, r5
 8006804:	6031      	str	r1, [r6, #0]
 8006806:	07d9      	lsls	r1, r3, #31
 8006808:	bf44      	itt	mi
 800680a:	f043 0320 	orrmi.w	r3, r3, #32
 800680e:	6023      	strmi	r3, [r4, #0]
 8006810:	b11d      	cbz	r5, 800681a <_printf_i+0x19e>
 8006812:	2310      	movs	r3, #16
 8006814:	e7ac      	b.n	8006770 <_printf_i+0xf4>
 8006816:	4827      	ldr	r0, [pc, #156]	@ (80068b4 <_printf_i+0x238>)
 8006818:	e7e9      	b.n	80067ee <_printf_i+0x172>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f023 0320 	bic.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	e7f6      	b.n	8006812 <_printf_i+0x196>
 8006824:	4616      	mov	r6, r2
 8006826:	e7bd      	b.n	80067a4 <_printf_i+0x128>
 8006828:	6833      	ldr	r3, [r6, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	6961      	ldr	r1, [r4, #20]
 800682e:	1d18      	adds	r0, r3, #4
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	062e      	lsls	r6, r5, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d501      	bpl.n	800683c <_printf_i+0x1c0>
 8006838:	6019      	str	r1, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0x1c6>
 800683c:	0668      	lsls	r0, r5, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0x1bc>
 8006840:	8019      	strh	r1, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	4616      	mov	r6, r2
 8006848:	e7bc      	b.n	80067c4 <_printf_i+0x148>
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	6032      	str	r2, [r6, #0]
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	2100      	movs	r1, #0
 8006856:	4630      	mov	r0, r6
 8006858:	f7f9 fcc2 	bl	80001e0 <memchr>
 800685c:	b108      	cbz	r0, 8006862 <_printf_i+0x1e6>
 800685e:	1b80      	subs	r0, r0, r6
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	2300      	movs	r3, #0
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800686c:	e7aa      	b.n	80067c4 <_printf_i+0x148>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	4632      	mov	r2, r6
 8006872:	4649      	mov	r1, r9
 8006874:	4640      	mov	r0, r8
 8006876:	47d0      	blx	sl
 8006878:	3001      	adds	r0, #1
 800687a:	d0ad      	beq.n	80067d8 <_printf_i+0x15c>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	079b      	lsls	r3, r3, #30
 8006880:	d413      	bmi.n	80068aa <_printf_i+0x22e>
 8006882:	68e0      	ldr	r0, [r4, #12]
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4298      	cmp	r0, r3
 8006888:	bfb8      	it	lt
 800688a:	4618      	movlt	r0, r3
 800688c:	e7a6      	b.n	80067dc <_printf_i+0x160>
 800688e:	2301      	movs	r3, #1
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d09d      	beq.n	80067d8 <_printf_i+0x15c>
 800689c:	3501      	adds	r5, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dcf2      	bgt.n	800688e <_printf_i+0x212>
 80068a8:	e7eb      	b.n	8006882 <_printf_i+0x206>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f104 0619 	add.w	r6, r4, #25
 80068b0:	e7f5      	b.n	800689e <_printf_i+0x222>
 80068b2:	bf00      	nop
 80068b4:	08006d55 	.word	0x08006d55
 80068b8:	08006d66 	.word	0x08006d66

080068bc <__sflush_r>:
 80068bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	0716      	lsls	r6, r2, #28
 80068c6:	4605      	mov	r5, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	d454      	bmi.n	8006976 <__sflush_r+0xba>
 80068cc:	684b      	ldr	r3, [r1, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dc02      	bgt.n	80068d8 <__sflush_r+0x1c>
 80068d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dd48      	ble.n	800696a <__sflush_r+0xae>
 80068d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068da:	2e00      	cmp	r6, #0
 80068dc:	d045      	beq.n	800696a <__sflush_r+0xae>
 80068de:	2300      	movs	r3, #0
 80068e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068e4:	682f      	ldr	r7, [r5, #0]
 80068e6:	6a21      	ldr	r1, [r4, #32]
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	d030      	beq.n	800694e <__sflush_r+0x92>
 80068ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	0759      	lsls	r1, r3, #29
 80068f2:	d505      	bpl.n	8006900 <__sflush_r+0x44>
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068fa:	b10b      	cbz	r3, 8006900 <__sflush_r+0x44>
 80068fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006904:	6a21      	ldr	r1, [r4, #32]
 8006906:	4628      	mov	r0, r5
 8006908:	47b0      	blx	r6
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	d106      	bne.n	800691e <__sflush_r+0x62>
 8006910:	6829      	ldr	r1, [r5, #0]
 8006912:	291d      	cmp	r1, #29
 8006914:	d82b      	bhi.n	800696e <__sflush_r+0xb2>
 8006916:	4a2a      	ldr	r2, [pc, #168]	@ (80069c0 <__sflush_r+0x104>)
 8006918:	410a      	asrs	r2, r1
 800691a:	07d6      	lsls	r6, r2, #31
 800691c:	d427      	bmi.n	800696e <__sflush_r+0xb2>
 800691e:	2200      	movs	r2, #0
 8006920:	6062      	str	r2, [r4, #4]
 8006922:	04d9      	lsls	r1, r3, #19
 8006924:	6922      	ldr	r2, [r4, #16]
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	d504      	bpl.n	8006934 <__sflush_r+0x78>
 800692a:	1c42      	adds	r2, r0, #1
 800692c:	d101      	bne.n	8006932 <__sflush_r+0x76>
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	b903      	cbnz	r3, 8006934 <__sflush_r+0x78>
 8006932:	6560      	str	r0, [r4, #84]	@ 0x54
 8006934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006936:	602f      	str	r7, [r5, #0]
 8006938:	b1b9      	cbz	r1, 800696a <__sflush_r+0xae>
 800693a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800693e:	4299      	cmp	r1, r3
 8006940:	d002      	beq.n	8006948 <__sflush_r+0x8c>
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff fbf2 	bl	800612c <_free_r>
 8006948:	2300      	movs	r3, #0
 800694a:	6363      	str	r3, [r4, #52]	@ 0x34
 800694c:	e00d      	b.n	800696a <__sflush_r+0xae>
 800694e:	2301      	movs	r3, #1
 8006950:	4628      	mov	r0, r5
 8006952:	47b0      	blx	r6
 8006954:	4602      	mov	r2, r0
 8006956:	1c50      	adds	r0, r2, #1
 8006958:	d1c9      	bne.n	80068ee <__sflush_r+0x32>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0c6      	beq.n	80068ee <__sflush_r+0x32>
 8006960:	2b1d      	cmp	r3, #29
 8006962:	d001      	beq.n	8006968 <__sflush_r+0xac>
 8006964:	2b16      	cmp	r3, #22
 8006966:	d11e      	bne.n	80069a6 <__sflush_r+0xea>
 8006968:	602f      	str	r7, [r5, #0]
 800696a:	2000      	movs	r0, #0
 800696c:	e022      	b.n	80069b4 <__sflush_r+0xf8>
 800696e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006972:	b21b      	sxth	r3, r3
 8006974:	e01b      	b.n	80069ae <__sflush_r+0xf2>
 8006976:	690f      	ldr	r7, [r1, #16]
 8006978:	2f00      	cmp	r7, #0
 800697a:	d0f6      	beq.n	800696a <__sflush_r+0xae>
 800697c:	0793      	lsls	r3, r2, #30
 800697e:	680e      	ldr	r6, [r1, #0]
 8006980:	bf08      	it	eq
 8006982:	694b      	ldreq	r3, [r1, #20]
 8006984:	600f      	str	r7, [r1, #0]
 8006986:	bf18      	it	ne
 8006988:	2300      	movne	r3, #0
 800698a:	eba6 0807 	sub.w	r8, r6, r7
 800698e:	608b      	str	r3, [r1, #8]
 8006990:	f1b8 0f00 	cmp.w	r8, #0
 8006994:	dde9      	ble.n	800696a <__sflush_r+0xae>
 8006996:	6a21      	ldr	r1, [r4, #32]
 8006998:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800699a:	4643      	mov	r3, r8
 800699c:	463a      	mov	r2, r7
 800699e:	4628      	mov	r0, r5
 80069a0:	47b0      	blx	r6
 80069a2:	2800      	cmp	r0, #0
 80069a4:	dc08      	bgt.n	80069b8 <__sflush_r+0xfc>
 80069a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	4407      	add	r7, r0
 80069ba:	eba8 0800 	sub.w	r8, r8, r0
 80069be:	e7e7      	b.n	8006990 <__sflush_r+0xd4>
 80069c0:	dfbffffe 	.word	0xdfbffffe

080069c4 <_fflush_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	4605      	mov	r5, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	b913      	cbnz	r3, 80069d4 <_fflush_r+0x10>
 80069ce:	2500      	movs	r5, #0
 80069d0:	4628      	mov	r0, r5
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	b118      	cbz	r0, 80069de <_fflush_r+0x1a>
 80069d6:	6a03      	ldr	r3, [r0, #32]
 80069d8:	b90b      	cbnz	r3, 80069de <_fflush_r+0x1a>
 80069da:	f7ff fa3b 	bl	8005e54 <__sinit>
 80069de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f3      	beq.n	80069ce <_fflush_r+0xa>
 80069e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069e8:	07d0      	lsls	r0, r2, #31
 80069ea:	d404      	bmi.n	80069f6 <_fflush_r+0x32>
 80069ec:	0599      	lsls	r1, r3, #22
 80069ee:	d402      	bmi.n	80069f6 <_fflush_r+0x32>
 80069f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069f2:	f7ff fb8a 	bl	800610a <__retarget_lock_acquire_recursive>
 80069f6:	4628      	mov	r0, r5
 80069f8:	4621      	mov	r1, r4
 80069fa:	f7ff ff5f 	bl	80068bc <__sflush_r>
 80069fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a00:	07da      	lsls	r2, r3, #31
 8006a02:	4605      	mov	r5, r0
 8006a04:	d4e4      	bmi.n	80069d0 <_fflush_r+0xc>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	059b      	lsls	r3, r3, #22
 8006a0a:	d4e1      	bmi.n	80069d0 <_fflush_r+0xc>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a0e:	f7ff fb7d 	bl	800610c <__retarget_lock_release_recursive>
 8006a12:	e7dd      	b.n	80069d0 <_fflush_r+0xc>

08006a14 <__swbuf_r>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	460e      	mov	r6, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	b118      	cbz	r0, 8006a26 <__swbuf_r+0x12>
 8006a1e:	6a03      	ldr	r3, [r0, #32]
 8006a20:	b90b      	cbnz	r3, 8006a26 <__swbuf_r+0x12>
 8006a22:	f7ff fa17 	bl	8005e54 <__sinit>
 8006a26:	69a3      	ldr	r3, [r4, #24]
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	071a      	lsls	r2, r3, #28
 8006a2e:	d501      	bpl.n	8006a34 <__swbuf_r+0x20>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	b943      	cbnz	r3, 8006a46 <__swbuf_r+0x32>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f82a 	bl	8006a90 <__swsetup_r>
 8006a3c:	b118      	cbz	r0, 8006a46 <__swbuf_r+0x32>
 8006a3e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a42:	4638      	mov	r0, r7
 8006a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	1a98      	subs	r0, r3, r2
 8006a4c:	6963      	ldr	r3, [r4, #20]
 8006a4e:	b2f6      	uxtb	r6, r6
 8006a50:	4283      	cmp	r3, r0
 8006a52:	4637      	mov	r7, r6
 8006a54:	dc05      	bgt.n	8006a62 <__swbuf_r+0x4e>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f7ff ffb3 	bl	80069c4 <_fflush_r>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d1ed      	bne.n	8006a3e <__swbuf_r+0x2a>
 8006a62:	68a3      	ldr	r3, [r4, #8]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	60a3      	str	r3, [r4, #8]
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	6022      	str	r2, [r4, #0]
 8006a6e:	701e      	strb	r6, [r3, #0]
 8006a70:	6962      	ldr	r2, [r4, #20]
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d004      	beq.n	8006a82 <__swbuf_r+0x6e>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	07db      	lsls	r3, r3, #31
 8006a7c:	d5e1      	bpl.n	8006a42 <__swbuf_r+0x2e>
 8006a7e:	2e0a      	cmp	r6, #10
 8006a80:	d1df      	bne.n	8006a42 <__swbuf_r+0x2e>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7ff ff9d 	bl	80069c4 <_fflush_r>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0d9      	beq.n	8006a42 <__swbuf_r+0x2e>
 8006a8e:	e7d6      	b.n	8006a3e <__swbuf_r+0x2a>

08006a90 <__swsetup_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <__swsetup_r+0xa8>)
 8006a94:	4605      	mov	r5, r0
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	460c      	mov	r4, r1
 8006a9a:	b118      	cbz	r0, 8006aa4 <__swsetup_r+0x14>
 8006a9c:	6a03      	ldr	r3, [r0, #32]
 8006a9e:	b90b      	cbnz	r3, 8006aa4 <__swsetup_r+0x14>
 8006aa0:	f7ff f9d8 	bl	8005e54 <__sinit>
 8006aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa8:	0719      	lsls	r1, r3, #28
 8006aaa:	d422      	bmi.n	8006af2 <__swsetup_r+0x62>
 8006aac:	06da      	lsls	r2, r3, #27
 8006aae:	d407      	bmi.n	8006ac0 <__swsetup_r+0x30>
 8006ab0:	2209      	movs	r2, #9
 8006ab2:	602a      	str	r2, [r5, #0]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e033      	b.n	8006b28 <__swsetup_r+0x98>
 8006ac0:	0758      	lsls	r0, r3, #29
 8006ac2:	d512      	bpl.n	8006aea <__swsetup_r+0x5a>
 8006ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ac6:	b141      	cbz	r1, 8006ada <__swsetup_r+0x4a>
 8006ac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006acc:	4299      	cmp	r1, r3
 8006ace:	d002      	beq.n	8006ad6 <__swsetup_r+0x46>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff fb2b 	bl	800612c <_free_r>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f043 0308 	orr.w	r3, r3, #8
 8006af0:	81a3      	strh	r3, [r4, #12]
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	b94b      	cbnz	r3, 8006b0a <__swsetup_r+0x7a>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b00:	d003      	beq.n	8006b0a <__swsetup_r+0x7a>
 8006b02:	4621      	mov	r1, r4
 8006b04:	4628      	mov	r0, r5
 8006b06:	f000 f84f 	bl	8006ba8 <__smakebuf_r>
 8006b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0e:	f013 0201 	ands.w	r2, r3, #1
 8006b12:	d00a      	beq.n	8006b2a <__swsetup_r+0x9a>
 8006b14:	2200      	movs	r2, #0
 8006b16:	60a2      	str	r2, [r4, #8]
 8006b18:	6962      	ldr	r2, [r4, #20]
 8006b1a:	4252      	negs	r2, r2
 8006b1c:	61a2      	str	r2, [r4, #24]
 8006b1e:	6922      	ldr	r2, [r4, #16]
 8006b20:	b942      	cbnz	r2, 8006b34 <__swsetup_r+0xa4>
 8006b22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b26:	d1c5      	bne.n	8006ab4 <__swsetup_r+0x24>
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	0799      	lsls	r1, r3, #30
 8006b2c:	bf58      	it	pl
 8006b2e:	6962      	ldrpl	r2, [r4, #20]
 8006b30:	60a2      	str	r2, [r4, #8]
 8006b32:	e7f4      	b.n	8006b1e <__swsetup_r+0x8e>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e7f7      	b.n	8006b28 <__swsetup_r+0x98>
 8006b38:	2000001c 	.word	0x2000001c

08006b3c <_sbrk_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d06      	ldr	r5, [pc, #24]	@ (8006b58 <_sbrk_r+0x1c>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	f7fa fa3e 	bl	8000fc8 <_sbrk>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_sbrk_r+0x1a>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_sbrk_r+0x1a>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20004eb0 	.word	0x20004eb0

08006b5c <__swhatbuf_r>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	b096      	sub	sp, #88	@ 0x58
 8006b68:	4615      	mov	r5, r2
 8006b6a:	461e      	mov	r6, r3
 8006b6c:	da0d      	bge.n	8006b8a <__swhatbuf_r+0x2e>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b74:	f04f 0100 	mov.w	r1, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2340      	movne	r3, #64	@ 0x40
 8006b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b80:	2000      	movs	r0, #0
 8006b82:	6031      	str	r1, [r6, #0]
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	b016      	add	sp, #88	@ 0x58
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	466a      	mov	r2, sp
 8006b8c:	f000 f848 	bl	8006c20 <_fstat_r>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	dbec      	blt.n	8006b6e <__swhatbuf_r+0x12>
 8006b94:	9901      	ldr	r1, [sp, #4]
 8006b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b9e:	4259      	negs	r1, r3
 8006ba0:	4159      	adcs	r1, r3
 8006ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba6:	e7eb      	b.n	8006b80 <__swhatbuf_r+0x24>

08006ba8 <__smakebuf_r>:
 8006ba8:	898b      	ldrh	r3, [r1, #12]
 8006baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bac:	079d      	lsls	r5, r3, #30
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	d507      	bpl.n	8006bc4 <__smakebuf_r+0x1c>
 8006bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	6163      	str	r3, [r4, #20]
 8006bc0:	b003      	add	sp, #12
 8006bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc4:	ab01      	add	r3, sp, #4
 8006bc6:	466a      	mov	r2, sp
 8006bc8:	f7ff ffc8 	bl	8006b5c <__swhatbuf_r>
 8006bcc:	9f00      	ldr	r7, [sp, #0]
 8006bce:	4605      	mov	r5, r0
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff fb16 	bl	8006204 <_malloc_r>
 8006bd8:	b948      	cbnz	r0, 8006bee <__smakebuf_r+0x46>
 8006bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bde:	059a      	lsls	r2, r3, #22
 8006be0:	d4ee      	bmi.n	8006bc0 <__smakebuf_r+0x18>
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	f043 0302 	orr.w	r3, r3, #2
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	e7e2      	b.n	8006bb4 <__smakebuf_r+0xc>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	6020      	str	r0, [r4, #0]
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bfe:	b15b      	cbz	r3, 8006c18 <__smakebuf_r+0x70>
 8006c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f81d 	bl	8006c44 <_isatty_r>
 8006c0a:	b128      	cbz	r0, 8006c18 <__smakebuf_r+0x70>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	431d      	orrs	r5, r3
 8006c1c:	81a5      	strh	r5, [r4, #12]
 8006c1e:	e7cf      	b.n	8006bc0 <__smakebuf_r+0x18>

08006c20 <_fstat_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	@ (8006c40 <_fstat_r+0x20>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	f7fa f9a2 	bl	8000f76 <_fstat>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d102      	bne.n	8006c3c <_fstat_r+0x1c>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b103      	cbz	r3, 8006c3c <_fstat_r+0x1c>
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	20004eb0 	.word	0x20004eb0

08006c44 <_isatty_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d06      	ldr	r5, [pc, #24]	@ (8006c60 <_isatty_r+0x1c>)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fa f9a1 	bl	8000f96 <_isatty>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_isatty_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_isatty_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20004eb0 	.word	0x20004eb0

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
